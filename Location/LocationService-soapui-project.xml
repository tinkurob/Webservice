<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="ad72c1dc-07d0-40d2-b006-fac462492142" activeEnvironment="Default" name="LocationService" resourceRoot="" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" lastOpened="2018-05-17T10:52:58.047+05:30" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="TestSuite" value="REGRESSION on Vanilla"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value="TestCase Report"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Run in-process" value="false"/>
  <con:entry key="Password" value=""/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Test Case Tags" value=""/>
  <con:entry key="Export JUnit Results with test properties" value="false"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="TestCase" value="GET_LOCATION"/>
  <con:entry key="Username" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Environment" value="Default environment"/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Ignore Errors" value="true"/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Save Project" value="false"/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" id="524d6b0c-120f-46af-9b4c-d6bd393ac696" wadlVersion="http://wadl.dev.java.net/2009/02" name="Get Location by RestaurantID" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#TestSuite#EndPoint}</con:endpoint></con:endpoints><con:resource name="GetRestaurntDetailsByID" path="/BWWService.svc/GetRestaurntDetailsByID" id="26a1e28d-a84d-4610-801b-75557d467e1d"><con:settings/><con:parameters><con:parameter><con:name>iVendorID</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>iSiteID</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>iRestaurantID</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetRestaurntDetailsByID" id="5cb2159e-0086-41f0-b91a-e3cb171db61b" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:get="https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByID">get:Fault</con:element></con:representation><con:request name="Request 1" id="06a5f15e-6d27-4210-97b4-01f2e7937241" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="0bdd2bc0447e4e8886e7c3ecc91f210c"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="2d0723f455B8409C83a0d05Aa4030302"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-location-vanilla.cloudhub.io</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByID</con:originalUri><con:credentials><con:username>svc_loc_BdubsPortal</con:username><con:password>yOgUy9fbmyaefYaARqK1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iSiteID" value="6"/>
  <con:entry key="iVendorID" value="10"/>
  <con:entry key="iRestaurantID" value="1"/>
</con:parameters><con:parameterOrder><con:entry>iVendorID</con:entry><con:entry>iSiteID</con:entry><con:entry>iRestaurantID</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="8c43dd75-ddc6-473a-b0ca-3e6f54304c04" wadlVersion="http://wadl.dev.java.net/2009/02" name="Get Location by LatLong" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#TestSuite#EndPoint}</con:endpoint></con:endpoints><con:resource name="GetRestaurntDetailsByltdLng" path="/BWWService.svc/GetRestaurntDetailsByltdLng" id="30fa5ddf-0df9-4015-8450-eaaf72b0d136"><con:settings/><con:parameters><con:parameter><con:name>fLatitude</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>fLongitude</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>radius</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>iVendorID</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetRestaurntDetailsByltdLng" id="87ba2ee7-ba1e-454d-acab-241a8f47d112" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401 403</con:status><con:params/><con:element xmlns:get="https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByltdLng">get:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>504</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="0a020393-c029-45b5-ad26-770562e96d5c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="dfdbd245cb7746229f51d39f40efbffa"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="1B44fE3b0dCD4120ae875C90a661bd53"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-location-vanilla.cloudhub.io</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByltdLng</con:originalUri><con:credentials><con:username>svc_loc_BdubsPortal</con:username><con:password>yOgUy9fbmyaefYaARqK1</con:password><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="fLatitude" value="40.722036"/>
  <con:entry key="iVendorID" value="10"/>
  <con:entry key="fLongitude" value="-73.990425"/>
  <con:entry key="radius" value="5"/>
</con:parameters><con:parameterOrder><con:entry>fLatitude</con:entry><con:entry>fLongitude</con:entry><con:entry>radius</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="9f993d45-8b7c-4339-8fff-6d982df418b5" wadlVersion="http://wadl.dev.java.net/2009/02" name="Get Location by State" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#TestSuite#EndPoint}</con:endpoint></con:endpoints><con:resource name="GetRestaurantDetailsByState" path="/BWWService.svc/GetRestaurantDetailsByState" id="ea8ee8ff-c9a2-47ac-b310-c85b02845614"><con:settings/><con:parameters><con:parameter><con:name>strState</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>iVendorID</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetRestaurantDetailsByState" id="7233ccbe-cf0a-4c8b-9cb2-93759188bfbc" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:get="https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByState">get:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>504</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="80f926de-1522-4028-b0bf-3652b15caa30" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="850ba6cb2d2b4e959767511e4e361c0c"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="955631E61b9F4cE9A9F9D717B9435639"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://bdubslocationapi-perftest.cloudhub.io</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByState</con:originalUri><con:credentials><con:username>svc_loc_BdubsPortal</con:username><con:password>yOgUy9fbmyaefYaARqK1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="10"/>
  <con:entry key="strState" value="MN"/>
</con:parameters><con:parameterOrder><con:entry>strState</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="6bd39fc4-31e9-4e3d-8bd2-e69e8bb87fb7" wadlVersion="http://wadl.dev.java.net/2009/02" name="Get Location by Country" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#TestSuite#EndPoint}</con:endpoint></con:endpoints><con:resource name="GetRestaurantDetailsByCountry" path="/BWWService.svc/GetRestaurantDetailsByCountry" id="f352d1d7-5baa-4401-80d3-22e70f24d697"><con:settings/><con:parameters><con:parameter><con:name>strCountry</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>iVendorID</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetRestaurantDetailsByCountry" id="ac1e1fc0-9b20-4b09-b4c7-18777e4e177c" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>504</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:get="https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByCountry">get:Fault</con:element></con:representation><con:request name="Request 1" id="5e338f1a-eca9-4fe5-9228-d4e85dbc308b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_SECRET" value="955631E61b9F4cE9A9F9D717B9435639"/>
  &lt;con:entry key="X_CLIENT_ID" value="850ba6cb2d2b4e959767511e4e361c0c"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://bdubslocationapi-perftest.cloudhub.io</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByCountry</con:originalUri><con:credentials><con:username>svc_loc_BdubsPortal</con:username><con:password>yOgUy9fbmyaefYaARqK1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="10"/>
  <con:entry key="strCountry" value="United States"/>
</con:parameters><con:parameterOrder><con:entry>strCountry</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="bf865008-f496-44dd-96e3-4ded2a0c2077" wadlVersion="http://wadl.dev.java.net/2009/02" name="Get MenuItem by RestaurantID" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#TestSuite#EndPoint}</con:endpoint></con:endpoints><con:resource name="GetMenuItemDetailsByRestaurantID" path="/BWWService.svc/GetMenuItemDetailsByRestaurantID" id="01d5304e-383f-47e5-b538-bdc1ba53b0cc"><con:settings/><con:parameters><con:parameter><con:name>iRestaurantID</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>iVendorID</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetMenuItemDetailsByRestaurantID" id="ff492651-bfd0-401b-84b9-131a06baddf2" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:get="https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetMenuItemDetailsByRestaurantID">get:Fault</con:element></con:representation><con:request name="Request 1" id="02fc1f3b-e6bd-42fe-ab33-ad7461917b2f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_SECRET" value="955631E61b9F4cE9A9F9D717B9435639"/>
  &lt;con:entry key="X_CLIENT_ID" value="850ba6cb2d2b4e959767511e4e361c0c"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://bdubslocationapi-perftest.cloudhub.io</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetMenuItemDetailsByRestaurantID</con:originalUri><con:credentials><con:username>svc_loc_BdubsPortal</con:username><con:password>yOgUy9fbmyaefYaARqK1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="10"/>
  <con:entry key="iRestaurantID" value="292"/>
</con:parameters><con:parameterOrder><con:entry>iRestaurantID</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="ebcdb822-f39e-4dfb-814f-a9c5dee069c4" name="TestSuite - GET_LOCATION_BY_LAT_LONG"><con:description>TestSuite generated for REST Service [Get Location by LatLong]</con:description><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="8d9d198b-9ea5-48e6-a64a-dee7393d4848" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetRestaurntDetailsByltdLng TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [GetRestaurntDetailsByltdLng] located at [/BWWService.svc/GetRestaurntDetailsByltdLng]</con:description><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="restrequest" name="Step 1 - Get Restaurant details by Ltd &amp; Lng" id="570772a7-1ed6-4ab7-aac7-92ede88778e9"><con:settings/><con:config service="Get Location by LatLong" resourcePath="/BWWService.svc/GetRestaurntDetailsByltdLng" methodName="GetRestaurntDetailsByltdLng" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 1 - Get Restaurant details by Ltd &amp; Lng" id="0a020393-c029-45b5-ad26-770562e96d5c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="dfdbd245cb7746229f51d39f40efbffa"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="1B44fE3b0dCD4120ae875C90a661bd53"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-location-vanilla.cloudhub.io</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByltdLng</con:originalUri><con:assertion type="GroovyScriptAssertion" id="e5cc4885-0b08-4b24-8387-6056e0c46c98" name="Number of Restaurant"><con:configuration><scriptText>import net.sf.json.groovy.JsonSlurper
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(context.response)
a=object.CustomFlag2.size()
println a
log.info "Total Number::" +a
assert a</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="807c64f0-72a3-4aff-99a7-adf9330d5866" name="CORS"><con:configuration><scriptText>assert messageExchange.responseHeaders["Access-Control-Allow-Origin"] != null</scriptText></con:configuration></con:assertion><con:credentials><con:username>svc_loc_BdubsPortal</con:username><con:password>yOgUy9fbmyaefYaARqK1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="fLatitude" value=" 44.971436"/>
  <con:entry key="iVendorID" value="10"/>
  <con:entry key="fLongitude" value="-93.350227"/>
  <con:entry key="radius" value="10"/>
</con:parameters><con:parameterOrder><con:entry>fLatitude</con:entry><con:entry>fLongitude</con:entry><con:entry>radius</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="94e30048-deff-4de9-8c64-c4b6de68319f" name="TestSuite - GET_LOCATION_BY_RESTAURANTID"><con:description>TestSuite generated for REST Service [Get Location by RestaurantID]</con:description><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="cbc985a7-2ee2-4ae7-91bd-3fa652377829" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetRestaurntDetailsByID TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [GetRestaurntDetailsByID] located at [/BWWService.svc/GetRestaurntDetailsByID]</con:description><con:settings/><con:testStep type="restrequest" name="Step 1 - Get Restaurant details by RestaurantID" id="d482141c-3db4-48c5-8c30-49694795c2bd"><con:settings/><con:config service="Get Location by RestaurantID" resourcePath="/BWWService.svc/GetRestaurntDetailsByID" methodName="GetRestaurntDetailsByID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 1 - Get Restaurant details by RestaurantID" id="06a5f15e-6d27-4210-97b4-01f2e7937241" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="dfdbd245cb7746229f51d39f40efbffa"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="1B44fE3b0dCD4120ae875C90a661bd53"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-location-vanilla.cloudhub.io</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByID</con:originalUri><con:assertion type="GroovyScriptAssertion" id="cb34bd96-9b00-4581-9e4b-2573c2fc8342" name="Script Assertion"><con:configuration><scriptText>import net.sf.json.groovy.JsonSlurper
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(context.response)
println object.size()
a=object.size()
log.info "Total Number::" +object.size()
assert a</scriptText></con:configuration></con:assertion><con:credentials><con:username>svc_loc_BdubsPortal</con:username><con:password>yOgUy9fbmyaefYaARqK1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iSiteID" value="3"/>
  <con:entry key="iVendorID" value="50"/>
  <con:entry key="iRestaurantID" value="11"/>
</con:parameters><con:parameterOrder><con:entry>iVendorID</con:entry><con:entry>iSiteID</con:entry><con:entry>iRestaurantID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="2ae47991-9093-44c9-b915-0c3e761a65d8" name="TestSuite - GET_LOCATION_BY_STATE"><con:description>TestSuite generated for REST Service [Get Location by State]</con:description><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="9da38390-e4dc-4207-bb9c-5c7d29b032e8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetRestaurantDetailsByState TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [GetRestaurantDetailsByState] located at [/BWWService.svc/GetRestaurantDetailsByState]</con:description><con:settings/><con:testStep type="restrequest" name="Step 1 - Get Restaurant details by State" id="08dd4222-61e1-47af-becb-eaaa3524fb2a"><con:settings/><con:config service="Get Location by State" resourcePath="/BWWService.svc/GetRestaurantDetailsByState" methodName="GetRestaurantDetailsByState" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 1 - Get Restaurant details by State" id="80f926de-1522-4028-b0bf-3652b15caa30" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_SECRET" value="2d0723f455B8409C83a0d05Aa4030302"/>
  &lt;con:entry key="X_CLIENT_ID" value="0bdd2bc0447e4e8886e7c3ecc91f210c"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-location-vanilla.cloudhub.io</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByState</con:originalUri><con:assertion type="GroovyScriptAssertion" id="b47d4fd3-3053-46f8-8d13-a3340fa725ab" name="Script Assertion"><con:configuration><scriptText>import net.sf.json.groovy.JsonSlurper
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(context.response)
//println object.CustomFlag2.size()
a=object.CustomFlag2.size()
b=object.LocationName.size()
log.info "Total Number Restaurant::" +a
log.info "Total Number of Location::" +b
assert a
assert b</scriptText></con:configuration></con:assertion><con:credentials><con:username>svc_loc_BdubsPortal</con:username><con:password>yOgUy9fbmyaefYaARqK1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="10"/>
  <con:entry key="strState" value="MN"/>
</con:parameters><con:parameterOrder><con:entry>strState</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="837907f4-ec5e-42c2-9ec7-13136265fbf9" name="TestSuite - GET_MENUITEM_BY_RESTAURANTID"><con:description>TestSuite generated for REST Service [Get MenuItem by RestaurantID]</con:description><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="03216610-b71f-4064-8bc6-63c176337d75" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetMenuItemDetailsByRestaurantID TestCase" searchProperties="true"><con:description>TestCase generated for REST Resource [GetMenuItemDetailsByRestaurantID] located at [/BWWService.svc/GetMenuItemDetailsByRestaurantID]</con:description><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="restrequest" name="Step 1 - Get MenuItem details by RestaurantID" id="20f7bc90-7930-4721-a636-53a137d57b75"><con:settings/><con:config service="Get MenuItem by RestaurantID" resourcePath="/BWWService.svc/GetMenuItemDetailsByRestaurantID" methodName="GetMenuItemDetailsByRestaurantID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 1 - Get MenuItem details by RestaurantID" id="02fc1f3b-e6bd-42fe-ab33-ad7461917b2f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="0bdd2bc0447e4e8886e7c3ecc91f210c"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="2d0723f455B8409C83a0d05Aa4030302"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-location-vanilla.cloudhub.io</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetMenuItemDetailsByRestaurantID</con:originalUri><con:assertion type="GroovyScriptAssertion" id="0b78f68b-5065-4f55-9afc-8739660e9a8e" name="Script Assertion"><con:configuration><scriptText>import net.sf.json.groovy.JsonSlurper
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(context.response)
a=object.CommonMenuName.size()
println a
log.info "Total Number::" +a
assert a</scriptText></con:configuration></con:assertion><con:credentials><con:username>svc_loc_BdubsPortal</con:username><con:password>yOgUy9fbmyaefYaARqK1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="10"/>
  <con:entry key="iRestaurantID" value="292"/>
</con:parameters><con:parameterOrder><con:entry>iRestaurantID</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite id="72b581b7-2935-4ef1-b67f-26433c4e28f9" name="TestSuite - GET_LOCATION_BY_COUNTRY"><con:description>TestSuite generated for REST Service [Get Location by Country]</con:description><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="151eb622-e92a-4e89-8a91-545c850e5aba" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetRestaurntDetailsByCountry" searchProperties="true"><con:description>TestCase generated for REST Resource [GetRestaurantDetailsByCountry] located at [/BWWService.svc/GetRestaurantDetailsByCountry]</con:description><con:settings/><con:testStep type="restrequest" name="Step 1 - Get Restaurant details by Country" id="ee935e1f-77b1-4cc4-a12c-148927ce7515"><con:settings/><con:config service="Get Location by Country" resourcePath="/BWWService.svc/GetRestaurantDetailsByCountry" methodName="GetRestaurantDetailsByCountry" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 1 - Get Restaurant details by Country" id="5e338f1a-eca9-4fe5-9228-d4e85dbc308b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="0bdd2bc0447e4e8886e7c3ecc91f210c"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="2d0723f455B8409C83a0d05Aa4030302"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://api-location-vanilla.cloudhub.io</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByCountry</con:originalUri><con:assertion type="GroovyScriptAssertion" id="f0200820-a70d-433b-b87b-82785415e6fe" name="Script Assertion"><con:configuration><scriptText>import net.sf.json.groovy.JsonSlurper
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(context.response)
a=object.CustomFlag2.size()
println a
log.info "Total Number::" +a
assert a</scriptText></con:configuration></con:assertion><con:credentials><con:username>svc_loc_BdubsPortal</con:username><con:password>yOgUy9fbmyaefYaARqK1</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="10"/>
  <con:entry key="strCountry" value="United States"/>
</con:parameters><con:parameterOrder><con:entry>strCountry</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="DriverSuite" id="d2d0ec14-43fb-4d4a-a2c7-d8c19be743c5"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Driver" searchProperties="true" id="c168a026-be4d-4e6d-bec5-00bff4fd63ec"><con:settings/><con:testStep type="groovy" name="DriverGroovyScript" id="8f99aebb-6347-4ed7-be81-ba36955572a6"><con:settings/><con:config><script><![CDATA[	import java.io.*;
	import java.sql.*;
	import java.sql.ResultSet;
	import java.text.*;
	import java.text.DateFormat;
	import java.text.SimpleDateFormat;
	import java.util.*;
	import java.util.Iterator;
	import java.util.Map;
	import java.util.Map.Entry;
	import java.util.Date;
	import java.util.Calendar;
	import java.util.regex.Matcher;
	import java.util.regex.Pattern;
	import java.util.ArrayList;
	import java.util.List;
	import java.util.logging.Logger;
	import javax.xml.parsers.DocumentBuilder;
	import javax.xml.parsers.DocumentBuilderFactory;
	import javax.xml.parsers.ParserConfigurationException;
	import javax.xml.transform.OutputKeys;
	import javax.xml.transform.Transformer;
	import javax.xml.transform.TransformerFactory;
	import javax.xml.transform.dom.DOMSource;
	import javax.xml.transform.stream.StreamResult;
	import javax.xml.xpath.XPath;
	import javax.xml.xpath.XPathConstants;
	import javax.xml.xpath.XPathExpressionException;
	import javax.xml.xpath.XPathFactory;
	import org.xml.sax.SAXException;
	import org.w3c.dom.Document;
	import org.w3c.dom.NodeList;
	import org.w3c.dom.Document;
	import org.w3c.dom.NodeList;
	import org.w3c.dom.Node;
	import org.w3c.dom.Element;
	import org.apache.commons.io.FileUtils;
	import org.apache.poi.hssf.usermodel.HSSFCell;
	import org.apache.poi.hssf.usermodel.HSSFRow;
	import org.apache.poi.hssf.usermodel.HSSFSheet;
	import org.apache.poi.hssf.usermodel.HSSFWorkbook;
	import org.apache.poi.ss.usermodel.DataFormatter;
	import org.apache.poi.ss.usermodel.FormulaEvaluator;
	import org.apache.xmlbeans.*;
	import com.mockrunner.mock.jdbc.MockResultSet;
	
	
	String ParentFolder = null;
	
	String htmlFolder = null;
	
	String resourceFolder = null;
	
	String scenarioFolder = null;
	
	String scenarioXlsPath = null;
	
	String logFolder = null;
	
	String scenarioFolderPath = null;
	
	String TC_All_TestStep = null;
	
	String TC_RS = null;
	
	String TC_Endpoint = null;
	
	def Response_XML = null;
	
	Connection DBConnect = null;
	
	ResultSet DBRecordSet = null;
	
	PreparedStatement preparedStmt = null;
	
	ResultSet statusRecordSet = null;
	
	String machineName = null;
	
	String A = null;
	
	DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
	
	Date date = new Date();
	
	String Execution_Date = dateFormat.format(date);
	
	log.info Execution_Date
	
	
	
	Calendar cal = Calendar.getInstance();
	
	cal.getTime();
	
	SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss a");
	
	String Execution_Time = sdf.format(cal.getTime());
	
	log.info Execution_Time
	
	//Get the TestSuite Name, Environment and ProjectName from Notepad File
	String Project = getSettingsProperty("Project")
	 //String Project = testRunner.testCase.testSuite.project.getPropertyValue("Project")
	log.info Project
	
	String DataConfiguration = getSettingsProperty("DataConfiguration")
	 //String DataConfiguration = testRunner.testCase.testSuite.project.getPropertyValue("DataConfiguration")
	String Suite = getSettingsProperty("Suite")
	 //String Suite = testRunner.testCase.testSuite.project.getPropertyValue("Suite")
	String Environment = getSettingsProperty("Environment")
	 //String Environment = testRunner.testCase.testSuite.project.getPropertyValue("Environment")
	
	
	// Define the instance of test step "Properties".
	
	props = testRunner.testCase.getTestStepByName("In-Properties");
	
	props_Out = testRunner.testCase.getTestStepByName("Out-Properties");
	
	
	
	
	props.setPropertyValue("TestSuiteName", Suite);
	
	
	
	/*Set 0 [Initialize] to Out-Properties*/
	
	props_Out.setPropertyValue("TestCaseNotFound", "0");
	
	props_Out.setPropertyValue("Pass_Complex", "0");
	
	props_Out.setPropertyValue("Pass_Medium", "0");
	
	props_Out.setPropertyValue("Pass_Simple", "0");
	
	props_Out.setPropertyValue("Fail_Complex", "0");
	
	props_Out.setPropertyValue("Fail_Medium", "0");
	
	props_Out.setPropertyValue("Fail_Simple", "0");
	
	
	
	/*Retrieve data from In-Properties*/
	
	String ProjectName = testRunner.testCase.testSuite.project; /*Test Project Name*/
	log.info ProjectName
	String TestSuiteName = props.getPropertyValue("TestSuiteName") /*Test Suite you want to execute*/
	log.info TestSuiteName
	String TestSuiteDescription = testRunner.testCase.testSuite.project.getTestSuiteByName(TestSuiteName).getDescription();
	
	/*PRINT*/
	log.info "EXECUTING TEST SUITE :: " + TestSuiteName;
	
	
	
	
	
	/*Set the environment data in test suite-------------START*/
	
	CommonData_ExcelPath = context.expand('${projectDir}') + "\\Common_Data.xls";
	
	ExcelDataAccess testDataAccess = new ExcelDataAccess(CommonData_ExcelPath);
	
	testDataAccess.setDatasheetName(DataConfiguration);
	
	int rowNum = testDataAccess.getRowNum(Environment, 0, 1);
	
	def TestSuiteOBJ = testRunner.testCase.testSuite.project.getTestSuiteByName(TestSuiteName);
	
	String[] TestSuiteProperty = TestSuiteOBJ.getPropertyNames();
	
	for (String S: TestSuiteProperty)
	
	{
	 TestSuiteOBJ.setPropertyValue(S, testDataAccess.getValue(rowNum, S));
	
	 if (S.equalsIgnoreCase("endpoint")) {
	
	  TC_Endpoint = testDataAccess.getValue(rowNum, S);
	
	  log.info "End point : " + TC_Endpoint;
	
	 }
	}
	log.info("------------------------");
	
	/*Set the environment data in test suite-------------END*/
	
	
	
	/*Create Appropriate FolderStructure*/
	
	CreateFolderStructure CreateFolderOBJ = new CreateFolderStructure();
	
	String strJiraUpload = getSettingsProperty("JiraUpload");
	//String strJiraUpload = testRunner.testCase.testSuite.project.getPropertyValue("JiraUpload")
	
	String strJiraRelease = getSettingsProperty("JiraRelease");
	//String strJiraRelease = testRunner.testCase.testSuite.project.getPropertyValue("JiraRelease")
	
	String strResulFolderName = null;
	
	if ("true".equalsIgnoreCase(strJiraUpload)) {
	
	 strResulFolderName = "Results_JIRA";
	
	} else {
	
	 strResulFolderName = "Results";
	
	}
	//String runInServer = testRunner.testCase.testSuite.project.getPropertyValue("RunInServer")
	String runInServer = getSettingsProperty("RunInServer");
	String projectReportPath = null;
	if ("Y".equalsIgnoreCase(runInServer)) {
	 //projectReportPath = testRunner.testCase.testSuite.project.getPropertyValue("ReportingServerPath")
	 projectReportPath = getSettingsProperty("ReportingServerPath");
	 log.info "ReportingServerPath " + projectReportPath
	  //projectReportPath = getXMlNodevalue("ReportingServerPath");
	
	} else {
	 projectReportPath = context.expand('${projectDir}');
	}
	
	folderObj = new File(projectReportPath + "\\" + strResulFolderName);
	
	if (!folderObj.isDirectory()) {
	 folderObj.mkdirs();
	}
	
	String strfilePath = projectReportPath + "\\" + strResulFolderName;
	
	new File(strfilePath + "\\" + Project);
	
	if (!folderObj.isDirectory()) {
	 folderObj.mkdirs();
	}
	
	strfilePath = strfilePath + "\\" + Project;
	
	if ("true".equalsIgnoreCase(strJiraUpload)) {
	
	 new File(strfilePath + "\\" + strJiraRelease);
	
	 if (!folderObj.isDirectory()) {
	  folderObj.mkdirs();
	 }
	
	 strfilePath = strfilePath + "\\" + strJiraRelease;
	}
	
	new File(strfilePath + "\\" + Environment);
	
	if (!folderObj.isDirectory()) {
	 folderObj.mkdirs();
	}
	
	strfilePath = strfilePath + "\\" + Environment;
	
	if (new File(strfilePath + "\\" + TestSuiteName).exists())
	
	{
	
	 log.info "Existing"
	
	 strfilePath = strfilePath + "\\" + TestSuiteName;
	
	 reportFolder = CreateFolderOBJ.createResultsFolder(strfilePath);
	
	 log.info reportFolder
	
	 logFolder = reportFolder
	
	 strfilePath = reportFolder;
	
	 scenarioFolder = CreateFolderOBJ.createSuiteFolder(strfilePath, "Dataset");
	
	 log.info scenarioFolder
	
	 ParentFolder = CreateFolderOBJ.createParentFolder(strfilePath);
	
	 resourceFolder = CreateFolderOBJ.createSuiteFolder(strfilePath, "XSLTTemplate_Logo");
	
	 log.info resourceFolder
	}
	
	else
	
	{
	
	 log.info "New"
	
	 String SuiteFolder = CreateFolderOBJ.createSuiteFolder(strfilePath, TestSuiteName);
	
	 strfilePath = strfilePath + "\\" + TestSuiteName;
	
	 reportFolder = CreateFolderOBJ.createResultsFolder(strfilePath);
	
	 log.info reportFolder
	
	 logFolder = reportFolder
	
	 strfilePath = reportFolder;
	
	 scenarioFolder = CreateFolderOBJ.createSuiteFolder(strfilePath, "Dataset");
	
	 log.info scenarioFolder
	
	 ParentFolder = CreateFolderOBJ.createParentFolder(strfilePath);
	
	 resourceFolder = CreateFolderOBJ.createSuiteFolder(strfilePath, "XSLTTemplate_Logo");
	
	 log.info resourceFolder
	}
	
	
	
	/*PRINT*/
	log.info "EXECUTION REPORT WILL GENERATE IN :: " + strfilePath;
	
	
	
	// Define the Run Manager Excel Sheet Path.
	
	ExcelPath = context.expand('${projectDir}') + "\\Run_Manager.xls";
	
	/*PRINT*/
	log.info "TEST DATA SOURCE ::" + ExcelPath;
	
	ExcelDataAccess runtestDataAccess = new ExcelDataAccess(ExcelPath);
	
	runtestDataAccess.setDatasheetName(TestSuiteName);
	
	if (runtestDataAccess.fileExist())
	
	{
	
	 /*Retrieving Executable Test Case Lists*/
	
	 ResultSet RS = runtestDataAccess.getRunManagerExcelData();
	
	 if (!RS.equals(null))
	
	 {
	
	  /*****************************Keeping Data in TestSuiteBean for Reporting Purpose***********************************/
	
	  TestSuiteBean TestSuiteBeanOBJ = new TestSuiteBean(); // CREATING TEST SUITE BEAN OBJECT
	
	  TestSuiteBeanOBJ.setTestSuiteName(TestSuiteName); // SET TEST SUITE NAME
	
	  TestSuiteBeanOBJ.setTestSuiteDescription(TestSuiteDescription); // SET TEST SUITE DESCRIPTION
	
	  TestSuiteBeanOBJ.setExecutionStartTime(Calendar.getInstance().format("HH-mm-ss"));
	
	  log.info TestSuiteBeanOBJ.getExecutionStartTime();
	
	  ArrayList < DataSet_TestCaseBean > TCLists_DataSet_TestCaseBean = new ArrayList < DataSet_TestCaseBean > (); //CREATED THE Test Case Lists ArrayLists
	
	  /************************************************CONT****************************************************************/
	
	  /*Set the Result Set Value to TCLists ArrayList*/
	
	  ArrayList < ExecutableTestCaseBean > TCLists = runtestDataAccess.executableTCLists(RS);
	
	  //            log.info TCLists;
	
	
	
	  //ITERATE THROUGH THE TEST CASES
	
	  boolean TestCaseStatusFlag = true; /*true --> Pass and false--> Fail*/
	
	  for (ExecutableTestCaseBean ExecutableTestCaseBeanOBJ: TCLists)
	
	  {
	
	   /*****************************Keeping Data in DataSet_TestCaseBean for Reporting Purpose***********************************/
	
	   DataSet_TestCaseBean DataSet_TestCaseBeanOBJ = new DataSet_TestCaseBean(); // CREATING DataSet_TestCaseBean OBJECT
	
	   DataSet_TestCaseBeanOBJ.setTestCaseName(ExecutableTestCaseBeanOBJ.getTCName());
	
	   DataSet_TestCaseBeanOBJ.setModule(ExecutableTestCaseBeanOBJ.getModule());
	
	   //DataSet_TestCaseBeanOBJ.setServiceCall(ExecutableTestCaseBeanOBJ.getWebServiceTriggered());
	
	   DataSet_TestCaseBeanOBJ.setTestCaseType(ExecutableTestCaseBeanOBJ.getTestCaseType());
	
	   Map < String, TestCaseBean > DataSet_TestCaseBean_Map = new HashMap < String, TestCaseBean > ();
	
	   /***************************************************************************************************************************/
	
	   /*PRINT*/
	   log.info "Executing Test Case :: " + ExecutableTestCaseBeanOBJ.getTCName();
	
	   boolean flag = CreateFolderOBJ.createTCFolder(ExecutableTestCaseBeanOBJ.getTCName(), strfilePath);
	
	   //                            log.info "Appropriate Folder Created or not??--> "+flag; 
	
	   scenarioXlsPath = context.expand('${projectDir}') + "\\Scenarios\\" + ExecutableTestCaseBeanOBJ.getTCName() + ".xls";
	
	   log.info "Scenario Path: " + scenarioXlsPath
	
	   scenarioFolderPath = scenarioFolder + "\\" + ExecutableTestCaseBeanOBJ.getTCName() + ".xls";
	
	   log.info "Scenario Folder: " + scenarioFolderPath
	
	   String ImagePath = context.expand('${projectDir}') + "\\Miscellaneous\\XSLTTemplate_Logo\\logo.jpg";
	
	   log.info "Image Path: " + ImagePath
	
	   String ResourcePath = resourceFolder + "\\logo.jpg";
	
	   log.info ResourcePath
	
	   ReportingClass copyOBJ = new ReportingClass();
	
	   copyOBJ.copyFile(new File(scenarioXlsPath), new File(scenarioFolderPath));
	
	   copyOBJ.copyFile(new File(ImagePath), new File(ResourcePath));
	
	   TestCaseStatusFlag = true;
	
	   //GET THE TEST CASE OBJECT, TEST STEP COUNT AND TEST STEP LISTS || Start
	
	   def TCOBJ = testRunner.testCase.testSuite.project.getTestSuiteByName(TestSuiteName).getTestCaseByName(ExecutableTestCaseBeanOBJ.getTCName());
	
	   log.info "Suite Name is: " + TestSuiteName
	
	   log.info "Case Name is: " + ExecutableTestCaseBeanOBJ.getTCName()
	
	   ArrayList < String > TestStepLists = new ArrayList < String > (); //creating TestStepLists ARRAYLISTS to keep TEST STRP Name
	
	   if ((!TCOBJ.equals(null)))
	
	   {
	
	    def stepcount = TCOBJ.getTestStepCount();
	
	    for (int i = 0; i < stepcount; i++)
	
	    {
	
	     if ((((TCOBJ.getTestStepAt(i)).getName()).contains("Step")) || (((TCOBJ.getTestStepAt(i)).getName()).contains("Precondition"))) //|| (((TCOBJ.getTestStepAt(i)).getName()).contains("PropertyTransfer"))
	
	     {
	
	      TestStepLists.add((TCOBJ.getTestStepAt(i)).getName());
	
	     }
	
	    }
	
	   } else
	
	    TestCaseStatusFlag = false;
	
	   TC_All_TestStep = strfilePath + "\\RQ-RS" + "\\" + ExecutableTestCaseBeanOBJ.getTCName() + ".txt";
	
	   log.info TC_All_TestStep;
	
	   FOS = new FileOutputStream(TC_All_TestStep, false)
	
	   PW = new PrintWriter(FOS);
	
	   strXMLOutput = "<TestCase TestCaseName='" + ExecutableTestCaseBeanOBJ.getTCName() + "'>";
	
	   //TO CREATE TC wise big xml  -- CONT
	
	   for (String DS: ExecutableTestCaseBeanOBJ.getDataSet())
	
	   {
	
	    /****************************Keeping Data in TestCaseBean for Reporting Purpose************************************************/
	
	    TestCaseBean TestCaseBeanobj = new TestCaseBean(); //CREATING TestCaseBean OBJECT
	
	    ArrayList < TestStepBean > TestStepListsOBJ = new ArrayList < TestStepBean > ();
	
	    /******************************************************************************************************************************/
	
	    boolean TestStepStatusFlag = true;
	
	    log.info "Current Data Set : " + DS
	
	    // datasheet_con= ExcelOpr.getExcelConnection(context.expand('${projectDir}')+"\\Scenarios\\"+ExecutableTestCaseBeanOBJ.getTCName()+".xlsx" );
	
	    ExcelDataAccess scenariotestDataAccess = new ExcelDataAccess(scenarioFolderPath);
	
	    scenariotestDataAccess.setDatasheetName("Req_Parameter");
	
	    ResultSet objRecordSet = scenariotestDataAccess.getScenarioExcelData(DS);
	
	    scenariotestDataAccess.setDatasheetName("Res_Assertion");
	
	    ResultSet objRecordSet_assertion = scenariotestDataAccess.getScenarioExcelData(DS);
	
	    strXMLOutput = strXMLOutput + "<DataSet DataSetName='" + DS + "'>"; //TO CREATE TC wise big xml with all Test Data -- CONT
	
	    String[] PropertyNames = null;
	
	    String[] AssertionPropertyNames = null;
	
	    if ((!TCOBJ.equals(null)))
	
	    {
	
	     InPropertiesOBJ = TCOBJ.getTestStepByName("In-Properties")
	
	     PropertyNames = InPropertiesOBJ.getPropertyNames(); /*Listing the properties under In-Properties*/
	
	     AssertionPropertiesOBJ = TCOBJ.getTestStepByName("Assertion")
	
	     AssertionPropertyNames = AssertionPropertiesOBJ.getPropertyNames(); /*Listing the properties under Assertion*/
	
	    }
	
	    while (objRecordSet.next())
	
	    {
	
	     /*********************************Set the Test Case Description***************************************/
	
	     DataSet_TestCaseBeanOBJ.setTestCaseDescription((objRecordSet.getString("TestCaseDescription")).toString());
	
	     /*****************************************************************************************************/
	
	     for (int i = 0; i < PropertyNames.length; i++)
	
	     {
	
	      String Temp = (objRecordSet.getString(PropertyNames[i])).toString()
	
	      log.info "Vaue of Temp: " + Temp
	
	      log.info "Value of Properties: " + PropertyNames[i]
	
	      if (!Temp.equals("<BLANK>"))
	
	      {
	
	       if (!Temp.contains("#"))
	
	       {
	
	        InPropertiesOBJ.setPropertyValue(PropertyNames[i], Temp);
	
	       } else
	
	       {
	
	        String[] Tempvalue = Temp.split("\\#")
	
	        log.info "Tempvalue: " + Tempvalue[1]
	
	        int rowNum1 = testDataAccess.getRowNum(Tempvalue[1], 0, 1);
	
	        String InputData = testDataAccess.getValue(rowNum1, PropertyNames[i])
	
	        log.info "Data is: " + InputData
	
	        InPropertiesOBJ.setPropertyValue(PropertyNames[i], InputData);
	
	       }
	
	      } else {
	       InPropertiesOBJ.setPropertyValue(PropertyNames[i], "");
	      }
	
	     } //End of for loop --> Set all data in In-Properties
	
	    } //End of While   
	
	    while (objRecordSet_assertion.next())
	
	    {
	
	     for (int j = 0; j < AssertionPropertyNames.length; j++)
	
	     {
	
	      log.info AssertionPropertyNames[j].toString()
	
	      String Temp_obj = (objRecordSet_assertion.getString(AssertionPropertyNames[j])).toString()
	
	      log.info "Vaue of Temp_obj: " + Temp_obj
	
	      if (!Temp_obj.equals("<BLANK>"))
	
	      {
	
	       if (!Temp_obj.contains("#"))
	
	       {
	
	        AssertionPropertiesOBJ.setPropertyValue(AssertionPropertyNames[j], Temp_obj);
	
	       } else
	
	       {
	
	        String[] Temp_objvalue = Temp_obj.split("\\#")
	
	        log.info "Temp_obj: " + Temp_objvalue[1]
	
	        int rowNum2 = testDataAccess.getRowNum(Temp_objvalue[1], 0, 1);
	
	        String InputData1 = testDataAccess.getValue(rowNum2, AssertionPropertyNames[j])
	
	        log.info "Data1 is: " + InputData1
	
	        AssertionPropertiesOBJ.setPropertyValue(AssertionPropertyNames[j], InputData1);
	
	       }
	
	      } else
	
	       AssertionPropertiesOBJ.setPropertyValue(AssertionPropertyNames[j], "");
	
	     } //End of for loop --> Set all Assertion in Assertion Step
	
	    } //End of While 
	
	
	    /*RUN THE TEST CASE*/
	
	    def properties = new com.eviware.soapui.support.types.StringToObjectMap()
	
	    def async = false
	
	    if ((!TCOBJ.equals(null)))
	
	     TCOBJ.run(properties, async)
	
	    Thread.sleep(5000)
	
	    /*Iterate through the test steps of that test case to save RQ-RS*/
	
	    if ((!TCOBJ.equals(null)))
	
	    {
	
	     for (String Step: TestStepLists)
	
	     {
	
	      /*Save Step wise Request and Response ----- Start*/
	
	      String TC_RQ = strfilePath + "\\" + ExecutableTestCaseBeanOBJ.getTCName() + "\\RQ-RS\\" + Step + "-" + DS + "-RQ.txt";
	
	      TC_RS = strfilePath + "\\" + ExecutableTestCaseBeanOBJ.getTCName() + "\\RQ-RS\\" + Step + "-" + DS + "-RS.txt";
	
	      fos = new FileOutputStream(TC_RQ, false)
	
	      def TestStepOBJ = TCOBJ.getTestStepByName(Step);
	
	      def Request_XML = TestStepOBJ.getPropertyValue("RawRequest");
	
	      if (Request_XML == null)
	
	      {
	
	       fos.close();
	
	      } else
	
	      {
	
	       pw = new PrintWriter(fos);
	
	       "<!-- Request -->".value.println(pw);
	
	       Request_XML.value.println(pw);
	
	       pw.close();
	
	       fos.close();
	
	      }
	
	      fos = new FileOutputStream(TC_RS, false)
	
	      Response_XML = TestStepOBJ.getPropertyValue("Response");
	
	      if (Response_XML == null)
	
	      {
	
	       fos.close();
	
	      } else
	
	      {
	
	       pw = new PrintWriter(fos);
	
	       "<!-- Response -->".value.println(pw);
	
	       Response_XML.value.println(pw);
	
	       pw.close();
	
	       fos.close();
	
	      }
	
	      /*Save Step wise Request and Response ---- END*/
	
	      /*TO CREATE TC wise big xml with all Test Data ---- CONT*/
	
	
	      if (Request_XML == null && Response_XML == null)
	
	      {
	
	       strXMLOutput = strXMLOutput + "<TestStep TestStepName='" + Step + "'>";
	
	       strXMLOutput = strXMLOutput + "<RequestXML>" + "No Request" + "</RequestXML>"
	
	       strXMLOutput = strXMLOutput + "<ResponseXML>" + "No Response" + "</ResponseXML>"
	
	       strXMLOutput = strXMLOutput + "</TestStep>"
	
	      } else if (Request_XML == null && Response_XML != null)
	
	      {
	
	       strXMLOutput = strXMLOutput + "<TestStep TestStepName='" + Step + "'>";
	
	       strXMLOutput = strXMLOutput + "<RequestXML>" + "No Request" + "</RequestXML>"
	
	       strXMLOutput = strXMLOutput + "<ResponseXML>" + Response_XML.value + "</ResponseXML>"
	
	       strXMLOutput = strXMLOutput + "</TestStep>"
	
	      } else if (Request_XML != null && Response_XML == null)
	
	      {
	
	       strXMLOutput = strXMLOutput + "<TestStep TestStepName='" + Step + "'>";
	
	       strXMLOutput = strXMLOutput + "<RequestXML>" + Request_XML.value + "</RequestXML>"
	
	       strXMLOutput = strXMLOutput + "<ResponseXML>" + "No Response" + "</ResponseXML>"
	
	       strXMLOutput = strXMLOutput + "</TestStep>"
	
	      } else
	
	      {
	
	       strXMLOutput = strXMLOutput + "<TestStep TestStepName='" + Step + "'>";
	
	       strXMLOutput = strXMLOutput + "<RequestXML>" + Request_XML.value + "</RequestXML>"
	
	       strXMLOutput = strXMLOutput + "<ResponseXML>" + Response_XML.value + "</ResponseXML>"
	
	       strXMLOutput = strXMLOutput + "</TestStep>"
	
	      }
	
	      /*TO CREATE TC wise big xml with all Test Data ---- CONT*/
	
	      /************************************************************************************************************/
	
	      TestStepBean TestStepBeanOBJ = new TestStepBean();
	
	      TestStepBeanOBJ.setTestStepName(Step);
	
	      TestStepBeanOBJ.setRQXML_Path("./RQ-RS/" + Step + "-" + DS + "-RQ.txt");
	
	      TestStepBeanOBJ.setRSXML_Path("./RQ-RS/" + Step + "-" + DS + "-RS.txt");
	
	      ArrayList < String > TestStepAssertionLists = new ArrayList < String > ();
	
	      /************************************************************************************************************/
	
	      /*Check the Assertions START*/
	
	      def assertions = TestStepOBJ.getAssertionList();
	
	      boolean TSExecutedORNOT = false;
	
	      for (Object a: assertions)
	
	      {
	       A = "<Assertion><AssertionName>" + a.name + "</AssertionName><AssertionStatus>" + a.status + "</AssertionStatus></Assertion>";
	       //                                	if(a.name.contains("HTTP"))
	       //                                	{
	       //                                		 A="<Assertion><AssertionName>" + a.name + "</AssertionName><AssertionStatus>" + a.status + "</AssertionStatus><AssertionCode>" + a.codes + "</AssertionCode><AssertionContent>" + a.codes + "</AssertionContent><AssertionXPath>" + " " + "</AssertionXPath></Assertion>";
	       //                                	}
	       //                                	else
	       //                                	{
	       //                                		 A="<Assertion><AssertionName>" + a.name + "</AssertionName><AssertionStatus>" + a.status + "</AssertionStatus><AssertionCode>" + " " + "</AssertionCode><AssertionContent>" + a.expectedContent + "</AssertionContent><AssertionXPath>" + a.path + "</AssertionXPath></Assertion>";
	       //                                	}
	
	
	
	       //for( e in a.errors )	
	
	       //log.info "-> Error [" + e.message + "]"
	
	       // A=A+"<Assertion><AssertionErrorName>" + "-> Error [" + e.message + "]" + "</AssertionErrorName></Assertion>";
	
	       //                                            log.info A;
	
	       /************************************************************************************************************/
	
	       TestStepAssertionLists.add(A);
	
	       /************************************************************************************************************/
	
	       //                                            log.info "---->"+((a.status).toString()).equals("VALID")+a.status
	
	       if ((((a.status).toString()).equals("FAILED")) || (((a.status).toString()).equals("VALID")) || ((a.status).toString()).equals("UNKNOWN"))
	
	
	
	        TSExecutedORNOT = true;
	
	
	
	
	
	       if (((a.status).toString()).equals("FAILED") || ((a.status).toString()).equals("UNKNOWN"))
	
	       {
	
	        TestStepStatusFlag = false;
	
	        TestCaseStatusFlag = false;
	
	       } else
	
	       {
	
	        TestStepStatusFlag = true;
	
	       }
	
	      } /*Check the Assertions END*/
	
	      /************************************************************************************************************/
	
	      TestStepBeanOBJ.setTestStepAssertions(TestStepAssertionLists);
	
	      if (!(TestStepOBJ.testRequest.response.equals(null)))
	
	       TestStepBeanOBJ.setExecutionTime(TestStepOBJ.testRequest.response.timeTaken + " MS");
	
	      else
	
	       TestStepBeanOBJ.setExecutionTime("Not Applicable");
	
	      //                            log.info "Response Time:: "+TestStepOBJ.testRequest.response.timeTaken;
	
	
	
	      if (TSExecutedORNOT)
	
	      {
	
	       if (TestStepStatusFlag)
	
	        TestStepBeanOBJ.setTestStepStatus("PASSED");
	
	       else
	
	        TestStepBeanOBJ.setTestStepStatus("FAILED");
	
	
	
	      } else
	
	       TestStepBeanOBJ.setTestStepStatus("NO RUN");
	
	
	
	      TestStepListsOBJ.add(TestStepBeanOBJ);
	
	      //                                            log.info (TestStepBeanOBJ);
	
	      /************************************************************************************************************/
	
	     } /*End of Step wise Test case Iteration*/
	
	    }
	
	    strXMLOutput = strXMLOutput + "</DataSet>" /*To Save the full Test Case xml ---- CONT */
	
	    /************************************************************************************************************/
	
	    TestCaseBeanobj.setTestStepLists(TestStepListsOBJ);
	
	    //            log.info DS;
	
	    //            log.info TestCaseBeanobj
	
	    DataSet_TestCaseBean_Map.put(DS, TestCaseBeanobj);
	
	    Thread.sleep(2000)
	
	    //     log.info DataSet_TestCaseBean_Map
	
	    /************************************************************************************************************/
	
	   } /*End of for loop DataSet wise Test Case iteration*/
	
	
	   /************************************************************************************************************/
	
	   DataSet_TestCaseBeanOBJ.setDataSet_TestCaseBean_Map(DataSet_TestCaseBean_Map);
	
	   if (TestCaseStatusFlag)
	
	   {
	
	    DataSet_TestCaseBeanOBJ.setTestCaseStatus("PASSED");
	
	    if ((ExecutableTestCaseBeanOBJ.getTestCaseType()).equals("Simple"))
	
	    {
	
	     props_Out.setPropertyValue("Pass_Simple", ((props_Out.getPropertyValue("Pass_Simple")).toInteger() + 1).toString());
	
	    } else if ((ExecutableTestCaseBeanOBJ.getTestCaseType()).equals("Medium"))
	
	    {
	
	     props_Out.setPropertyValue("Pass_Medium", ((props_Out.getPropertyValue("Pass_Medium")).toInteger() + 1).toString());
	
	    } else if ((ExecutableTestCaseBeanOBJ.getTestCaseType()).equals("Complex"))
	
	    {
	
	     props_Out.setPropertyValue("Pass_Complex", ((props_Out.getPropertyValue("Pass_Complex")).toInteger() + 1).toString());
	
	    }
	
	   } else
	
	   {
	
	    DataSet_TestCaseBeanOBJ.setTestCaseStatus("FAILED");
	
	    if ((ExecutableTestCaseBeanOBJ.getTestCaseType()).equals("Simple"))
	
	    {
	
	     props_Out.setPropertyValue("Fail_Simple", ((props_Out.getPropertyValue("Fail_Simple")).toInteger() + 1).toString());
	
	    } else if ((ExecutableTestCaseBeanOBJ.getTestCaseType()).equals("Medium"))
	
	    {
	
	     props_Out.setPropertyValue("Fail_Medium", ((props_Out.getPropertyValue("Fail_Medium")).toInteger() + 1).toString());
	
	    } else if ((ExecutableTestCaseBeanOBJ.getTestCaseType()).equals("Complex"))
	
	    {
	
	     props_Out.setPropertyValue("Fail_Complex", ((props_Out.getPropertyValue("Fail_Complex")).toInteger() + 1).toString());
	
	    }
	
	   }
	
	
	
	   TCLists_DataSet_TestCaseBean.add(DataSet_TestCaseBeanOBJ);
	
	   //            log.info DataSet_TestCaseBeanOBJ;
	
	   /********************************************************/
	
	   strXMLOutput = strXMLOutput + "</TestCase>" /*To Save the full Test Case xml*/
	
	   strXMLOutput.println(PW);
	
	   PW.close();
	
	   FOS.close();
	
	  } /*End of for loop Test Case wise iteration*/
	
	
	  TestSuiteBeanOBJ.setTestCaseLists(TCLists_DataSet_TestCaseBean);
	
	  TestSuiteBeanOBJ.setPass_Complex(props_Out.getPropertyValue("Pass_Complex").toInteger());
	
	  TestSuiteBeanOBJ.setPass_Medium(props_Out.getPropertyValue("Pass_Medium").toInteger());
	
	  TestSuiteBeanOBJ.setPass_Simple(props_Out.getPropertyValue("Pass_Simple").toInteger());
	
	
	
	  TestSuiteBeanOBJ.setFail_Complex(props_Out.getPropertyValue("Fail_Complex").toInteger());
	
	  TestSuiteBeanOBJ.setFail_Medium(props_Out.getPropertyValue("Fail_Medium").toInteger());
	
	  TestSuiteBeanOBJ.setFail_Simple(props_Out.getPropertyValue("Fail_Simple").toInteger());
	
	  TestSuiteBeanOBJ.setExecutionEndTime(Calendar.getInstance().format("HH-mm-ss"));
	
	  log.info TestSuiteBeanOBJ.getExecutionEndTime();
	
	  log.info TestSuiteBeanOBJ;
	
	
	
	  ReportingClass ReportingClassOBJ = new ReportingClass();
	
	  String ReportPath = strfilePath;
	
	  String XSLTSource = context.expand('${projectDir}') + "\\Miscellaneous\\XSLTTemplate_Logo\\"
	
	  log.info ReportPath;
	
	  log.info XSLTSource;
	
	  String projectPath = context.expand('${projectDir}');
	
	  log.info "projectPath " + projectPath
	
	  log.info "suitetestname " + TestSuiteName
	
	  log.info "ReportPath " + ReportPath + "\\Summary.html"
	
	  ReportingClassOBJ.masterMethod(projectPath, ReportPath, TestSuiteBeanOBJ, XSLTSource, Project, Execution_Date, Execution_Time, TestSuiteName, Environment, TC_Endpoint);
	
	 } /*End of if RS null checking*/
	
	} /*end of if - connection checking*/
	else
	
	{
	
	 log.info "NO ACTIVE CONNECTION AVIALABLE"
	
	 log.info "Please check the Excel Path and format...."
	
	 testRunner.cancel("Please check the Excel Path and format...." + ExcelPath);
	
	}
	
	/*JAVA CLASSES*/
	
	/*********************************************************************************/
	
	/*********************************************************************************/
	
	public String getConfig(String Key) {
	 String Value = null;
	 DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	 DocumentBuilder builder = factory.newDocumentBuilder();
	 Document document = builder.parse("Y:\\Groups\\Web_Next_Gen\\AUTOMATION\\PUBLIC\\AUTOMATIC_FRAMEWORK_EXECUTION\\DBSettings.xml");
	 document.getDocumentElement().normalize();
	 // log.info "Root element :" + document.getDocumentElement().getNodeName()
	 NodeList nList = document.getElementsByTagName("Variable");
	 for (int temp = 0; temp < nList.getLength(); temp++) {
	  Node nNode = nList.item(temp);
	  //log.info nNode.getNodeName()
	  if (nNode.getNodeType() == Node.ELEMENT_NODE) {
	   Element eElement = (Element) nNode;
	
	   //log.info eElement.getElementsByTagName("Name").item(0).getTextContent()
	   if (eElement.getElementsByTagName("Name").item(0).getTextContent() == Key) {
	    Value = eElement.getElementsByTagName("Value").item(0).getTextContent()
	    log.info eElement.getElementsByTagName("Value").item(0).getTextContent()
	   }
	  }
	
	 }
	 return Value;
	}
	
	public String getXMlNodevalue(String node)
	
	{
	
	 String globalFile = context.expand('${projectDir}') + "\\GlobalSettings.xml"
	
	 String nodevalue = null;
	
	
	
	 try {
	
	  // Setup the parser
	
	  DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
	
	  DocumentBuilder builder = builderFactory.newDocumentBuilder();
	
	
	
	  // Read the XML file
	
	  File inputFile = new File(globalFile);
	
	  InputStream inputStream = new FileInputStream(inputFile);
	
	
	
	  // Parse the XML file   
	
	  Document doc = builder.parse(inputStream);
	
	
	
	  // Create an XPath instance
	
	  XPath xPath = XPathFactory.newInstance().newXPath();
	
	
	
	  // Evaluate simple expressions
	
	  String expression = "//Variable/" + node;
	
	  nodevalue = xPath.evaluate(expression, doc);
	
	  log.info "<<< Using XPath to read node values >>>"
	
	  log.info nodevalue
	
	  return nodevalue;
	
	 } catch (FileNotFoundException e) {
	
	  e.printStackTrace();
	
	 } catch (XPathExpressionException e) {
	
	  e.printStackTrace();
	
	 } catch (SAXException e) {
	
	  e.printStackTrace();
	
	 } catch (IOException e) {
	
	  e.printStackTrace();
	
	 } catch (ParserConfigurationException e) {
	
	  e.printStackTrace();
	
	 }
	
	}
	
	public String getSettingsProperty(String propKey) {
	 Properties properties = new Properties();
	 String strValue = "";
	
	 try {
	  properties.load(new FileInputStream(context.expand('${projectDir}') + "\\Global Settings.properties"));
	
	  strValue = properties.getProperty(propKey);
	 } catch (FileNotFoundException e) {
	  e.printStackTrace();
	 } catch (IOException e) {
	  e.printStackTrace();
	 }
	 return strValue;
	}
	
	public Connection getMySQlConnection() {
	
	 String DBServer = getConfig("DBServer")
	
	 log.info "DB: " + DBServer
	
	 String Port = getConfig("Port")
	
	 log.info "Port: " + Port
	
	 String Database = getConfig("Database")
	
	 log.info "Database: " + Database
	
	 String User = getConfig("User")
	
	 log.info "User: " + User
	
	 String Password = getConfig("Password")
	
	 log.info "Password: " + Password
	
	
	 Connection connMySQL = null;
	 try {
	  connMySQL = DriverManager.getConnection("jdbc:odbc:Driver={MySQL ODBC 5.2 UNICODE Driver};Server=" + DBServer + ";Port:" + Port + ";Database=" + Database + ";User=" + User + ";Password=" + Password + ";Option=3;");
	 } catch (Exception ex) {
	  log.info ex
	
	 }
	
	}
	
	public ResultSet getMySQLData(Connection con, String SQLQRY) {
	 ResultSet RS = null;
	 try {
	  Statement stmnt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
	
	  RS = stmnt.executeQuery(SQLQRY);
	 } catch (Exception E) {
	
	  log.info E.getMessage()
	
	  E.printStackTrace();
	
	 }
	
	 return RS;
	
	}
	
	public String MachineName()
	
	{
	 String hostname = null;
	
	 try {
	
	  InetAddress addr = InetAddress.getLocalHost();
	
	  byte[] ipAddr = addr.getAddress();
	
	  hostname = addr.getHostName();
	
	 } catch (UnknownHostException e) {
	
	  log.info e.getMessage()
	
	  e.printStackTrace();
	 }
	 return hostname;
	}
	
	/*********************************************************************************/
	
	/**
	 * Class to encapsulate the excel data access layer of the framework
	 * @author Cognizant
	 */
	public class ExcelDataAccess {
	 private final String filePath;
	
	 private String datasheetName;
	 /**
	  * Function to get the Excel sheet name
	  * @return The Excel sheet name
	  */
	 public String getDatasheetName() {
	   return datasheetName;
	  }
	  /**
	   * Function to set the Excel sheet name
	   * @param datasheetName The Excel sheet name
	   */
	 public void setDatasheetName(String datasheetName) {
	  this.datasheetName = datasheetName;
	 }
	
	
	 /**
	  * Constructor to initialize the excel data filepath and filename
	  * @param filePath The absolute path where the excel data file is stored
	  * @param fileName The name of the excel data file (without the extension).
	  * Note that .xlsx files are not supported, only .xls files are supported
	  */
	 public ExcelDataAccess(String filePath) {
	  this.filePath = filePath;
	 }
	
	 private void checkPreRequisites() {
	  if (datasheetName == null) {
	   System.out.println("ExcelDataAccess.datasheetName is not set!");
	  }
	 }
	
	 public boolean fileExist() throws IOException {
	  boolean flag = true;
	  String absoluteFilePath = filePath;
	  FileInputStream fileInputStream = null;
	  try {
	   fileInputStream = new FileInputStream(absoluteFilePath);
	
	   fileInputStream.close();
	  } catch (FileNotFoundException e) {
	   e.printStackTrace();
	   System.out.println("The specified file \"" + absoluteFilePath + "\" does not exist!");
	   flag = false;
	  }
	  return flag;
	 }
	 private HSSFWorkbook openFileForReading() {
	  String absoluteFilePath = filePath;
	
	  FileInputStream fileInputStream = null;
	  try {
	   fileInputStream = new FileInputStream(absoluteFilePath);
	  } catch (FileNotFoundException e) {
	   e.printStackTrace();
	   System.out.println("The specified file \"" + absoluteFilePath + "\" does not exist!");
	  }
	
	  HSSFWorkbook workbook = null;
	  try {
	   workbook = new HSSFWorkbook(fileInputStream);
	   //fileInputStream.close();
	  } catch (IOException e) {
	   e.printStackTrace();
	   System.out.println("Error while opening the specified Excel workbook \"" + absoluteFilePath + "\"");
	  }
	
	  return workbook;
	 }
	
	
	 private HSSFSheet getWorkSheet(HSSFWorkbook workbook) {
	  HSSFSheet worksheet = workbook.getSheet(datasheetName);
	  if (worksheet == null) {
	   System.out.println("The specified sheet \"" + datasheetName + "\"" +
	    "does not exist within the workbook");
	  }
	
	  return worksheet;
	 }
	
	 /**
	  * Function to search for a specified key within a column, and return the corresponding row number
	  * @param key The value being searched for
	  * @param columnNum The column number in which the key should be searched
	  * @param startRowNum The row number from which the search should start
	  * @return The row number in which the specified key is found (-1 if the key is not found)
	  */
	 public int getRowNum(String key, int columnNum, int startRowNum) {
	  checkPreRequisites();
	
	  HSSFWorkbook workbook = openFileForReading();
	  HSSFSheet worksheet = getWorkSheet(workbook);
	  FormulaEvaluator formulaEvaluator =
	   workbook.getCreationHelper().createFormulaEvaluator();
	
	  String currentValue;
	  for (int currentRowNum = startRowNum; currentRowNum <= worksheet.getLastRowNum(); currentRowNum++) {
	
	   HSSFRow row = worksheet.getRow(currentRowNum);
	   HSSFCell cell = row.getCell(columnNum);
	   currentValue = getCellValueAsString(cell, formulaEvaluator);
	
	   if (currentValue.equals(key)) {
	    return currentRowNum;
	   }
	  }
	
	  return -1;
	 }
	
	 private String getCellValueAsString(HSSFCell cell, FormulaEvaluator formulaEvaluator) {
	  if (cell == null || cell.getCellType() == HSSFCell.CELL_TYPE_BLANK) {
	   return "";
	  } else {
	   if (formulaEvaluator.evaluate(cell).getCellType() == HSSFCell.CELL_TYPE_ERROR) {
	    System.out.println("Error in formula within this cell! " +
	     "Error code: " + cell.getErrorCellValue());
	   }
	
	   DataFormatter dataFormatter = new DataFormatter();
	   return dataFormatter.formatCellValue(formulaEvaluator.evaluateInCell(cell));
	  }
	 }
	
	 /**
	  * Function to search for a specified key within a column, and return the corresponding row number
	  * @param key The value being searched for
	  * @param columnNum The column number in which the key should be searched
	  * @return The row number in which the specified key is found (-1 if the key is not found)
	  */
	 public int getRowNum(String key, int columnNum) {
	  return getRowNum(key, columnNum, 0);
	 }
	
	 /**
	  * Function to get the last row number within the worksheet
	  * @return The last row number within the worksheet
	  */
	 public int getLastRowNum() {
	  checkPreRequisites();
	
	  HSSFWorkbook workbook = openFileForReading();
	  HSSFSheet worksheet = getWorkSheet(workbook);
	
	  return worksheet.getLastRowNum();
	 }
	
	 /**
	  * Function to search for a specified key within a column, and return the corresponding occurence count
	  * @param key The value being searched for
	  * @param columnNum The column number in which the key should be searched
	  * @param startRowNum The row number from which the search should start
	  * @return The occurence count of the specified key
	  */
	 public int getRowCount(String key, int columnNum, int startRowNum) {
	  checkPreRequisites();
	
	  HSSFWorkbook workbook = openFileForReading();
	  HSSFSheet worksheet = getWorkSheet(workbook);
	  FormulaEvaluator formulaEvaluator =
	   workbook.getCreationHelper().createFormulaEvaluator();
	
	  int rowCount = 0;
	  boolean keyFound = false;
	
	  String currentValue;
	  for (int currentRowNum = startRowNum; currentRowNum <= worksheet.getLastRowNum(); currentRowNum++) {
	
	   HSSFRow row = worksheet.getRow(currentRowNum);
	   HSSFCell cell = row.getCell(columnNum);
	   currentValue = getCellValueAsString(cell, formulaEvaluator);
	
	   if (currentValue.equals(key)) {
	    rowCount++;
	    keyFound = true;
	   } else {
	    if (keyFound) {
	     break; // Assumption: Keys always appear contiguously
	    }
	   }
	  }
	
	  return rowCount;
	 }
	
	 /**
	  * Function to search for a specified key within a column, and return the corresponding occurence count
	  * @param key The value being searched for
	  * @param columnNum The column number in which the key should be searched
	  * @return The occurence count of the specified key
	  */
	 public int getRowCount(String key, int columnNum) {
	  return getRowCount(key, columnNum, 0);
	 }
	
	 /**
	  * Function to search for a specified key within a row, and return the corresponding column number
	  * @param key The value being searched for
	  * @param rowNum The row number in which the key should be searched
	  * @return The column number in which the specified key is found (-1 if the key is not found)
	  */
	 public int getColumnNum(String key, int rowNum) {
	  checkPreRequisites();
	
	  HSSFWorkbook workbook = openFileForReading();
	  HSSFSheet worksheet = getWorkSheet(workbook);
	  FormulaEvaluator formulaEvaluator =
	   workbook.getCreationHelper().createFormulaEvaluator();
	
	  HSSFRow row = worksheet.getRow(rowNum);
	  String currentValue;
	  for (int currentColumnNum = 0; currentColumnNum < row.getLastCellNum(); currentColumnNum++) {
	
	   HSSFCell cell = row.getCell(currentColumnNum);
	   currentValue = getCellValueAsString(cell, formulaEvaluator);
	
	   if (currentValue.equals(key)) {
	    return currentColumnNum;
	   }
	  }
	
	  return -1;
	 }
	
	 /**
	  * Function to get the value in the cell identified by the specified row and column numbers
	  * @param rowNum The row number of the cell
	  * @param columnNum The column number of the cell
	  * @return The value present in the cell
	  */
	 public String getValue(int rowNum, int columnNum) {
	  checkPreRequisites();
	
	  HSSFWorkbook workbook = openFileForReading();
	  HSSFSheet worksheet = getWorkSheet(workbook);
	  FormulaEvaluator formulaEvaluator =
	   workbook.getCreationHelper().createFormulaEvaluator();
	
	  HSSFRow row = worksheet.getRow(rowNum);
	  HSSFCell cell = row.getCell(columnNum);
	  return getCellValueAsString(cell, formulaEvaluator);
	 }
	
	 /**
	  * Function to get the value in the cell identified by the specified row number and column header
	  * @param rowNum The row number of the cell
	  * @param columnHeader The column header of the cell
	  * @return The value present in the cell
	  */
	 public String getValue(int rowNum, String columnHeader) {
	  checkPreRequisites();
	
	  HSSFWorkbook workbook = openFileForReading();
	  HSSFSheet worksheet = getWorkSheet(workbook);
	  FormulaEvaluator formulaEvaluator =
	   workbook.getCreationHelper().createFormulaEvaluator();
	
	  HSSFRow row = worksheet.getRow(0); //0 because header is always in the first row
	  int columnNum = -1;
	  String currentValue = null;
	  for (int currentColumnNum = 0; currentColumnNum < row.getLastCellNum(); currentColumnNum++) {
	
	   HSSFCell cell = row.getCell(currentColumnNum);
	   currentValue = getCellValueAsString(cell, formulaEvaluator);
	
	   if (currentValue.equals(columnHeader)) {
	    columnNum = currentColumnNum;
	    break;
	   }
	  }
	
	  if (columnNum == -1) {
	   System.out.println("The specified column header \"" + columnHeader + "\"" +
	    "is not found in the sheet \"" + datasheetName + "\"!");
	  } else {
	   row = worksheet.getRow(rowNum);
	   HSSFCell cell = row.getCell(columnNum);
	   currentValue = getCellValueAsString(cell, formulaEvaluator);
	  }
	  return currentValue;
	 }
	
	 public List < String > getColumnName(String sheetName) {
	  checkPreRequisites();
	
	  HSSFWorkbook workbook = openFileForReading();
	  HSSFSheet worksheet = getWorkSheet(workbook);
	  List < String > colList = new ArrayList < String > ();
	  HSSFRow row = worksheet.getRow(0); //Get first row
	  //following is boilerplate from the java doc
	  short minColIx = row.getFirstCellNum(); //get the first column index for a row
	  short maxColIx = row.getLastCellNum(); //get the last column index for a row
	  for (short colIx = minColIx; colIx < maxColIx; colIx++) { //loop from first to last index
	   HSSFCell cell = row.getCell(colIx); //get the cell
	   colList.add(cell.getStringCellValue()); //add the cell contents (name of column) and cell index to the map
	  }
	  return colList;
	 }
	
	 public int rownum() {
	  HSSFWorkbook workbook = openFileForReading();
	  HSSFSheet worksheet = getWorkSheet(workbook);
	  return worksheet.getLastRowNum();
	 }
	
	 public String returnparticluarData(String ColumnName, int rowNum) {
	  HSSFWorkbook workbook = openFileForReading();
	  HSSFSheet worksheet = getWorkSheet(workbook);
	  int colNum = worksheet.getRow(0).getLastCellNum();
	  for (int i = 0; i < colNum; i++) {
	   if (worksheet.getRow(0).getCell(i).getStringCellValue().equalsIgnoreCase(ColumnName)) {
	    return (worksheet.getRow(rowNum).getCell(i).getStringCellValue());
	
	   }
	  }
	  return null;
	 }
	
	 public ResultSet getResultSet(List < String > headers, List < List < Object >> data) throws Exception {
	
	  if (headers == null || data == null) {
	   System.out.println("null parameters");
	  }
	
	  MockResultSet mockResultSet = new MockResultSet("myResultSet");
	
	  for (String string: headers) {
	   mockResultSet.addColumn(string);
	  }
	
	  for (List < Object > list: data) {
	   mockResultSet.addRow(list);
	  }
	  return mockResultSet;
	 }
	
	 public ResultSet getRunManagerExcelData() {
	  ResultSet RS = null;
	
	  List < String > headers = getColumnName(datasheetName);
	
	  List < List < Object >> data = new ArrayList < List < Object >> ();
	  for (int i = 1; i <= rownum(); i++) {
	   List < Object > objects = new ArrayList < Object > ();
	   if (returnparticluarData("Executable", i).equalsIgnoreCase("Yes")) {
	    for (int j = 0; j < headers.size(); j++) {
	     String k = returnparticluarData(headers.get(j).toString(), i);
	     objects.add((String) k);
	    }
	    data.add(objects);
	   }
	
	  }
	
	  try {
	   RS = getResultSet(headers, data);
	  } catch (Exception e) {
	   e.printStackTrace();
	  }
	  return RS;
	 }
	
	 public ResultSet getScenarioExcelData(String Dataset) {
	  ResultSet RS = null;
	
	  List < String > headers = getColumnName(datasheetName);
	
	  List < List < Object >> data = new ArrayList < List < Object >> ();
	  System.out.println("RowNum: " + rownum());
	  for (int i = 1; i <= rownum(); i++) {
	   List < Object > objects = new ArrayList < Object > ();
	   if (returnparticluarData("DataSet", i).equalsIgnoreCase(Dataset)) {
	    for (int j = 0; j < headers.size(); j++) {
	     String k = returnparticluarData(headers.get(j).toString(), i);
	     objects.add((String) k);
	    }
	    data.add(objects);
	   }
	
	  }
	
	  try {
	   RS = getResultSet(headers, data);
	  } catch (Exception e) {
	   e.printStackTrace();
	  }
	  return RS;
	 }
	
	 public ArrayList < ExecutableTestCaseBean > executableTCLists(ResultSet RS)
	
	 {
	
	  ArrayList < ExecutableTestCaseBean > TCLists = new ArrayList < ExecutableTestCaseBean > ();
	  try {
	
	   while (RS.next())
	
	   {
	
	    ExecutableTestCaseBean ExecutableTestCaseBeanOBJ = new ExecutableTestCaseBean();
	
	    ExecutableTestCaseBeanOBJ.setModule(RS.getString("Module"));
	
	    //ExecutableTestCaseBeanOBJ.setWebServiceTriggered(RS.getString("WebServiceTriggered"));
	
	    ExecutableTestCaseBeanOBJ.setTCName(RS.getString("TestCaseName"));
	
	    ExecutableTestCaseBeanOBJ.setTestDataSource(RS.getString("TestDataSource"));
	
	    ExecutableTestCaseBeanOBJ.setAssertionSource(RS.getString("AssertionSource"));
	
	    ExecutableTestCaseBeanOBJ.setDataSet((RS.getString("DataSet")).split(","));
	
	    ExecutableTestCaseBeanOBJ.setTestCaseType(RS.getString("TestCaseType"));
	
	    TCLists.add(ExecutableTestCaseBeanOBJ);
	
	   }
	
	  } catch (SQLException e) {
	
	   e.printStackTrace();
	
	  }
	
	  return TCLists;
	
	 }
	
	}
	
	/*********************************************************************************/
	
	/*
	
	*Will use this bean to keep the executable test case list 
	
	 */
	
	public class ExecutableTestCaseBean {
	
	
	
	 private String TCName;
	
	 private String[] DataSet;
	
	 private String TestDataSource;
	
	 private String Module;
	
	 //private String WebServiceTriggered;
	
	 private String TestCaseType;
	
	 private String AssertionSource;
	
	
	
	 public String getTCName() {
	
	  return TCName;
	
	 }
	
	 public void setTCName(String tCName) {
	
	  TCName = tCName;
	
	 }
	
	 public String[] getDataSet() {
	
	  return DataSet;
	
	 }
	
	 public void setDataSet(String[] dataSet) {
	
	  DataSet = dataSet;
	
	 }
	
	 public String getTestDataSource() {
	
	  return TestDataSource;
	
	 }
	
	 public void setTestDataSource(String testDataSource) {
	
	  TestDataSource = testDataSource;
	
	 }
	
	 public String getModule() {
	
	  return Module;
	
	 }
	
	 public void setModule(String module) {
	
	  Module = module;
	
	 }
	
	 //                public String getWebServiceTriggered() {
	 //
	 //                                return WebServiceTriggered;
	 //
	 //                }
	
	 //                public void setWebServiceTriggered(String webServiceTriggered) {
	 //
	 //                                WebServiceTriggered = webServiceTriggered;
	 //
	 //                }
	
	 public String getTestCaseType() {
	
	  return TestCaseType;
	
	 }
	
	 public void setTestCaseType(String testCaseType) {
	
	  TestCaseType = testCaseType;
	
	 }
	
	 public String getAssertionSource() {
	
	  return AssertionSource;
	
	 }
	
	 public void setAssertionSource(String assertionSource) {
	
	  AssertionSource = assertionSource;
	
	 }
	
	 @Override
	
	 public String toString() {
	
	  return "TCName:: " + TCName + " Test Data Source:: " + TestDataSource + " Module:: " + Module + " Assertion Source:: " + AssertionSource;
	
	 }
	
	} //End of ExecutableTestCaseBean Class
	
	
	
	/*Create FolderStructure*/
	
	public class CreateFolderStructure {
	
	
	
	 public String createSuiteFolder(String Path, String Foldername)
	
	 {
	
	  (new File(Path + "\\" + Foldername)).mkdirs();
	
	  //(new File(Path+"\\"+FolderName)).mkdirs();
	
	  return Path + "\\" + Foldername;
	
	 }
	
	
	
	 public String createResultsFolder(String Path)
	
	 {
	
	  DateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy_hh-mm-ss-aaa");
	
	  Calendar cal = Calendar.getInstance();
	
	  String FolderName = "Run_" + dateFormat.format(cal.getTime());
	
	  (new File(Path + "\\" + FolderName)).mkdirs();
	
	  //(new File(Path+"\\"+FolderName)).mkdirs();
	
	  return Path + "\\" + FolderName;
	
	 }
	
	
	
	 public String createParentFolder(String Path)
	
	 {
	
	  (new File(Path + "\\" + "RQ-RS")).mkdirs();
	
	  //(new File(Path+"\\"+FolderName)).mkdirs();
	
	  return Path;
	
	 }
	
	
	
	 public boolean createTCFolder(String TCName, String Path)
	
	 {
	
	
	
	  boolean flag = (new File(Path + "\\" + TCName + "\\RQ-RS")).mkdirs();
	
	  return flag;
	
	
	
	 }
	
	
	
	}
	
	
	
	
	
	/*
	
	*Will use this bean in Reporting [To keep Test Step, Test Case wise data] ******START******* 
	
	 */
	
	
	
	class TestStepBean {
	
	
	
	 ArrayList < String > TestStepAssertions;
	
	 String TestStepName;
	
	 String TestStepStatus; /*PASS,FAIL,NO RUN*/
	
	 String RQXML_Path;
	
	 String RSXML_Path;
	
	 String ExecutionTime;
	
	
	
	
	
	 public ArrayList < String > getTestStepAssertions() {
	
	  return TestStepAssertions;
	
	 }
	
	 public void setTestStepAssertions(ArrayList < String > testStepAssertions) {
	
	  TestStepAssertions = testStepAssertions;
	
	 }
	
	 public String getTestStepName() {
	
	  return TestStepName;
	
	 }
	
	 public void setTestStepName(String testStepName) {
	
	  TestStepName = testStepName;
	
	 }
	
	 public String getTestStepStatus() {
	
	  return TestStepStatus;
	
	 }
	
	 public void setTestStepStatus(String testStepStatus) {
	
	  TestStepStatus = testStepStatus;
	
	 }
	
	 public String getRQXML_Path() {
	
	  return RQXML_Path;
	
	 }
	
	 public void setRQXML_Path(String rQXML_Path) {
	
	  RQXML_Path = rQXML_Path;
	
	 }
	
	 public String getRSXML_Path() {
	
	  return RSXML_Path;
	
	 }
	
	 public void setRSXML_Path(String rSXML_Path) {
	
	  RSXML_Path = rSXML_Path;
	
	 }
	
	 public String getExecutionTime() {
	
	  return ExecutionTime;
	
	 }
	
	 public void setExecutionTime(String executionTime) {
	
	  ExecutionTime = executionTime;
	
	 }
	
	
	
	 @Override
	
	 public String toString()
	
	 {
	
	  String TestStep = null;
	
	
	
	  TestStep = "<TestStep>" +
	
	   "<StepName>" + TestStepName + "</StepName>" +
	
	   "<StepStatus>" + TestStepStatus + "</StepStatus>" +
	
	   "<ResponseTime>" + ExecutionTime + "</ResponseTime>" +
	
	   "<Assertions>";
	
	
	
	  for (String S: TestStepAssertions)
	
	  {
	
	   TestStep = TestStep + S;
	
	  }
	
	  TestStep = TestStep + "</Assertions>" +
	
	   "<RequestXMLPath>" + RQXML_Path + "</RequestXMLPath>" +
	
	   "<ResponseXMLPath>" + RSXML_Path + "</ResponseXMLPath>" +
	
	   "</TestStep>";
	
	
	
	  return TestStep;
	
	 }
	
	
	
	}
	
	
	
	class TestCaseBean {
	
	
	
	 ArrayList < TestStepBean > TestStepLists;
	
	 public ArrayList < TestStepBean > getTestStepLists() {
	
	  return TestStepLists;
	
	 }
	
	 public void setTestStepLists(ArrayList < TestStepBean > testStepLists) {
	
	  TestStepLists = testStepLists;
	
	 }
	
	 @Override
	
	 public String toString()
	
	 {
	
	  String TestSteps = "";
	
	  for (TestStepBean TS: TestStepLists)
	
	  {
	
	   TestSteps = TestSteps + TS;
	
	  }
	
	
	
	  return TestSteps;
	
	 }
	
	
	
	}
	
	
	
	class DataSet_TestCaseBean
	
	{
	
	 Map < String, TestCaseBean > DataSet_TestCaseBean_Map; //[<DS1,TestStepBeanOBJ1>,<DS2,TestStepBeanOBJ2>]*/
	
	 String TestCaseName;
	
	 String TestCaseDescription;
	
	 String Module;
	
	 //String ServiceCall;
	
	 String TestCaseStatus; /*PASS,FAIL,NO RUN*/
	
	 String TestCaseType; /*Simple,Medium,Complex*/
	
	
	
	 public String getTestCaseDescription() {
	
	  return TestCaseDescription;
	
	 }
	
	 public void setTestCaseDescription(String testCaseDescription) {
	
	  TestCaseDescription = testCaseDescription;
	
	 }
	
	 public String getTestCaseName() {
	
	  return TestCaseName;
	
	 }
	
	 public void setTestCaseName(String testCaseName) {
	
	  TestCaseName = testCaseName;
	
	 }
	
	 public String getModule() {
	
	  return Module;
	
	 }
	
	 public void setModule(String module) {
	
	  Module = module;
	
	 }
	
	 //                public String getServiceCall() {
	 //
	 //                                return ServiceCall;
	 //
	 //                }
	 //
	 //                public void setServiceCall(String serviceCall) {
	 //
	 //                                ServiceCall = serviceCall;
	 //
	 //                }
	
	
	
	 public String getTestCaseStatus() {
	
	  return TestCaseStatus;
	
	 }
	
	 public void setTestCaseStatus(String testCaseStatus) {
	
	  TestCaseStatus = testCaseStatus;
	
	 }
	
	 public String getTestCaseType() {
	
	  return TestCaseType;
	
	 }
	
	 public void setTestCaseType(String testCaseType) {
	
	  TestCaseType = testCaseType;
	
	 }
	
	 public Map < String, TestCaseBean > getDataSet_TestCaseBean_Map() {
	
	  return DataSet_TestCaseBean_Map;
	
	 }
	
	
	
	 public void setDataSet_TestCaseBean_Map(
	
	  Map < String, TestCaseBean > dataSet_TestCaseBean_Map) {
	
	  DataSet_TestCaseBean_Map = dataSet_TestCaseBean_Map;
	
	 }
	
	
	
	 @Override
	
	 public String toString()
	
	 {
	
	  String DSTestCase = "";
	
	
	
	  DSTestCase = "<TestCases TestCaseName=\"" + TestCaseName +
	
	   "\" TestCaseDescription=\"" + TestCaseDescription +
	
	   "\" Module=\"" + Module +
	
	   //  "\" ServiceCall=\"" +ServiceCall+
	
	   "\" TestCaseStatus=\"" + TestCaseStatus +
	
	   "\" TestCaseType=\"" + TestCaseType + "\" >";
	
	
	
	  Iterator < Entry < String, TestCaseBean >> it = DataSet_TestCaseBean_Map.entrySet().iterator();
	
	  while (it.hasNext()) {
	
	   @SuppressWarnings("rawtypes")
	
	   Map.Entry pairs = (Map.Entry) it.next();
	
	   DSTestCase = DSTestCase + "<TestCase DS=\"" + pairs.getKey() + "\">" + pairs.getValue() + "</TestCase>";
	
	  }
	
	
	
	  DSTestCase = DSTestCase + "</TestCases>";
	
	  return DSTestCase;
	
	 }
	
	}
	
	
	
	
	
	class TestSuiteBean {
	
	
	
	 String TestSuiteName;
	
	 String TestSuiteDescription;
	
	 ArrayList < DataSet_TestCaseBean > TestCaseLists;
	
	 int Pass_Complex;
	
	 int Pass_Medium;
	
	 int Pass_Simple;
	
	 int Fail_Complex;
	
	 int Fail_Medium;
	
	 int Fail_Simple;
	
	 public String ExecutionStartTime;
	
	 public String ExecutionEndTime;
	
	
	
	 public String getTestSuiteDescription() {
	
	  return TestSuiteDescription;
	
	 }
	
	 public void setTestSuiteDescription(String testSuiteDescription) {
	
	  TestSuiteDescription = testSuiteDescription;
	
	 }
	
	 public String getExecutionStartTime() {
	
	  return ExecutionStartTime;
	
	 }
	
	 public void setExecutionStartTime(String executionStartTime) {
	
	  ExecutionStartTime = executionStartTime;
	
	 }
	
	 public String getExecutionEndTime() {
	
	  return ExecutionEndTime;
	
	 }
	
	 public void setExecutionEndTime(String executionEndTime) {
	
	  ExecutionEndTime = executionEndTime;
	
	 }
	
	 public String getTestSuiteName() {
	
	  return TestSuiteName;
	
	 }
	
	 public void setTestSuiteName(String testSuiteName) {
	
	  TestSuiteName = testSuiteName;
	
	 }
	
	 public ArrayList < DataSet_TestCaseBean > getTestCaseLists() {
	
	  return TestCaseLists;
	
	 }
	
	 public void setTestCaseLists(ArrayList < DataSet_TestCaseBean > testCaseLists) {
	
	  TestCaseLists = testCaseLists;
	
	 }
	
	 public int getPass_Complex() {
	
	  return Pass_Complex;
	
	 }
	
	 public void setPass_Complex(int pass_Complex) {
	
	  Pass_Complex = pass_Complex;
	
	 }
	
	 public int getPass_Medium() {
	
	  return Pass_Medium;
	
	 }
	
	 public void setPass_Medium(int pass_Medium) {
	
	  Pass_Medium = pass_Medium;
	
	 }
	
	 public int getPass_Simple() {
	
	  return Pass_Simple;
	
	 }
	
	 public void setPass_Simple(int pass_Simple) {
	
	  Pass_Simple = pass_Simple;
	
	 }
	
	 public int getFail_Complex() {
	
	  return Fail_Complex;
	
	 }
	
	 public void setFail_Complex(int fail_Complex) {
	
	  Fail_Complex = fail_Complex;
	
	 }
	
	 public int getFail_Medium() {
	
	  return Fail_Medium;
	
	 }
	
	 public void setFail_Medium(int fail_Medium) {
	
	  Fail_Medium = fail_Medium;
	
	 }
	
	 public int getFail_Simple() {
	
	  return Fail_Simple;
	
	 }
	
	 public void setFail_Simple(int fail_Simple) {
	
	  Fail_Simple = fail_Simple;
	
	 }
	
	
	
	 @Override
	
	 public String toString()
	
	 {
	
	  String DSTestCaseLists = null;
	
	  DSTestCaseLists = "<MasterTestSuite><SuiteName>" + TestSuiteName + "</SuiteName>";
	
	  DSTestCaseLists = DSTestCaseLists + "<SuiteDescription>" + TestSuiteDescription + "</SuiteDescription>";
	
	  DSTestCaseLists = DSTestCaseLists + "<ComplexPass>" + Pass_Complex + "</ComplexPass>";
	
	  DSTestCaseLists = DSTestCaseLists + "<MediumPass>" + Pass_Medium + "</MediumPass>";
	
	  DSTestCaseLists = DSTestCaseLists + "<SimplePass>" + Pass_Simple + "</SimplePass>";
	
	  DSTestCaseLists = DSTestCaseLists + "<ComplexFail>" + Fail_Complex + "</ComplexFail>";
	
	  DSTestCaseLists = DSTestCaseLists + "<MediumFail>" + Fail_Medium + "</MediumFail>";
	
	  DSTestCaseLists = DSTestCaseLists + "<SimpleFail>" + Fail_Simple + "</SimpleFail>";
	
	
	
	  DSTestCaseLists = DSTestCaseLists + "<TCLists>";
	
	  for (DataSet_TestCaseBean DS: TestCaseLists)
	
	   DSTestCaseLists = DSTestCaseLists + DS;
	
	  DSTestCaseLists = DSTestCaseLists + "</TCLists>";
	
	
	
	  DSTestCaseLists = DSTestCaseLists + "</MasterTestSuite>";
	
	  return DSTestCaseLists;
	
	 }
	
	}
	
	
	
	/*
	
	*Will use this bean in Reporting [To keep Test Step, Test Case wise data] ******END******* 
	
	*/
	
	
	
	
	
	
	
	/***********************************************************Report with XSLT*******************************************************/
	
	public class ReportingClass {
	
	 public void masterMethod(String projectPath, String DesReportPath, TestSuiteBean TS, SrcReportPath, project, execution_date, execution_time, suitetestname, environment, tc_endpoint)
	
	 {
	
	  ReportingClass ReportingClassOBJ = new ReportingClass();
	
	  ReportingClassOBJ.copyXSLT(DesReportPath, TS, SrcReportPath);
	
	  ReportingClassOBJ.prepareHTMLForTestCaseRunSummary(DesReportPath, TS, project, execution_date, execution_time, suitetestname, environment, tc_endpoint);
	
	  ReportingClassOBJ.prepareXMlForTestStepRunSummary(DesReportPath, TS);
	
	  // If Jira upload is Y first create report inside Results_JIRA then copy the same to Results folder
	
	  copyJiraResultsToRegularResults(projectPath, DesReportPath);
	
	  ReportingClassOBJ.createReportMetaXML(projectPath, suitetestname, DesReportPath);
	
	 }
	
	 public static String getXMlNodevalue(String project, String node)
	
	 {
	
	  String globalFile = project + "\\GlobalSettings.xml"
	
	  String nodevalue = null;
	
	  try {
	   // Setup the parser
	
	   DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
	   DocumentBuilder builder = builderFactory.newDocumentBuilder();
	
	   // Read the XML file
	   File inputFile = new File(globalFile);
	
	   InputStream inputStream = new FileInputStream(inputFile);
	
	   // Parse the XML file   
	
	   Document doc = builder.parse(inputStream);
	
	   // Create an XPath instance
	
	   XPath xPath = XPathFactory.newInstance().newXPath();
	
	   // Evaluate simple expressions
	
	   String expression = "//Variable/" + node;
	
	   nodevalue = xPath.evaluate(expression, doc);
	
	   return nodevalue;
	
	  } catch (FileNotFoundException e) {
	
	   e.printStackTrace();
	
	  } catch (XPathExpressionException e) {
	
	   e.printStackTrace();
	
	  } catch (SAXException e) {
	
	   e.printStackTrace();
	
	  } catch (IOException e) {
	
	   e.printStackTrace();
	
	  } catch (ParserConfigurationException e) {
	
	   e.printStackTrace();
	
	  }
	 }
	
	 public static String getSettingsProperty(String project, String propKey) {
	  Properties properties = new Properties();
	  String strValue = "";
	
	  try {
	   properties.load(new FileInputStream(project + "\\Global Settings.properties"));
	
	   strValue = properties.getProperty(propKey);
	  } catch (FileNotFoundException e) {
	   e.printStackTrace();
	  } catch (IOException e) {
	   e.printStackTrace();
	  }
	  return strValue;
	 }
	
	 public static void copyJiraResultsToRegularResults(String project, String source) throws InterruptedException, IOException {
	  ReportingClass ReportingClassOBJ = new ReportingClass();
	
	  String strJiraUpload = getSettingsProperty(project, "JiraUpload");
	  String strJiraRelease = getSettingsProperty(project, "JiraRelease");
	
	  if ("true".equalsIgnoreCase(strJiraUpload)) {
	   String destination = source.replaceFirst("Results_JIRA", "Results");
	   String updatedDes = destination.substring(0, destination.indexOf(strJiraRelease)) + "\\" + destination.substring(destination.indexOf(strJiraRelease) + strJiraRelease.length());
	
	   try {
	    File destDir = new File(updatedDes);
	    FileUtils.forceMkdir(destDir);
	    //log.info ("**********Source:"+source) ;
	    //log.info ("**********Destination:"+updatedDes);
	    File srcDir = new File(source);
	    FileUtils.copyDirectory(srcDir, destDir);
	   } catch (IOException e) {
	    e.printStackTrace();
	   }
	  }
	 }
	
	 public void createReportMetaXML(String projectPath, String module, String htmlReportPath) throws Exception {
	  String projectId = null;
	  String version = null;
	  String reportXMLpath = getSettingsProperty(projectPath, "reportXMLpath");
	  String appType = "SERVICE";
	  String jiraUpload = null;
	  String contactEmail = null;
	  String createNewCycle = null;
	  String environment = null;
	  String buildNumber = null;
	  String cycleName = null;
	  //projectPath = "C:\\Snapshotviews\\wngautomation\\GIT\\EMAGorilla";
	  //metaXMLPath = "\\\\visnpapp134\\jenkins\\Results\\EMAGorilla\\Report_XML\\";// To be hardcoded
	  //htmlReportPath="\\\\\\\\visnpapp134\\\\jenkins\\\\Results\\\\EMAGorilla\\\\EMA_Gorilla_Sanity_Suite\\\\Run_06-17-2015_07-40-43-AM\\\\Summary.html";
	  Pattern p = Pattern.compile(".*\\\\" + module + "\\\\ *(.*) *");
	
	  Matcher m = p.matcher(htmlReportPath);
	
	  m.find();
	
	  String runId = m.group(1);
	
	  String metaXMLFilePath = reportXMLpath + runId + ".xml";
	
	  DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
	  DocumentBuilder db = dbf.newDocumentBuilder();
	  jiraUpload = getSettingsProperty(projectPath, "JiraUpload");
	  projectId = getSettingsProperty(projectPath, "JiraProject");
	  version = getSettingsProperty(projectPath, "JiraRelease");
	  htmlReportPath = htmlReportPath + "\\Summary.html"
	
	  createNewCycle = getSettingsProperty(projectPath, "JiraNewCycle");
	  contactEmail = getSettingsProperty(projectPath, "JiraOwnerEID") + "@erac.com";
	  environment = getSettingsProperty(projectPath, "Environment");
	  buildNumber = "1.0";
	  cycleName = getSettingsProperty(projectPath, "JiraCycleName");
	  
	  if ("true".equalsIgnoreCase(jiraUpload)) {
	   createReportMetaXML(projectId, version, module, appType, metaXMLFilePath, htmlReportPath, contactEmail, createNewCycle, environment, buildNumber, cycleName);
	  }
	 }
	
	 public static void createReportMetaXML(String project, String version, String module, String appType, String metaXMLFilePath, String htmlReportPath, String jiraOwner, String createNewCycle, String environment, String buildNumber, String cycleName) throws Exception {
	
	  DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
	  DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
	
	  // root elements
	  Document doc = docBuilder.newDocument();
	  Element rootElement = doc.createElement("report");
	  doc.appendChild(rootElement);
	
	  // firstname elements
	  Element elProject = doc.createElement("project");
	  elProject.appendChild(doc.createTextNode(project));
	  rootElement.appendChild(elProject);
	
	  // lastname elements
	  Element elVersion = doc.createElement("version");
	  elVersion.appendChild(doc.createTextNode(version));
	  rootElement.appendChild(elVersion);
	
	  // nickname elements
	  Element elModule = doc.createElement("module");
	  elModule.appendChild(doc.createTextNode(module));
	  rootElement.appendChild(elModule);
	
	  // salary elements
	  Element elAppType = doc.createElement("appType");
	  elAppType.appendChild(doc.createTextNode(appType));
	  rootElement.appendChild(elAppType);
	
	  Element elReportPath = doc.createElement("reportPath");
	  elReportPath.appendChild(doc.createTextNode(htmlReportPath));
	  rootElement.appendChild(elReportPath);
	
	  Element elJiraOwner = doc.createElement("jiraOwner");
	  htmlReportPath
	  elJiraOwner.appendChild(doc.createTextNode(jiraOwner));
	  rootElement.appendChild(elJiraOwner);
	
	  Element elcreateNewCycle = doc.createElement("createNewCycle");
	  elcreateNewCycle.appendChild(doc.createTextNode(createNewCycle));
	  rootElement.appendChild(elcreateNewCycle);
	
	  Element elenvironment = doc.createElement("environment");
	  elenvironment.appendChild(doc.createTextNode(environment));
	  rootElement.appendChild(elenvironment);
	
	  Element elbuildNumber = doc.createElement("buildNumber");
	  elbuildNumber.appendChild(doc.createTextNode(buildNumber));
	  rootElement.appendChild(elbuildNumber);
	
	  Element elcycleName = doc.createElement("cycleName");
	  elcycleName.appendChild(doc.createTextNode(cycleName));
	  rootElement.appendChild(elcycleName);
	
	  TransformerFactory transformerFactory = TransformerFactory.newInstance();
	  Transformer transformer = transformerFactory.newTransformer();
	  transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
	  transformer.setOutputProperty(OutputKeys.INDENT, "yes");
	  DOMSource source = new DOMSource(doc);
	  StreamResult result = new StreamResult(new File(metaXMLFilePath));
	  transformer.transform(source, result);
	 }
	
	 public void copyXSLT(String DesReportPath, TestSuiteBean TS, String SrcReportPath) {
	
	  try {
	
	   //log.info "Copy XSLT Method Called"
	
	   //String SrcReportPathHardCD = "D:/Automation_SoapUIFramework/Master Regression Suite/XSLTTemplate_Logo/";                                     
	
	   //String DesReportPathHardCD = "D:/SOAP UI Regression Suite/Master Regression Suite/XSLTTemplate_Logo/";
	
	
	
	   //System.out.println("Source Report Path: "+SrcReportPath+"OverAllRunSummary.xslt");
	
	   //System.out.println("Destination Report Path: "+DesReportPath+"/OverAllRunSummary.xsl");
	
	   //copyFile(new File(SrcReportPath+"OverAllRunSummary.xsl"),new File(DesReportPath+"/OverAllRunSummary.xsl"));
	
	
	
	   //                                            System.out.println(SrcReportPath+"TestCaseRunSummary.xslt");
	
	   //                                            System.out.println(DesReportPath+"/TestCaseRunSummary.xsl");                                         
	
	   //copyFile(new File(SrcReportPath+"TestCaseRunSummary.xsl"),new File(DesReportPath+"/TestCaseRunSummary.xsl"));
	
	
	
	   for (DataSet_TestCaseBean TC: TS.getTestCaseLists())
	
	   {
	
	    String Tmp_DesReportPath = DesReportPath + "/" + TC.getTestCaseName();
	
	
	
	    //                                                            System.out.println(SrcReportPath+"########################");
	
	    //                                                            System.out.println(SrcReportPath+"TestStepRunSummary.xslt");
	
	    //                                                            System.out.println(Tmp_DesReportPath+"/TestStepRunSummary.xsl");
	
	
	
	    copyFile(new File(SrcReportPath + "TestStepRunSummary.xsl"), new File(Tmp_DesReportPath + "/TestStepRunSummary.xsl"));
	
	
	
	   }
	
	
	
	  } catch (Exception e) {
	
	   e.printStackTrace();
	
	  }
	
	
	
	 }
	
	
	
	
	
	 /*Method to copy File*/
	
	 public void copyFile(File sourceFile, File destinationFile) {
	
	
	
	  try {
	
	   FileInputStream fileInputStream = new FileInputStream(sourceFile);
	
	   FileOutputStream fileOutputStream = new FileOutputStream(destinationFile);
	
	
	
	   int bufferSize;
	
	   byte[] bufffer = new byte[512];
	
	   while ((bufferSize = fileInputStream.read(bufffer)) > 0) {
	
	    fileOutputStream.write(bufffer, 0, bufferSize);
	
	   }
	
	   fileInputStream.close();
	
	   fileOutputStream.close();
	
	  } catch (Exception e) {
	
	   e.printStackTrace();
	
	  }
	
	
	
	 }
	
	
	
	 public void prepareXMlForOverAllRunSummary(String DesReportPath, TestSuiteBean TS) {
	
	
	
	  try {
	
	
	
	   int totalPassedTestCases = TS.getPass_Simple() + TS.getPass_Medium() + TS.getPass_Complex();
	
	   int totalFailedTestCases = TS.getFail_Simple() + TS.getFail_Medium() + TS.getFail_Complex();
	
	   /*Get the execution time difference*/
	
	
	
	   SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");
	
	   Date date1 = format.parse(TS.getExecutionStartTime());
	
	   Date date2 = format.parse(TS.getExecutionEndTime());
	
	   long difference = date2.getTime() - date1.getTime();
	
	   long diffSeconds = difference / 1000;
	
	   String diff = diffSeconds.toString() + " Seconds";
	
	
	
	   String overAllRunSummaryXMLString = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>";
	
	   overAllRunSummaryXMLString = overAllRunSummaryXMLString + "<?xml-stylesheet type=\"text/xsl\" href=\"OverAllRunSummary.xsl\"?>" +
	
	    "<currentrunresults>" +
	
	    "<environment>" +
	
	    "<application>" + "Enterprise Car Share" + "</application>" +
	
	    "</environment>" +
	
	    "<executiontime>" +
	
	    "<start>" + TS.getExecutionStartTime() + "</start>" +
	
	    "<end>" + TS.getExecutionEndTime() + "</end>" +
	
	    "<total>" + diff + "</total>" +
	
	    "</executiontime>" +
	
	    "<overallstatus>" +
	
	    "<testsuite>" +
	
	    "<name>" + TS.getTestSuiteName() + "</name>" +
	
	    "<link>" + "./TestCaseRunSummary.xml" + "</link>" +
	
	    "<description>" + TS.getTestSuiteDescription() + "</description>" +
	
	    "<passed>" + totalPassedTestCases + "</passed>" +
	
	    "<failed>" + totalFailedTestCases + "</failed>" +
	
	    "</testsuite>" +
	
	    "<total>" +
	
	    "<passed>" + totalPassedTestCases + "</passed>" +
	
	    "<failed>" + totalFailedTestCases + "</failed>" +
	
	    "</total>" +
	
	    "</overallstatus>" +
	
	    "<criticalitystatus>" +
	
	    "<testsuite>" +
	
	    "<name>" + TS.getTestSuiteName() + "</name>" +
	
	    "<passed>" +
	
	    "<simple>" + TS.getPass_Simple() + "</simple>" +
	
	    "<medium>" + TS.getPass_Medium() + "</medium>" +
	
	    "<complex>" + TS.getPass_Complex() + "</complex>" +
	
	    "</passed>" +
	
	    "<failed>" +
	
	    "<simple>" + TS.getFail_Simple() + "</simple>" +
	
	    "<medium>" + TS.getFail_Medium() + "</medium>" +
	
	    "<complex>" + TS.getFail_Complex() + "</complex>" +
	
	    "</failed>" +
	
	    "</testsuite>" +
	
	    "</criticalitystatus>" +
	
	    "</currentrunresults>";
	
	
	
	   String strXMLFile = DesReportPath + "/" + "OverAllRunSummary.xml";
	
	   File objNewFile = new File(strXMLFile);
	
	   objNewFile.createNewFile();
	
	   FileWriter fw = new FileWriter(objNewFile.getAbsoluteFile());
	
	   BufferedWriter bw = new BufferedWriter(fw);
	
	   StringWriter sw = new StringWriter();
	
	   sw.write(overAllRunSummaryXMLString);
	
	   System.out.println(sw.toString());
	
	   bw.write(sw.toString());
	
	   bw.close();
	
	
	
	  } catch (Exception e) {
	
	   e.printStackTrace();
	
	  }
	
	
	
	 }
	
	
	
	 public void prepareHTMLForOverAllRunSummary(String DesReportPath, TestSuiteBean TS) {
	
	  int totalPassedTestCases = TS.getPass_Simple() + TS.getPass_Medium() + TS.getPass_Complex();
	
	  int totalFailedTestCases = TS.getFail_Simple() + TS.getFail_Medium() + TS.getFail_Complex();
	
	
	
	  /*Get the execution time difference*/
	
	
	
	  SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");
	
	  Date date1 = format.parse(TS.getExecutionStartTime());
	
	  Date date2 = format.parse(TS.getExecutionEndTime());
	
	  long difference = date2.getTime() - date1.getTime();
	
	  long diffSeconds = difference / 1000;
	
	  String diff = diffSeconds.toString() + " Seconds";
	
	
	
	  def HTMLReportPath = DesReportPath + "\\Summary.html";
	
	  def TestCaseRunSummaryPath = DesReportPath + "\\TestCaseRunSummary.xml";
	
	  FileWriter out = new FileWriter(HTMLReportPath, false);
	
	  BufferedWriter writer = new BufferedWriter(out);
	
	
	
	  //HTML Header
	
	
	
	  writer.write("<html>" +
	
	   "<head>" +
	
	   "<style>" +
	
	   "html, body{" +
	
	   "padding:0;" +
	
	   "margin:0;" +
	
	   "position:relative;" +
	
	   "background:#FFFFFF url(body1.jpg);" +
	
	   "background-repeat:repeat;" +
	
	   "color:#fff;" +
	
	   "letter-spacing:1px;" +
	
	   "font-family:Georgia," + "\"Times New Roman\"" + ", Times, serif;" +
	
	   "font-size:14px;" +
	
	   "font-weight:normal;" +
	
	   "}" +
	
	
	
	   "#container{" +
	
	   "padding-top:20px;" +
	
	   "padding-left: 50px;" +
	
	   "padding-RIGHT: 50px;" +
	
	   "width:100%;" +
	
	   "margin:0 auto;" +
	
	   "text-align: center;" +
	
	   "}" +
	
	
	
	   "table {" +
	
	   "border-collapse: collapse;" +
	
	   "border-spacing: 0;" +
	
	   "width:100%;" +
	
	   "-webkit-box-shadow:  0px 2px 1px 5px rgba(242, 242, 242, 0.1);" +
	
	   "box-shadow:  0px 2px 1px 5px rgba(242, 242, 242, 0.1);" +
	
	   "}" +
	
	
	
	   ".tabClass {" +
	
	   "border: 1px solid #555;" +
	
	   "}" +
	
	
	
	   ".tabClass td {" +
	
	   "border-left: 1px solid #555;" +
	
	   "border-top: 1px solid #555;" +
	
	   "padding: 5px;" +
	
	   "text-align: center;" +
	
	   "}" +
	
	
	
	   ".tabClass th, .tabClass th:hover {" +
	
	   "border-left: 1px solid #555;" +
	
	   "border-bottom: 1px solid #828282;" +
	
	   "padding: 5px;" +
	
	   "background-color:#404040 !important;" +
	
	   "background-image: -webkit-gradient(linear, left top, left bottom, from(#151515), to(#404040)) !important;" +
	
	   "background-image: -webkit-linear-gradient(top, #151515, #404040) !important;" +
	
	   "background-image:    -moz-linear-gradient(top, #151515, #404040) !important;" +
	
	   "background-image:     -ms-linear-gradient(top, #151515, #404040) !important;" +
	
	   "background-image:      -o-linear-gradient(top, #151515, #404040) !important;" +
	
	   "background-image:         linear-gradient(top, #151515, #404040) !important;" +
	
	   "color:#fff !important;" +
	
	   "font-weight:normal;" +
	
	   "}" +
	
	
	
	   ".tabClass tbody tr:nth-child(even) {" +
	
	   "background: #EBEBEB !important;" +
	
	   "color:#000;" +
	
	   "}" +
	
	
	
	   ".tabClass tr:hover *{" +
	
	   "background: #fff;" +
	
	   "color:#000;" +
	
	   "}" +
	
	
	
	   ".tabClass tr{" +
	
	   "background:#D7D7D7;" +
	
	   "color:#000;" +
	
	   "}" +
	
	
	
	   ".tabSummary caption{" +
	
	   "font-size:20px;" +
	
	   "font-weight:normal;" +
	
	   "background:url(../img/tabClasstable.png);" +
	
	   "background-repeat:no-repeat;" +
	
	   "background-position: 130px center;" +
	
	   "padding-top: 20px;" +
	
	   "height:50px;" +
	
	   "color: Black;" +
	
	   "}" +
	
	
	
	   ".tabSummary {" +
	
	   "border: 1px solid #555;" +
	
	   "}" +
	
	
	
	   ".tabSummary th, .tabSummary th:hover {" +
	
	   "border-left: 1px solid #555;" +
	
	   "border-bottom: 1px solid #828282;" +
	
	   "padding: 5px;" +
	
	   "background-color:#EBEBEB !important;" +
	
	   "background-image: -webkit-gradient(linear, left top, left bottom, from(#151515), to(#404040)) !important;" +
	
	   "background-image: -webkit-linear-gradient(top, #151515, #404040) !important;" +
	
	   "background-image:    -moz-linear-gradient(top, #151515, #404040) !important;" +
	
	   "background-image:     -ms-linear-gradient(top, #151515, #404040) !important;" +
	
	   "background-image:      -o-linear-gradient(top, #151515, #404040) !important;" +
	
	   "background-image:         linear-gradient(top, #151515, #404040) !important;" +
	
	   "color:Black !important;" +
	
	   "font-weight:normal;" +
	
	   "}" +
	
	   "</style>" +
	
	
	
	   "<title> SOAPUI Automation Test Result </title>" +
	
	   "</head>" +
	
	   "<body>" +
	
	
	
	   "<Table align= \"center\" border =\"1\" width=\"100%\" BORDERCOLOR=\"#FFFFFF\" CELLSPACING=\"0\" CELLPADDING=\"5\" STYLE=\'Font-Size:12pt Border-Colapse:Colapse\'>" +
	
	   "<Thead BGCOLOR=\"#ADD8E6\" STYLE=\'Font-Weight: Bold Color: #FFFFFF\'>" +
	
	   "<TH colspan=\'4\' style=\'font-family:Copperplate Gothic Bold; font-size:1.4em;\'>SOAPUI AUTOMATED TEST EXECUTION SUMMARY</TH>" +
	
	   "</Thead>" +
	
	   "</Table>" +
	
	
	
	   //"<div id=\"container\">" +
	
	   //"<div style=\"width:1250px; margin:20px auto; height:50px; background:url(" + "Y:\\Groups\\Web_Next_Gen\\AUTOMATION\\PUBLIC\\WNG_NMA_WEBSERVICE\\XSLTTemplate_Logo\\logo.jpg" + ");background-repeat: no-repeat;background-position: center;\"></div>" +
	
	   "<table class=\"tabSummary\">" +
	
	   "<thead>" +
	
	   "<tr>" +
	
	   "<th style=\"text-align: left;\">Start Time: <b>" + TS.getExecutionStartTime() + "</b></th>" +
	
	   "<th style=\"text-align: left;\">End Time: <b>" + TS.getExecutionEndTime() + "</b></th>" +
	
	   "<th style=\"text-align: left;\">Execution Time: <b>" + diff + "</b></th>" +
	
	   "</tr>" +
	
	   "</thead>" +
	
	   "</table>" +
	
	   "<br/>" +
	
	
	
	   "<table class=\"tabClass\">" +
	
	   "<thead>" +
	
	   "<tr>" +
	
	   "<th>Summary of TestSuites</th>" +
	
	   "<th>Description of TestSuites</th>" +
	
	   "<th>Passed</th>" +
	
	   "<th>Failed</th>" +
	
	   "</tr>" +
	
	   "</thead>" +
	
	   "<tbody>" +
	
	   "<tr>" +
	
	   "<td style=\"text-align: left;\"><b>" + "<a href=\"" + TestCaseRunSummaryPath + "\">" + TS.getTestSuiteName() + "</a>" + "</b></font></td>" +
	
	   "<td>" + TS.getTestSuiteDescription() + "</td>" +
	
	   "<td>" + totalPassedTestCases + "</td>" +
	
	   "<td>" + totalFailedTestCases + "</td>" +
	
	   "</tr>" +
	
	   "<tr>" +
	
	   "<td><b><font align=\"center\" color = \"black\" face=\"Arial Narrow\" size=\"3\">TOTAL</font></b></td>" +
	
	   "<td><b><font align=\"left\" color = \"black\" face=\"Arial Narrow\" size=\"2\">---</font></b></td>" +
	
	   "<td>" + totalPassedTestCases + "</td>" +
	
	   "<td>" + totalFailedTestCases + "</td>" +
	
	   "</tr>" +
	
	   "</tbody>" +
	
	   "</table>" +
	
	   "</div>" +
	
	   "</body>" +
	
	   "</html>");
	
	  writer.flush();
	
	
	
	 }
	
	
	
	 public void prepareXMlForTestCaseRunSummary(String DesReportPath, TestSuiteBean TS, ProjectName, ExecutionDate, Execution_Time, SuitetestName, Env) {
	
	
	
	  try {
	
	
	
	   int totalPassedTestCases = TS.getPass_Simple() + TS.getPass_Medium() + TS.getPass_Complex();
	
	   int totalFailedTestCases = TS.getFail_Simple() + TS.getFail_Medium() + TS.getFail_Complex();
	
	
	
	   SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");
	
	   Date date1 = format.parse(TS.getExecutionStartTime());
	
	   Date date2 = format.parse(TS.getExecutionEndTime());
	
	   long difference = date2.getTime() - date1.getTime();
	
	   long diffSeconds = difference / 1000;
	
	   String diff = diffSeconds.toString() + " Seconds";
	
	
	
	   String testCaseRunSummaryXMLString = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>";
	
	   testCaseRunSummaryXMLString = testCaseRunSummaryXMLString + "<?xml-stylesheet type=\"text/xsl\" href=\"TestCaseRunSummary.xsl\"?>" +
	
	    "<testcasesummary>" +
	
	    "<suite>" + SuitetestName + "</suite>" +
	
	    "<project>" + ProjectName + "</project>" +
	
	    "<startdate>" + ExecutionDate + "</startdate>" +
	
	    "<starttime>" + Execution_Time + "</starttime>" +
	
	    "<environment>" + Env + "</environment>" +
	
	    "<totaltimetaken>" + diff + "</totaltimetaken>" +
	
	    "<testcases>";
	
	
	
	   ArrayList < DataSet_TestCaseBean > noOfTCs = new ArrayList < DataSet_TestCaseBean > ();
	
	   noOfTCs = TS.getTestCaseLists();
	
	   int count = noOfTCs.size();
	
	   for (int i = 0; i < count; i++) {
	
	    String TC_Nam = noOfTCs.get(i).getTestCaseName()
	
	    testCaseRunSummaryXMLString = testCaseRunSummaryXMLString +
	
	     "<testcase>" +
	
	     "<id>" + noOfTCs.get(i).getTestCaseName() + "</id>" +
	
	     "<description>" + noOfTCs.get(i).getTestCaseDescription() + "</description>" +
	
	     "<module>" + noOfTCs.get(i).getModule() + "</module>" +
	
	     //    "<servicecall>" + noOfTCs.get(i).getServiceCall() + "</servicecall>" +
	
	     "<type>" + noOfTCs.get(i).getTestCaseType() + "</type>" +
	
	     "<status>" + noOfTCs.get(i).getTestCaseStatus() + "</status>" +
	
	     "<rqrs>" + "RQ-RS" + "</rqrs>" +
	
	     "<link1>" + "./" + noOfTCs.get(i).getTestCaseName() + "/TestStepRunSummary.xml" + "</link1>" +
	
	     "<link2>" + "./RQ-RS/" + noOfTCs.get(i).getTestCaseName() + ".txt" + "</link2>" +
	
	
	
	     "</testcase>";
	
	   }
	
	
	
	   testCaseRunSummaryXMLString = testCaseRunSummaryXMLString +
	
	    "</testcases>" +
	
	    "<summary>" +
	
	    "<passed>" + totalPassedTestCases + "</passed>" +
	
	    "<failed>" + totalFailedTestCases + "</failed>" +
	
	    "</summary>" +
	
	    "</testcasesummary>";
	
	
	
	   String strXMLFile = DesReportPath + "/" + "TestCaseRunSummary.xml";
	
	   File objNewFile = new File(strXMLFile);
	
	   objNewFile.createNewFile();
	
	   FileWriter fw = new FileWriter(objNewFile.getAbsoluteFile());
	
	   BufferedWriter bw = new BufferedWriter(fw);
	
	   StringWriter sw = new StringWriter();
	
	   sw.write(testCaseRunSummaryXMLString);
	
	   System.out.println(sw.toString());
	
	   bw.write(sw.toString());
	
	   bw.close();
	
	
	
	  } catch (Exception e) {
	
	   e.printStackTrace();
	
	  }
	
	
	
	 }
	
	 public void prepareHTMLForTestCaseRunSummary(String DesReportPath, TestSuiteBean TS, ProjectName, ExecutionDate, Execution_Time, SuitetestName, Env, EndPoint) {
	
	
	
	  try {
	
	
	
	   int totalPassedTestCases = TS.getPass_Simple() + TS.getPass_Medium() + TS.getPass_Complex();
	
	   int totalFailedTestCases = TS.getFail_Simple() + TS.getFail_Medium() + TS.getFail_Complex();
	
	
	
	   SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");
	
	   Date date1 = format.parse(TS.getExecutionStartTime());
	
	   Date date2 = format.parse(TS.getExecutionEndTime());
	
	   long difference = date2.getTime() - date1.getTime();
	
	   long diffSeconds = difference / 1000;
	
	   String diff = diffSeconds.toString() + " Seconds";
	
	   def HTMLReportPath = DesReportPath + "\\Summary.html";
	
	   FileWriter out = new FileWriter(HTMLReportPath, false);
	
	   BufferedWriter writer = new BufferedWriter(out);
	
	   writer.write("<html>" +
	
	    "<head>" +
	
	    "<style>" +
	
	    "html, body{" +
	
	    "padding:0;" +
	
	    "margin:0;" +
	
	    "position:relative;" +
	
	    "background:#FFFFFF url(body1.jpg);" +
	
	    "background-repeat:repeat;" +
	
	    "color:#fff;" +
	
	    "letter-spacing:1px;" +
	
	    "font-family:Georgia," + "\"Times New Roman\"" + ", Times, serif;" +
	
	    "font-size:14px;" +
	
	    "font-weight:normal;" +
	
	    "}" +
	
	
	
	    "#container{" +
	
	    "padding-top:20px;" +
	
	    "padding-left: 50px;" +
	
	    "padding-RIGHT: 50px;" +
	
	    "width:100%;" +
	
	    "margin:0 auto;" +
	
	    "text-align: center;" +
	
	    "}" +
	
	
	
	    "table {" +
	
	    "border-collapse: collapse;" +
	
	    "border-spacing: 0;" +
	
	    "width:100%;" +
	
	    "-webkit-box-shadow:  0px 2px 1px 5px rgba(242, 242, 242, 0.1);" +
	
	    "box-shadow:  0px 2px 1px 5px rgba(242, 242, 242, 0.1);" +
	
	    "}" +
	
	
	
	    ".tabClass {" +
	
	    "border: 1px solid #555;" +
	
	    "}" +
	
	
	
	    ".tabClass td {" +
	
	    "border-left: 1px solid #555;" +
	
	    "border-top: 1px solid #555;" +
	
	    "padding: 5px;" +
	
	    "text-align: center;" +
	
	    "}" +
	
	
	
	    ".tabClass th, .tabClass th:hover {" +
	
	    "border-left: 1px solid #555;" +
	
	    "border-bottom: 1px solid #828282;" +
	
	    "padding: 5px;" +
	
	    "background-color:#404040 !important;" +
	
	    "background-image: -webkit-gradient(linear, left top, left bottom, from(#151515), to(#404040)) !important;" +
	
	    "background-image: -webkit-linear-gradient(top, #151515, #404040) !important;" +
	
	    "background-image:    -moz-linear-gradient(top, #151515, #404040) !important;" +
	
	    "background-image:     -ms-linear-gradient(top, #151515, #404040) !important;" +
	
	    "background-image:      -o-linear-gradient(top, #151515, #404040) !important;" +
	
	    "background-image:         linear-gradient(top, #151515, #404040) !important;" +
	
	    "color:#fff !important;" +
	
	    "font-weight:normal;" +
	
	    "}" +
	
	    "tr.heading {" +
	
	    "background-color: #585858;" +
	
	    "color: #EFFBFB;" +
	
	    "font-size: 0.9em;" +
	
	    "font-weight: bold;" +
	
	    "}" +
	
	    "tr.subheading {" +
	
	    "background-color: #EFFBFB;" +
	
	    "color: #585858;" +
	
	    "font-weight: bold;" +
	
	    "font-size: 0.9em;" +
	
	    "text-align: justify;" +
	
	    "}" +
	
	    ".tabClass tbody tr:nth-child(even) {" +
	
	    "background: #EBEBEB !important;" +
	
	    "color:#000;" +
	
	    "}" +
	
	
	
	    ".tabClass tr:hover *{" +
	
	    "background: #fff;" +
	
	    "color:#000;" +
	
	    "}" +
	
	
	
	    ".tabClass tr{" +
	
	    "background:#D7D7D7;" +
	
	    "color:#000;" +
	
	    "}" +
	
	
	
	    ".tabSummary caption{" +
	
	    "font-size:20px;" +
	
	    "font-weight:normal;" +
	
	    "background:url(../img/tabClasstable.png);" +
	
	    "background-repeat:no-repeat;" +
	
	    "background-position: 130px center;" +
	
	    "padding-top: 20px;" +
	
	    "height:50px;" +
	
	    "color: Black;" +
	
	    "}" +
	
	
	
	    ".tabSummary {" +
	
	    "border: 1px solid #555;" +
	
	    "}" +
	
	
	
	    ".tabSummary th, .tabSummary th:hover {" +
	
	    "border-left: 1px solid #555;" +
	
	    "border-bottom: 1px solid #828282;" +
	
	    "padding: 5px;" +
	
	    "background-color:#EBEBEB !important;" +
	
	    "background-image: -webkit-gradient(linear, left top, left bottom, from(#151515), to(#404040)) !important;" +
	
	    "background-image: -webkit-linear-gradient(top, #151515, #404040) !important;" +
	
	    "background-image:    -moz-linear-gradient(top, #151515, #404040) !important;" +
	
	    "background-image:     -ms-linear-gradient(top, #151515, #404040) !important;" +
	
	    "background-image:      -o-linear-gradient(top, #151515, #404040) !important;" +
	
	    "background-image:         linear-gradient(top, #151515, #404040) !important;" +
	
	    "color:Black !important;" +
	
	    "font-weight:normal;" +
	
	    "}" +
	
	    "</style>" +
	
	    "<title> SOAPUI Automation Test Result </title>" +
	
	    "</head>" +
	
	    "<body>" +
	
	    "<Table align= \"center\" border =\"1\" width=\"100%\" BORDERCOLOR=\"#FFFFFF\" CELLSPACING=\"0\" CELLPADDING=\"5\" STYLE=\'Font-Size:12pt Border-Colapse:Colapse\'>" +
	    "<Thead BGCOLOR=\"#ADD8E6\" STYLE=\'Font-Weight: Bold Color: #FFFFFF\'>" +
	    "<TH colspan=\'4\' style=\'font-family:Copperplate Gothic Bold; font-size:1.4em;\'>" + "SOAPUI AUTOMATED TEST EXECUTION SUMMARY" + "</TH>" +
	    "</Thead>" +
	    "</Table>" +
	
	    //"<div id=\"container\"> " +
	    //"<div style=\"width:100%; margin:10px auto; height:80px;background:url(" + "http://www.enterpriseholdings.com/images/logo.jpg" + ");background-repeat: no-repeat;background-position: center;\"></div>" +
	    "<br/>" +
	
	    "<table id=\'header\' style=\"width:70%\" align=\"center\">" +
	    "<colgroup>" +
	    "<col style='width: 25%' />" +
	    "<col style='width: 25%' />" +
	    "<col style='width: 25%' />" +
	    "<col style='width: 25%' />" +
	    "</colgroup>" +
	
	    "<tr class=\'heading\'>" +
	    "<th colspan=\'4\' style=\'font-family:Copperplate Gothic Bold; font-size:1.4em;\'>" + ProjectName + "-Test Case Execution Summary" + "</th>" +
	    "</tr>" +
	
	    "<tr class=\'subheading\'>" +
	    "<th>Execution Date</th>" +
	    "<th><b>" + ExecutionDate + "</b></th>" +
	    "<th>Test Environment</th>" +
	    "<th><b>" + Env + "</b></th>" +
	    "</tr>" +
	
	    "<tr class=\'subheading\'>" +
	    "<th>Total Execution Time</th>" +
	    "<th><b>" + diff + "</b></th>" +
	    "<th>Suite Name</th>" +
	    "<th><b>" + SuitetestName + "</b></th>" +
	    "</tr>" +
	
	    "<table class=\"tabClass\" style=\"width:70%\" align=\"center\">" +
	    "<thead>" +
	    "<tr>" +
	    "<th>Test Case ID</th>" +
	    "<th>Test Case Description</th>" +
	    "<th>Module</th>" +
	    "<th>Test Case Type</th>" +
	    "<th>Status</th>" +
	    "<th>RQ-RS Data</th>" +
	    "</tr>" +
	    "</thead>" +
	
	    "<tbody>");
	
	
	   ArrayList < DataSet_TestCaseBean > noOfTCs = new ArrayList < DataSet_TestCaseBean > ();
	
	   noOfTCs = TS.getTestCaseLists();
	
	   int count = noOfTCs.size();
	
	   for (int i = 0; i < count; i++) {
	    String TC_Nam = noOfTCs.get(i).getTestCaseName()
	
	    writer.write("<tr style=\"background-color:#FFFFFF\">" +
	
	     "<td style=\"text-align: left;\"><b>" + "<a class=\"TCMeta\" id=\"TC\" href=\"" + ".\\" + noOfTCs.get(i).getTestCaseName() + "\\TestStepRunSummary.xml" + "\">" + noOfTCs.get(i).getTestCaseName() + "</a>" + "</b></font></td>" +
	
	     "<td>" + noOfTCs.get(i).getTestCaseDescription() + "</td>" +
	
	     "<td>" + noOfTCs.get(i).getModule() + "</td>" +
	
	     "<td>" + noOfTCs.get(i).getTestCaseType() + "</td>" +
	
	     "<td>" +
	
	     "<p align=\"center\"><b>");
	
	    if (noOfTCs.get(i).getTestCaseStatus().equalsIgnoreCase("PASSED")) {
	     writer.write("<font face=\"Verdana\" size=\"2\" color=\"#008000\">" + noOfTCs.get(i).getTestCaseStatus() + "</font>");
	    } else if (noOfTCs.get(i).getTestCaseStatus().equalsIgnoreCase("FAILED")) {
	     writer.write("<font face=\"Verdana\" size=\"2\" color=\"#FF0000\">" + noOfTCs.get(i).getTestCaseStatus() + "</font>");
	    } else {
	     writer.write("<font face=\"Verdana\" size=\"2\" color=\"#8A4117\">" + noOfTCs.get(i).getTestCaseStatus() + "</font>");
	    }
	
	    writer.write("</b></p>" +
	
	     "</td>" +
	
	     "<td style=\"text-align: left;\"><b>" + "<a href=\"" + "./RQ-RS/" + noOfTCs.get(i).getTestCaseName() + ".txt" + "\">" + "RQ-RS" + "</a>" + "</b></font></td>" +
	
	     "</tr>");
	
	   }
	
	   writer.write("</tbody>" +
	
	    "</table>" +
	
	    "<table class=\"tabClass\"  style=\"width:70%\" align=\"center\">" +
	
	    "<thead>" +
	
	    "<tr>" +
	
	    "<th>Passed</th>" +
	
	    "<th>Failed</th>" +
	
	    "</tr>" +
	
	    "</thead>" +
	
	    "<tbody>" +
	
	    "<tr>" +
	
	    "<td>" + totalPassedTestCases + "</td>" +
	
	    "<td>" + totalFailedTestCases + "</td>" +
	
	    "</tr>" +
	
	    "</tbody>" +
	
	    "</table>" +
	
	    "</div>" +
	
	    "<br><div align=\"center\"><div color=\"000001\" letter-spacing =\"1px\" font-family = \"Georgia,\"Times New Roman\", Times, serif\" font-size = \"14px\" font-weight = \"normal\" align=\"center\">Result folder location : </div>" + "<a href=\"" + DesReportPath + "\">" + DesReportPath + "</a></div>" +
	
	    "<br><div align=\"left\"><div color=\"000001\" letter-spacing =\"1px\" font-family = \"Georgia,\"Times New Roman\", Times, serif\" font-size = \"14px\" font-weight = \"normal\" align=\"center\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Report best view	 in Internet Explorer</div></div>" +
	
	    "</body>" +
	
	    "</html>");
	
	   writer.flush();
	
	  } catch (Exception e) {
	
	   e.printStackTrace();
	
	  }
	
	
	
	 }
	
	 public void prepareXMlForTestStepRunSummary(String DesReportPath, TestSuiteBean TS) {
	
	
	
	  try {
	
	
	
	   ArrayList < DataSet_TestCaseBean > noOfTCs = new ArrayList < DataSet_TestCaseBean > ();
	
	   Map < String, TestCaseBean > MapOBJ = new HashMap < String, TestCaseBean > ();
	
	   ArrayList < TestStepBean > TestStepBeanLists = new ArrayList < TestStepBean > ();
	
	   ArrayList < String > noOfAs = new ArrayList < String > ();
	
	   noOfTCs = TS.getTestCaseLists();
	
	   String TestCaseName = "";
	
	   System.out.println("Number Of Test Cases :: " + noOfTCs.size());
	
	   String testCaseStepSummaryXMLString = null;
	
	
	
	   int count = noOfTCs.size();
	
	   for (int i = 0; i < count; i++) {
	
	    testCaseStepSummaryXMLString = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>";
	
	    testCaseStepSummaryXMLString = testCaseStepSummaryXMLString + "<?xml-stylesheet type=\"text/xsl\" href=\"TestStepRunSummary.xsl\"?>";
	
	
	
	    testCaseStepSummaryXMLString = testCaseStepSummaryXMLString +
	
	     "<testcases>";
	
	    TestCaseName = noOfTCs.get(i).getTestCaseName();
	
	    MapOBJ = noOfTCs.get(i).getDataSet_TestCaseBean_Map();
	
	
	
	    for (Map.Entry < String, TestCaseBean > entry: MapOBJ.entrySet()) {
	
	     System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
	
	     testCaseStepSummaryXMLString = testCaseStepSummaryXMLString +
	
	      "<testcase>" +
	
	      "<DS>" + entry.getKey() + "</DS>" +
	
	      "<teststeps>";
	
	     TestStepBeanLists = entry.getValue().getTestStepLists();
	
	     int cnt = TestStepBeanLists.size();
	
	     for (int j = 0; j < cnt; j++) { // Create the test step
	
	      int temp = j + 1;
	
	      testCaseStepSummaryXMLString = testCaseStepSummaryXMLString +
	
	       "<teststep>" +
	
	       "<stepno>" + temp + "</stepno>" +
	
	       "<stepname>" + TestStepBeanLists.get(j).getTestStepName() + "</stepname>" +
	
	       "<stepstatus>" + TestStepBeanLists.get(j).getTestStepStatus() + "</stepstatus>" +
	
	       "<responsetime>" + TestStepBeanLists.get(j).getExecutionTime() + "</responsetime>" +
	
	       "<assertions>";
	
	      noOfAs = TestStepBeanLists.get(j).getTestStepAssertions();
	
	      for (int k = 0; k < noOfAs.size(); k++) {
	
	       testCaseStepSummaryXMLString = testCaseStepSummaryXMLString + TestStepBeanLists.get(j).getTestStepAssertions().get(k);
	
	      }
	
	      testCaseStepSummaryXMLString = testCaseStepSummaryXMLString +
	
	       "</assertions>" +
	
	       "<rqxmlpath>" + "RQ" + "</rqxmlpath>" +
	
	       "<rsxmlpath>" + "RS" + "</rsxmlpath>" +
	
	       "<link1>" + TestStepBeanLists.get(j).getRQXML_Path() + "</link1>" +
	
	       "<link2>" + TestStepBeanLists.get(j).getRSXML_Path() + "</link2>" +
	
	       "</teststep>";
	
	     }
	
	
	
	     testCaseStepSummaryXMLString = testCaseStepSummaryXMLString + "</teststeps>" + "</testcase>";
	
	
	
	    }
	
	
	
	    testCaseStepSummaryXMLString = testCaseStepSummaryXMLString +
	
	     "</testcases>";
	
	
	
	    String strXMLFile = DesReportPath + "/" + TestCaseName + "/" + "TestStepRunSummary.xml";
	
	    File objNewFile = new File(strXMLFile);
	
	    objNewFile.createNewFile();
	
	    FileWriter fw = new FileWriter(objNewFile.getAbsoluteFile());
	
	    BufferedWriter bw = new BufferedWriter(fw);
	
	    StringWriter sw = new StringWriter();
	
	    sw.write(testCaseStepSummaryXMLString);
	
	    System.out.println(sw.toString());
	
	    bw.write(sw.toString());
	
	    bw.close();
	
	   }
	
	
	
	
	
	
	
	  } catch (Exception e) {
	
	   e.printStackTrace();
	
	  }
	
	
	
	 }
	
	
	
	
	
	
	
	}]]></script></con:config></con:testStep><con:testStep type="properties" name="In-Properties" id="0205c7ec-e2a1-4c22-bcec-c49aa9df5bbc"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TestSuiteName</con:name><con:value>REGRESSION</con:value></con:property><con:property><con:name>IN-DataSheetName</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Out-Properties" id="5076f3bb-5093-48d0-8814-44bba11641ca"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TestCaseNotFound</con:name><con:value>0</con:value></con:property><con:property><con:name>Pass_Complex</con:name><con:value>1</con:value></con:property><con:property><con:name>Pass_Medium</con:name><con:value>0</con:value></con:property><con:property><con:name>Pass_Simple</con:name><con:value>0</con:value></con:property><con:property><con:name>Fail_Complex</con:name><con:value>0</con:value></con:property><con:property><con:name>Fail_Medium</con:name><con:value>0</con:value></con:property><con:property><con:name>Fail_Simple</con:name><con:value>0</con:value></con:property></con:properties></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>Description</con:name><con:value>abc</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="5325ff18-3ee3-4489-82fb-e7993e6325da" name="REGRESSION on Vanilla"><con:description>TestSuite generated for REST Service [Get Location by LatLong]</con:description><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="4c648448-dc44-4340-995d-26629ca5694c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GET_LOCATION" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>TestCase generated for REST Resource [GetRestaurntDetailsByltdLng] located at [/BWWService.svc/GetRestaurntDetailsByltdLng]</con:description><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="In-Properties" id="d411ae48-b962-4c1c-808a-96d9882f624f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>iVendorID</con:name><con:value>20</con:value></con:property><con:property><con:name>fLatitude</con:name><con:value>44.949073</con:value></con:property><con:property><con:name>fLongitude</con:name><con:value>-93.317692</con:value></con:property><con:property><con:name>radius</con:name><con:value>50</con:value></con:property><con:property><con:name>strCountry</con:name><con:value>United States</con:value></con:property><con:property><con:name>iRestaurantID</con:name><con:value>45</con:value></con:property><con:property><con:name>strState</con:name><con:value>MN</con:value></con:property><con:property><con:name>cid</con:name><con:value>dfdbd245cb7746229f51d39f40efbffa</con:value></con:property><con:property><con:name>cs</con:name><con:value>1B44fE3b0dCD4120ae875C90a661bd53</con:value></con:property><con:property><con:name>iSiteID</con:name><con:value>3</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Assertion" id="ca5b0ae8-5289-4471-96d7-97bad54cc0da"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>vStatus</con:name><con:value>200</con:value></con:property><con:property><con:name>strState</con:name><con:value>MN</con:value></con:property><con:property><con:name>iRestaurantID</con:name><con:value>657</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step 1 - Get Restaurant details by Ltd &amp; Lng" id="1ff0982a-9f8f-461f-9926-5fe5d515c405"><con:settings/><con:config service="Get Location by LatLong" resourcePath="/BWWService.svc/GetRestaurntDetailsByltdLng" methodName="GetRestaurntDetailsByltdLng" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 1 - Get Restaurant details by Ltd &amp; Lng" id="0a020393-c029-45b5-ad26-770562e96d5c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByltdLng</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bd707660-4740-44d6-8f73-127d463d3a60" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6a1475e5-9af1-40c1-918c-66758d7c05bf" name="CORS"><con:configuration><scriptText>assert messageExchange.responseHeaders["Access-Control-Allow-Origin"] != null</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="631fc94c-433d-4e0a-8ee3-8d8050d2d281" name="Contains Country"><con:configuration><token>Country</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="fLatitude" value="${In-Properties#fLatitude}"/>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="fLongitude" value="${In-Properties#fLongitude}"/>
  <con:entry key="radius" value="${In-Properties#radius}"/>
</con:parameters><con:parameterOrder><con:entry>fLatitude</con:entry><con:entry>fLongitude</con:entry><con:entry>radius</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 2 - Get Restaurant details by Country" id="8c467a71-2a0f-4f32-aad6-99bf8c038a83"><con:settings/><con:config service="Get Location by Country" resourcePath="/BWWService.svc/GetRestaurantDetailsByCountry" methodName="GetRestaurantDetailsByCountry" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 2 - Get Restaurant details by Country" id="5e338f1a-eca9-4fe5-9228-d4e85dbc308b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByCountry</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="da7eeb50-fc5c-41c2-9151-13d37c063c27" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="3e46e359-7b9b-405f-ad3f-a299478530a6" name="Contains"><con:configuration><token>${Assertion#strState}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="strCountry" value="${In-Properties#strCountry}"/>
</con:parameters><con:parameterOrder><con:entry>strCountry</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 3 - Get Restaurant details by RestaurantID" id="f28bce59-c61c-4b83-a916-6b935b7b1aec"><con:settings/><con:config service="Get Location by RestaurantID" resourcePath="/BWWService.svc/GetRestaurntDetailsByID" methodName="GetRestaurntDetailsByID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 3 - Get Restaurant details by RestaurantID" id="06a5f15e-6d27-4210-97b4-01f2e7937241" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByID</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="61b3b56f-c50e-4667-a369-0b973dd0820e" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iSiteID" value="${In-Properties#iSiteID}"/>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="iRestaurantID" value="${In-Properties#iRestaurantID}"/>
</con:parameters><con:parameterOrder><con:entry>iVendorID</con:entry><con:entry>iSiteID</con:entry><con:entry>iRestaurantID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 4 - Get Restaurant details by State" id="382e3487-7558-423e-978f-760afdfcd3a6"><con:settings/><con:config service="Get Location by State" resourcePath="/BWWService.svc/GetRestaurantDetailsByState" methodName="GetRestaurantDetailsByState" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 4 - Get Restaurant details by State" id="80f926de-1522-4028-b0bf-3652b15caa30" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByState</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="40977bef-12c2-4664-bf2b-07f11d7e8ef6" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0ba09c86-cc1e-446c-b944-dc7aa326feaa" name="Contains StateCode"><con:configuration><token>${Assertion#strState}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="strState" value="${In-Properties#strState}"/>
</con:parameters><con:parameterOrder><con:entry>strState</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 5 - Get MenuItem details by RestaurantID" id="b86118ec-71a9-4054-b1bd-a76ab1f48733"><con:settings/><con:config service="Get MenuItem by RestaurantID" resourcePath="/BWWService.svc/GetMenuItemDetailsByRestaurantID" methodName="GetMenuItemDetailsByRestaurantID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 5 - Get MenuItem details by RestaurantID" id="02fc1f3b-e6bd-42fe-ab33-ad7461917b2f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetMenuItemDetailsByRestaurantID</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133b7969-d76f-4f1e-9925-11c95277be4e" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="iRestaurantID" value="${In-Properties#iRestaurantID}"/>
</con:parameters><con:parameterOrder><con:entry>iRestaurantID</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Copy of Step 1 - Get Restaurant details by Ltd &amp; Lng" id="ffc024b9-dde3-4a81-8f76-6fa5a75d46ec"><con:settings/><con:config service="Get Location by LatLong" resourcePath="/BWWService.svc/GetRestaurntDetailsByltdLng" methodName="GetRestaurntDetailsByltdLng" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Copy of Step 1 - Get Restaurant details by Ltd &amp; Lng" id="0a020393-c029-45b5-ad26-770562e96d5c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByltdLng</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bd707660-4740-44d6-8f73-127d463d3a60" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6a1475e5-9af1-40c1-918c-66758d7c05bf" name="CORS"><con:configuration><scriptText>assert messageExchange.responseHeaders["Access-Control-Allow-Origin"] != null</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="fLatitude" value="21.3966020"/>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="fLongitude" value="-157.9771900"/>
  <con:entry key="radius" value="${In-Properties#radius}"/>
</con:parameters><con:parameterOrder><con:entry>fLatitude</con:entry><con:entry>fLongitude</con:entry><con:entry>radius</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>EndPoint</con:name><con:value>https://api-location-vanilla.cloudhub.io</con:value></con:property><con:property><con:name>user</con:name><con:value>svc_loc_BdubsPortal</con:value></con:property><con:property><con:name>password</con:name><con:value>yOgUy9fbmyaefYaARqK1</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="2609e910-d46a-4a80-bd26-dab4c088c4fb" name="OLD-REGRESSION-NO USE"><con:description>TestSuite generated for REST Service [Get Location by LatLong]</con:description><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="2e58b022-17f1-4e39-b460-6ac1800bff2a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GET_LOCATION_BY_LAT_LONG" searchProperties="true"><con:description>TestCase generated for REST Resource [GetRestaurntDetailsByltdLng] located at [/BWWService.svc/GetRestaurntDetailsByltdLng]</con:description><con:settings/><con:testStep type="properties" name="In-Properties" id="46822522-ad5a-48d3-8b3a-da62d23b9168"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>iVendorID</con:name><con:value/></con:property><con:property><con:name>fLatitude</con:name><con:value/></con:property><con:property><con:name>fLongitude</con:name><con:value/></con:property><con:property><con:name>radius</con:name><con:value/></con:property><con:property><con:name>strCountry</con:name><con:value/></con:property><con:property><con:name>iRestaurantID</con:name><con:value/></con:property><con:property><con:name>cid</con:name><con:value>850ba6cb2d2b4e959767511e4e361c0c</con:value></con:property><con:property><con:name>cs</con:name><con:value>955631E61b9F4cE9A9F9D717B9435639</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Assertion" id="2901bebe-d594-4e3e-9906-1cc14916b0e3"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>vStatus</con:name><con:value>200</con:value></con:property><con:property><con:name>strState</con:name><con:value/></con:property><con:property><con:name>iRestaurantID</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step 1 - Get Restaurant details by Ltd &amp; Lng" id="6b91d2e3-85a0-4897-8585-973e5cf8c149"><con:settings/><con:config service="Get Location by LatLong" resourcePath="/BWWService.svc/GetRestaurntDetailsByltdLng" methodName="GetRestaurntDetailsByltdLng" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 1 - Get Restaurant details by Ltd &amp; Lng" id="0a020393-c029-45b5-ad26-770562e96d5c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://bdubslocationapi-perftest.cloudhub.io</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByltdLng</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bd707660-4740-44d6-8f73-127d463d3a60" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="fLatitude" value="${In-Properties#fLatitude}"/>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="radius" value="${In-Properties#radius}"/>
  <con:entry key="fLongitude" value="${In-Properties#fLongitude}"/>
</con:parameters><con:parameterOrder><con:entry>fLatitude</con:entry><con:entry>fLongitude</con:entry><con:entry>radius</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 2 - Get Restaurant details by Country" id="9cf62a3a-cee9-424f-b048-7f3cc1201bf7"><con:settings/><con:config service="Get Location by Country" resourcePath="/BWWService.svc/GetRestaurantDetailsByCountry" methodName="GetRestaurantDetailsByCountry" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 2 - Get Restaurant details by Country" id="5e338f1a-eca9-4fe5-9228-d4e85dbc308b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://bdubslocationapi-perftest.cloudhub.io</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByCountry</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="da7eeb50-fc5c-41c2-9151-13d37c063c27" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="3e46e359-7b9b-405f-ad3f-a299478530a6" name="Contains"><con:configuration><token>${Assertion#strState}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="strCountry" value="${In-Properties#strCountry}"/>
</con:parameters><con:parameterOrder><con:entry>strCountry</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase id="f79c52df-afc3-41bb-87a2-6110ef78a681" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GET_RESTAURANTDELT_BY_COUNTRY" searchProperties="true"><con:description>TestCase generated for REST Resource [GetRestaurantDetailsByCountry] located at [/BWWService.svc/GetRestaurantDetailsByCountry]</con:description><con:settings/><con:testStep type="properties" name="In-Properties" id="21a3d705-8335-4409-bb3f-1cc4221b2c47"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>strCountry</con:name><con:value/></con:property><con:property><con:name>iVendorID</con:name><con:value/></con:property><con:property><con:name>cid</con:name><con:value>850ba6cb2d2b4e959767511e4e361c0c</con:value></con:property><con:property><con:name>cs</con:name><con:value>955631E61b9F4cE9A9F9D717B9435639</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Assertion" id="fe8b12e8-4b41-45d4-830f-19752f5e8ad0"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>vStatus</con:name><con:value/></con:property><con:property><con:name>strState</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step 1 - Get Restaurant details by Country" id="fd189741-0a65-4da5-beb9-578360948032"><con:settings/><con:config service="Get Location by Country" resourcePath="/BWWService.svc/GetRestaurantDetailsByCountry" methodName="GetRestaurantDetailsByCountry" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 1 - Get Restaurant details by Country" id="5e338f1a-eca9-4fe5-9228-d4e85dbc308b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://bdubslocationapi-perftest.cloudhub.io</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByCountry</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="da7eeb50-fc5c-41c2-9151-13d37c063c27" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="3e46e359-7b9b-405f-ad3f-a299478530a6" name="Contains"><con:configuration><token>${Assertion#strState}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="strCountry" value="${In-Properties#strCountry}"/>
</con:parameters><con:parameterOrder><con:entry>strCountry</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>08952a59-f1ba-44c0-8e0e-f62066cf7995</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="dafa5ecc-4665-4b74-b9df-b6c485f2ee51" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GET_LOCATION_BY_RESTAURANTID" searchProperties="true"><con:description>TestCase generated for REST Resource [GetRestaurntDetailsByID] located at [/BWWService.svc/GetRestaurntDetailsByID]</con:description><con:settings/><con:testStep type="properties" name="In-Properties" id="3ae671cf-2a8f-4dce-a303-929f2e7ce6a1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>iVendorID</con:name><con:value>10</con:value></con:property><con:property><con:name>iRestaurantID</con:name><con:value>292</con:value></con:property><con:property><con:name>cid</con:name><con:value>850ba6cb2d2b4e959767511e4e361c0c</con:value></con:property><con:property><con:name>cs</con:name><con:value>955631E61b9F4cE9A9F9D717B9435639</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Assertion" id="18b4073a-1050-4844-8ebb-eb16406c05ec"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>strState</con:name><con:value/></con:property><con:property><con:name>vStatus</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step 1 - Get Restaurant details by RestaurantID" id="bdbeb95e-89cb-472a-b25c-f035b600ea91"><con:settings/><con:config service="Get Location by RestaurantID" resourcePath="/BWWService.svc/GetRestaurntDetailsByID" methodName="GetRestaurntDetailsByID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 1 - Get Restaurant details by RestaurantID" id="06a5f15e-6d27-4210-97b4-01f2e7937241" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://bdubslocationapi-perftest.cloudhub.io</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByID</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="61b3b56f-c50e-4667-a369-0b973dd0820e" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6601fabf-27fe-4d1d-a752-b9ee3753f699" name="Contains"><con:configuration><token>${Assertion#strState}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iSiteID" value=""/>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="iRestaurantID" value=""/>
</con:parameters><con:parameterOrder><con:entry>iVendorID</con:entry><con:entry>iSiteID</con:entry><con:entry>iRestaurantID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>dd5440ac-c08f-4b15-b161-51e4e86ed914</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f57748b2-e07a-4f25-bc9c-249616172471</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="ccbacbe2-8ed6-4062-bd0a-4dc709446209" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GET_LOCATION_BY_STATE" searchProperties="true"><con:description>TestCase generated for REST Resource [GetRestaurantDetailsByState] located at [/BWWService.svc/GetRestaurantDetailsByState]</con:description><con:settings/><con:testStep type="properties" name="In-Properties" id="a1cef21c-c616-434d-bd02-241249d1c406"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>strState</con:name><con:value>MN</con:value></con:property><con:property><con:name>iVendorID</con:name><con:value>10</con:value></con:property><con:property><con:name>cid</con:name><con:value>850ba6cb2d2b4e959767511e4e361c0c</con:value></con:property><con:property><con:name>cs</con:name><con:value>955631E61b9F4cE9A9F9D717B9435639</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Assertion" id="f536229c-ba81-4adb-9f12-5731819a9cb1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>strState</con:name><con:value/></con:property><con:property><con:name>vStatus</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step 1 - Get Restaurant details by State" id="f55e89a4-5803-4658-a6cc-41457382d65c"><con:settings/><con:config service="Get Location by State" resourcePath="/BWWService.svc/GetRestaurantDetailsByState" methodName="GetRestaurantDetailsByState" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 1 - Get Restaurant details by State" id="80f926de-1522-4028-b0bf-3652b15caa30" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://bdubslocationapi-perftest.cloudhub.io</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByState</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="40977bef-12c2-4664-bf2b-07f11d7e8ef6" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0a42c030-c182-464d-9cda-659898c15320" name="Contains"><con:configuration><token>${Assertion#strState}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="strState" value="${In-Properties#strState}"/>
</con:parameters><con:parameterOrder><con:entry>strState</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>4bb48ade-c067-4ba2-8b9b-bb7650a35da0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e5dc1b41-c887-4f8b-946f-01de9817c059</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="2797b400-d68c-4c94-bbf6-165d2789a4e5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GET_MENUITEM_BY_RESTAURANTID" searchProperties="true"><con:description>TestCase generated for REST Resource [GetMenuItemDetailsByRestaurantID] located at [/BWWService.svc/GetMenuItemDetailsByRestaurantID]</con:description><con:settings/><con:testStep type="properties" name="In-Properties" id="49862308-51a8-4df9-9b36-e90188bcbece"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>iRestaurantID</con:name><con:value/></con:property><con:property><con:name>iVendorID</con:name><con:value/></con:property><con:property><con:name>cid</con:name><con:value>850ba6cb2d2b4e959767511e4e361c0c</con:value></con:property><con:property><con:name>cs</con:name><con:value>955631E61b9F4cE9A9F9D717B9435639</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Assertion" id="b284bd18-b727-4d91-a990-65e5c0bf8933"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>vStatus</con:name><con:value/></con:property><con:property><con:name>iRestaurantID</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step 1 - Get MenuItem details by RestaurantID" id="b520a50c-dee4-4f44-aa81-b9a906b54fa8"><con:settings/><con:config service="Get MenuItem by RestaurantID" resourcePath="/BWWService.svc/GetMenuItemDetailsByRestaurantID" methodName="GetMenuItemDetailsByRestaurantID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 1 - Get MenuItem details by RestaurantID" id="02fc1f3b-e6bd-42fe-ab33-ad7461917b2f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://bdubslocationapi-perftest.cloudhub.io</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetMenuItemDetailsByRestaurantID</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133b7969-d76f-4f1e-9925-11c95277be4e" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="14085e5a-b2a7-401f-bf8f-7652d71a8ef2" name="Contains"><con:configuration><token>${Assertion#iRestaurantID}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="10"/>
  <con:entry key="iRestaurantID" value="292"/>
</con:parameters><con:parameterOrder><con:entry>iRestaurantID</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>84145225-f8c8-4a02-9c83-add1cc0d3f08</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1f36a5e0-a750-4442-b63b-4677af51cf84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>EndPoint</con:name><con:value>https://bdubslocationapi-perftest.cloudhub.io</con:value></con:property><con:property><con:name>user</con:name><con:value>svc_loc_BdubsPortal</con:value></con:property><con:property><con:name>password</con:name><con:value>yOgUy9fbmyaefYaARqK1</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="88f62f9c-265d-4924-8d8d-aebb4ebfc6cc" name="REGRESSION on Stage"><con:description>TestSuite generated for REST Service [Get Location by LatLong]</con:description><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="5ecec544-a199-43a0-8a55-665c34b26366" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GET_LOCATION" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>TestCase generated for REST Resource [GetRestaurntDetailsByltdLng] located at [/BWWService.svc/GetRestaurntDetailsByltdLng]</con:description><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="In-Properties" id="e2175989-40f4-467b-9eff-0e6da664b318"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>iVendorID</con:name><con:value>50</con:value></con:property><con:property><con:name>fLatitude</con:name><con:value>44.9778</con:value></con:property><con:property><con:name>fLongitude</con:name><con:value>-93.2650</con:value></con:property><con:property><con:name>radius</con:name><con:value>50</con:value></con:property><con:property><con:name>strCountry</con:name><con:value>United States</con:value></con:property><con:property><con:name>iRestaurantID</con:name><con:value>45</con:value></con:property><con:property><con:name>strState</con:name><con:value>MN</con:value></con:property><con:property><con:name>cid</con:name><con:value>e61af77efc1e4477bf8b83ade31901b5</con:value></con:property><con:property><con:name>cs</con:name><con:value>b412815427554a96ADBc8Cd2af6C368f</con:value></con:property><con:property><con:name>iSiteID</con:name><con:value>3</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Assertion" id="abfce2f8-de0e-4138-a51c-697a8db06594"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>vStatus</con:name><con:value>200</con:value></con:property><con:property><con:name>strState</con:name><con:value>MN</con:value></con:property><con:property><con:name>iRestaurantID</con:name><con:value>21</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step 1 - Get Restaurant details by Ltd &amp; Lng" id="2e3ef2cf-e492-4740-9b68-6d6abaee481d"><con:settings/><con:config service="Get Location by LatLong" resourcePath="/BWWService.svc/GetRestaurntDetailsByltdLng" methodName="GetRestaurntDetailsByltdLng" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 1 - Get Restaurant details by Ltd &amp; Lng" id="0a020393-c029-45b5-ad26-770562e96d5c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByltdLng</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bd707660-4740-44d6-8f73-127d463d3a60" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e4fe0d8b-9f36-49bc-b9ab-b9337dbbd6e0" name="CORS"><con:configuration><scriptText>assert messageExchange.responseHeaders["Access-Control-Allow-Origin"] != null</scriptText></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="1ad44370-c9fc-495d-9b4a-e0bb2f77cfa8" name="JsonPath Count"><con:configuration><path>$[*]['SiteId']</path><content>20</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="fLatitude" value="${In-Properties#fLatitude}"/>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="fLongitude" value="${In-Properties#fLongitude}"/>
  <con:entry key="radius" value="${In-Properties#radius}"/>
</con:parameters><con:parameterOrder><con:entry>fLatitude</con:entry><con:entry>fLongitude</con:entry><con:entry>radius</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 2 - Get Restaurant details by Country" id="564e020a-9b9c-492e-8297-8630a48282af"><con:settings/><con:config service="Get Location by Country" resourcePath="/BWWService.svc/GetRestaurantDetailsByCountry" methodName="GetRestaurantDetailsByCountry" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 2 - Get Restaurant details by Country" id="5e338f1a-eca9-4fe5-9228-d4e85dbc308b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByCountry</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="da7eeb50-fc5c-41c2-9151-13d37c063c27" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="3e46e359-7b9b-405f-ad3f-a299478530a6" name="Contains"><con:configuration><token>${Assertion#United States}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="strCountry" value="${In-Properties#strCountry}"/>
</con:parameters><con:parameterOrder><con:entry>strCountry</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 3 - Get Restaurant details by RestaurantID" id="8441e253-0e90-413b-85b5-38528415a8aa"><con:settings/><con:config service="Get Location by RestaurantID" resourcePath="/BWWService.svc/GetRestaurntDetailsByID" methodName="GetRestaurntDetailsByID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 3 - Get Restaurant details by RestaurantID" id="06a5f15e-6d27-4210-97b4-01f2e7937241" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByID</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="61b3b56f-c50e-4667-a369-0b973dd0820e" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="4ed64b01-348d-4796-8ada-c792a74d4f40" name="JsonPath Count"><con:configuration><path>$[*]['SiteId']</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iSiteID" value="${In-Properties#iSiteID}"/>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="iRestaurantID" value="${In-Properties#iRestaurantID}"/>
</con:parameters><con:parameterOrder><con:entry>iVendorID</con:entry><con:entry>iSiteID</con:entry><con:entry>iRestaurantID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 4 - Get Restaurant details by State" id="374411e9-75f3-408c-ae72-dd0302f31d5e"><con:settings/><con:config service="Get Location by State" resourcePath="/BWWService.svc/GetRestaurantDetailsByState" methodName="GetRestaurantDetailsByState" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 4 - Get Restaurant details by State" id="80f926de-1522-4028-b0bf-3652b15caa30" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByState</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="40977bef-12c2-4664-bf2b-07f11d7e8ef6" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0ba09c86-cc1e-446c-b944-dc7aa326feaa" name="Contains StateCode"><con:configuration><token>${Assertion#strState}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="strState" value="${In-Properties#strState}"/>
</con:parameters><con:parameterOrder><con:entry>strState</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 5 - Get MenuItem details by RestaurantID" id="3f0b2eda-d2f5-47ec-a9d5-f88380d5b782"><con:settings/><con:config service="Get MenuItem by RestaurantID" resourcePath="/BWWService.svc/GetMenuItemDetailsByRestaurantID" methodName="GetMenuItemDetailsByRestaurantID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 5 - Get MenuItem details by RestaurantID" id="02fc1f3b-e6bd-42fe-ab33-ad7461917b2f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetMenuItemDetailsByRestaurantID</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133b7969-d76f-4f1e-9925-11c95277be4e" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="14085e5a-b2a7-401f-bf8f-7652d71a8ef2" name="Contains"><con:configuration><token>${Assertion#iRestaurantID}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="d97c78cd-0c16-4c8c-956e-906a6d9406ab" name="JsonPath Count"><con:configuration><path>$[*]['CommonMenuName']</path><content>220</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="10"/>
  <con:entry key="iRestaurantID" value="292"/>
</con:parameters><con:parameterOrder><con:entry>iRestaurantID</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>EndPoint</con:name><con:value>https://api-location-stage.cloudhub.io</con:value></con:property><con:property><con:name>user</con:name><con:value>svc_loc_BdubsPortal</con:value></con:property><con:property><con:name>password</con:name><con:value>yOgUy9fbmyaefYaARqK1</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="e1547e81-57e5-4e2b-af24-19f71749f8fd" name="REGRESSION on Production"><con:description>TestSuite generated for REST Service [Get Location by LatLong]</con:description><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="06886550-e342-40b8-9b4e-ad9e74d9dc10" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GET_LOCATION" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>TestCase generated for REST Resource [GetRestaurntDetailsByltdLng] located at [/BWWService.svc/GetRestaurntDetailsByltdLng]</con:description><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="In-Properties" id="c22dae6a-8d7d-48a0-b90a-c2f79dd9d93c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>iVendorID</con:name><con:value>25</con:value></con:property><con:property><con:name>fLatitude</con:name><con:value>45.1243266</con:value></con:property><con:property><con:name>fLongitude</con:name><con:value>-93.3337207999999</con:value></con:property><con:property><con:name>radius</con:name><con:value>10</con:value></con:property><con:property><con:name>strCountry</con:name><con:value>United States</con:value></con:property><con:property><con:name>iRestaurantID</con:name><con:value>3374</con:value></con:property><con:property><con:name>strState</con:name><con:value>MN</con:value></con:property><con:property><con:name>cid</con:name><con:value>dfdbd245cb7746229f51d39f40efbffa</con:value></con:property><con:property><con:name>cs</con:name><con:value>1B44fE3b0dCD4120ae875C90a661bd53</con:value></con:property><con:property><con:name>iSiteID</con:name><con:value>3</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Assertion" id="430d456a-4a22-4344-91ff-d070128efcc4"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>vStatus</con:name><con:value>200</con:value></con:property><con:property><con:name>strState</con:name><con:value>MN</con:value></con:property><con:property><con:name>iRestaurantID</con:name><con:value>657</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step 1 - Get Restaurant details by Ltd &amp; Lng" id="649b6c15-b7de-4875-aabf-a29dc6f41790"><con:settings/><con:config service="Get Location by LatLong" resourcePath="/BWWService.svc/GetRestaurntDetailsByltdLng" methodName="GetRestaurntDetailsByltdLng" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 1 - Get Restaurant details by Ltd &amp; Lng" id="0a020393-c029-45b5-ad26-770562e96d5c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByltdLng</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bd707660-4740-44d6-8f73-127d463d3a60" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6a1475e5-9af1-40c1-918c-66758d7c05bf" name="CORS"><con:configuration><scriptText>assert messageExchange.responseHeaders["Access-Control-Allow-Origin"] != null</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="fLatitude" value="${In-Properties#fLatitude}"/>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="fLongitude" value="${In-Properties#fLongitude}"/>
  <con:entry key="radius" value="${In-Properties#radius}"/>
</con:parameters><con:parameterOrder><con:entry>fLatitude</con:entry><con:entry>fLongitude</con:entry><con:entry>radius</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 2 - Get Restaurant details by Country" id="3d615fa7-43c7-4acb-ad38-04dccadbdad2"><con:settings/><con:config service="Get Location by Country" resourcePath="/BWWService.svc/GetRestaurantDetailsByCountry" methodName="GetRestaurantDetailsByCountry" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 2 - Get Restaurant details by Country" id="5e338f1a-eca9-4fe5-9228-d4e85dbc308b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByCountry</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="da7eeb50-fc5c-41c2-9151-13d37c063c27" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="3e46e359-7b9b-405f-ad3f-a299478530a6" name="Contains"><con:configuration><token>${Assertion#strState}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="strCountry" value="${In-Properties#strCountry}"/>
</con:parameters><con:parameterOrder><con:entry>strCountry</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 3 - Get Restaurant details by RestaurantID" id="0f78be20-8ca2-436f-914a-9fa261b627d1"><con:settings/><con:config service="Get Location by RestaurantID" resourcePath="/BWWService.svc/GetRestaurntDetailsByID" methodName="GetRestaurntDetailsByID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 3 - Get Restaurant details by RestaurantID" id="06a5f15e-6d27-4210-97b4-01f2e7937241" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByID</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="61b3b56f-c50e-4667-a369-0b973dd0820e" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iSiteID" value="${In-Properties#iSiteID}"/>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="iRestaurantID" value="${In-Properties#iRestaurantID}"/>
</con:parameters><con:parameterOrder><con:entry>iVendorID</con:entry><con:entry>iSiteID</con:entry><con:entry>iRestaurantID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 4 - Get Restaurant details by State" id="9d45daa7-0033-42ff-848f-c38e885feaee"><con:settings/><con:config service="Get Location by State" resourcePath="/BWWService.svc/GetRestaurantDetailsByState" methodName="GetRestaurantDetailsByState" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 4 - Get Restaurant details by State" id="80f926de-1522-4028-b0bf-3652b15caa30" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByState</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="40977bef-12c2-4664-bf2b-07f11d7e8ef6" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0ba09c86-cc1e-446c-b944-dc7aa326feaa" name="Contains StateCode"><con:configuration><token>${Assertion#strState}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="strState" value="${In-Properties#strState}"/>
</con:parameters><con:parameterOrder><con:entry>strState</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 5 - Get MenuItem details by RestaurantID" id="6fec42be-8811-402e-9e4d-0607d81a5017"><con:settings/><con:config service="Get MenuItem by RestaurantID" resourcePath="/BWWService.svc/GetMenuItemDetailsByRestaurantID" methodName="GetMenuItemDetailsByRestaurantID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 5 - Get MenuItem details by RestaurantID" id="02fc1f3b-e6bd-42fe-ab33-ad7461917b2f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetMenuItemDetailsByRestaurantID</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133b7969-d76f-4f1e-9925-11c95277be4e" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="iRestaurantID" value="${In-Properties#iRestaurantID}"/>
</con:parameters><con:parameterOrder><con:entry>iRestaurantID</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>EndPoint</con:name><con:value>https://api-location-vanilla.cloudhub.io</con:value></con:property><con:property><con:name>user</con:name><con:value>svc_loc_BdubsPortal</con:value></con:property><con:property><con:name>password</con:name><con:value>yOgUy9fbmyaefYaARqK1</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="b22fc651-7435-4140-8bc3-7d78d2efe91b" name="REGRESSION on SustainEnv"><con:description>TestSuite generated for REST Service [Get Location by LatLong]</con:description><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="329a88cf-f467-40fb-9e9f-13044a9186c1" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GET_LOCATION" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>TestCase generated for REST Resource [GetRestaurntDetailsByltdLng] located at [/BWWService.svc/GetRestaurntDetailsByltdLng]</con:description><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="In-Properties" id="53400493-718f-41c1-871e-dd3bc2d075b2"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>iVendorID</con:name><con:value>50</con:value></con:property><con:property><con:name>fLatitude</con:name><con:value>45.1243266</con:value></con:property><con:property><con:name>fLongitude</con:name><con:value>-93.3337207999999</con:value></con:property><con:property><con:name>radius</con:name><con:value>10</con:value></con:property><con:property><con:name>strCountry</con:name><con:value>United States</con:value></con:property><con:property><con:name>iRestaurantID</con:name><con:value>55</con:value></con:property><con:property><con:name>strState</con:name><con:value>MN</con:value></con:property><con:property><con:name>cid</con:name><con:value>57c03047947c4818a12f255137750325</con:value></con:property><con:property><con:name>cs</con:name><con:value>de0e43AD89264527A86B544dCDDB101d</con:value></con:property><con:property><con:name>iSiteID</con:name><con:value>35</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Assertion" id="ebc9e10d-b9e4-4571-ae10-518a063c896f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>vStatus</con:name><con:value>200</con:value></con:property><con:property><con:name>strState</con:name><con:value>MN</con:value></con:property><con:property><con:name>iRestaurantID</con:name><con:value>657</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step 1 - Get Restaurant details by Ltd &amp; Lng" id="83e95146-cee2-4802-94ea-59d13bc689cd"><con:settings/><con:config service="Get Location by LatLong" resourcePath="/BWWService.svc/GetRestaurntDetailsByltdLng" methodName="GetRestaurntDetailsByltdLng" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 1 - Get Restaurant details by Ltd &amp; Lng" id="0a020393-c029-45b5-ad26-770562e96d5c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByltdLng</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bd707660-4740-44d6-8f73-127d463d3a60" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6a1475e5-9af1-40c1-918c-66758d7c05bf" name="CORS"><con:configuration><scriptText>assert messageExchange.responseHeaders["Access-Control-Allow-Origin"] != null</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="fLatitude" value="${In-Properties#fLatitude}"/>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="fLongitude" value="${In-Properties#fLongitude}"/>
  <con:entry key="radius" value="${In-Properties#radius}"/>
</con:parameters><con:parameterOrder><con:entry>fLatitude</con:entry><con:entry>fLongitude</con:entry><con:entry>radius</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 2 - Get Restaurant details by Country" id="a1e8f438-7b57-477f-bf4c-784b8d2cfc68"><con:settings/><con:config service="Get Location by Country" resourcePath="/BWWService.svc/GetRestaurantDetailsByCountry" methodName="GetRestaurantDetailsByCountry" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 2 - Get Restaurant details by Country" id="5e338f1a-eca9-4fe5-9228-d4e85dbc308b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByCountry</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="da7eeb50-fc5c-41c2-9151-13d37c063c27" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="3e46e359-7b9b-405f-ad3f-a299478530a6" name="Contains"><con:configuration><token>${Assertion#strState}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="strCountry" value="${In-Properties#strCountry}"/>
</con:parameters><con:parameterOrder><con:entry>strCountry</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 3 - Get Restaurant details by RestaurantID" id="d7b9fc09-1ee8-4f4f-8278-08e7fc595d04"><con:settings/><con:config service="Get Location by RestaurantID" resourcePath="/BWWService.svc/GetRestaurntDetailsByID" methodName="GetRestaurntDetailsByID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 3 - Get Restaurant details by RestaurantID" id="06a5f15e-6d27-4210-97b4-01f2e7937241" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByID</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="61b3b56f-c50e-4667-a369-0b973dd0820e" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iSiteID" value="${In-Properties#iSiteID}"/>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="iRestaurantID" value="${In-Properties#iRestaurantID}"/>
</con:parameters><con:parameterOrder><con:entry>iVendorID</con:entry><con:entry>iSiteID</con:entry><con:entry>iRestaurantID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 4 - Get Restaurant details by State" id="abc2386c-f68a-4f4e-8c65-8cd3795f0d6d"><con:settings/><con:config service="Get Location by State" resourcePath="/BWWService.svc/GetRestaurantDetailsByState" methodName="GetRestaurantDetailsByState" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 4 - Get Restaurant details by State" id="80f926de-1522-4028-b0bf-3652b15caa30" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByState</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="40977bef-12c2-4664-bf2b-07f11d7e8ef6" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0ba09c86-cc1e-446c-b944-dc7aa326feaa" name="Contains StateCode"><con:configuration><token>${Assertion#strState}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="strState" value="${In-Properties#strState}"/>
</con:parameters><con:parameterOrder><con:entry>strState</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 5 - Get MenuItem details by RestaurantID" id="7315df5d-5b48-4e95-bc4a-af020f2500aa"><con:settings/><con:config service="Get MenuItem by RestaurantID" resourcePath="/BWWService.svc/GetMenuItemDetailsByRestaurantID" methodName="GetMenuItemDetailsByRestaurantID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 5 - Get MenuItem details by RestaurantID" id="02fc1f3b-e6bd-42fe-ab33-ad7461917b2f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetMenuItemDetailsByRestaurantID</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133b7969-d76f-4f1e-9925-11c95277be4e" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="iRestaurantID" value="${In-Properties#iRestaurantID}"/>
</con:parameters><con:parameterOrder><con:entry>iRestaurantID</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>EndPoint</con:name><con:value>https://bdubslocationapi-perftest.cloudhub.io</con:value></con:property><con:property><con:name>user</con:name><con:value>svc_loc_BdubsPortal</con:value></con:property><con:property><con:name>password</con:name><con:value>yOgUy9fbmyaefYaARqK1</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="4559b782-b5c3-4c26-b188-75d5176fd0a9" name="REGRESSION on QA"><con:description>TestSuite generated for REST Service [Get Location by LatLong]</con:description><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="95e721e7-df61-4cf4-ba3d-83c906c4e35b" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GET_LOCATION" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>TestCase generated for REST Resource [GetRestaurntDetailsByltdLng] located at [/BWWService.svc/GetRestaurntDetailsByltdLng]</con:description><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="In-Properties" id="2c8a4009-3ba5-4c57-94d0-bf1f0592e578"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>iVendorID</con:name><con:value>50</con:value></con:property><con:property><con:name>fLatitude</con:name><con:value>44.949073</con:value></con:property><con:property><con:name>fLongitude</con:name><con:value>-93.317692</con:value></con:property><con:property><con:name>radius</con:name><con:value>50</con:value></con:property><con:property><con:name>strCountry</con:name><con:value>United States</con:value></con:property><con:property><con:name>iRestaurantID</con:name><con:value>1</con:value></con:property><con:property><con:name>strState</con:name><con:value>MN</con:value></con:property><con:property><con:name>cid</con:name><con:value>0f03454cab5047689b72771fb86bf2fc</con:value></con:property><con:property><con:name>cs</con:name><con:value>33fab6Bd11794EcA912faCd348933cbF</con:value></con:property><con:property><con:name>iSiteID</con:name><con:value>3</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Assertion" id="634c6fe5-a82f-4ac9-aff3-7f81b05658d7"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>vStatus</con:name><con:value>200</con:value></con:property><con:property><con:name>strState</con:name><con:value>MN</con:value></con:property><con:property><con:name>iRestaurantID</con:name><con:value>657</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step 1 - Get Restaurant details by Ltd &amp; Lng" id="99595ed3-0fcc-422c-a11f-f7930f4352cf"><con:settings/><con:config service="Get Location by LatLong" resourcePath="/BWWService.svc/GetRestaurntDetailsByltdLng" methodName="GetRestaurntDetailsByltdLng" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 1 - Get Restaurant details by Ltd &amp; Lng" id="0a020393-c029-45b5-ad26-770562e96d5c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByltdLng</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bd707660-4740-44d6-8f73-127d463d3a60" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6a1475e5-9af1-40c1-918c-66758d7c05bf" name="CORS"><con:configuration><scriptText>assert messageExchange.responseHeaders["Access-Control-Allow-Origin"] != null</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="fLatitude" value="${In-Properties#fLatitude}"/>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="radius" value="${In-Properties#radius}"/>
  <con:entry key="fLongitude" value="${In-Properties#fLongitude}"/>
</con:parameters><con:parameterOrder><con:entry>fLatitude</con:entry><con:entry>fLongitude</con:entry><con:entry>radius</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 2 - Get Restaurant details by Country" id="b6d7f99c-5b2c-4e9f-8586-ded0ba70987f"><con:settings/><con:config service="Get Location by Country" resourcePath="/BWWService.svc/GetRestaurantDetailsByCountry" methodName="GetRestaurantDetailsByCountry" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 2 - Get Restaurant details by Country" id="5e338f1a-eca9-4fe5-9228-d4e85dbc308b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByCountry</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="da7eeb50-fc5c-41c2-9151-13d37c063c27" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="3e46e359-7b9b-405f-ad3f-a299478530a6" name="Contains"><con:configuration><token>${Assertion#strState}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="strCountry" value="${In-Properties#strCountry}"/>
</con:parameters><con:parameterOrder><con:entry>strCountry</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 3 - Get Restaurant details by RestaurantID" id="86f247a5-56be-4a40-8be1-7ad69a1c2dbd"><con:settings/><con:config service="Get Location by RestaurantID" resourcePath="/BWWService.svc/GetRestaurntDetailsByID" methodName="GetRestaurntDetailsByID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 3 - Get Restaurant details by RestaurantID" id="06a5f15e-6d27-4210-97b4-01f2e7937241" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByID</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="61b3b56f-c50e-4667-a369-0b973dd0820e" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iSiteID" value="${In-Properties#iSiteID}"/>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="iRestaurantID" value="${In-Properties#iRestaurantID}"/>
</con:parameters><con:parameterOrder><con:entry>iVendorID</con:entry><con:entry>iSiteID</con:entry><con:entry>iRestaurantID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 4 - Get Restaurant details by State" id="1d3d8278-8fde-4bd4-880e-28a412b73401"><con:settings/><con:config service="Get Location by State" resourcePath="/BWWService.svc/GetRestaurantDetailsByState" methodName="GetRestaurantDetailsByState" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 4 - Get Restaurant details by State" id="80f926de-1522-4028-b0bf-3652b15caa30" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByState</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="40977bef-12c2-4664-bf2b-07f11d7e8ef6" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0ba09c86-cc1e-446c-b944-dc7aa326feaa" name="Contains StateCode"><con:configuration><token>${Assertion#strState}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="strState" value="${In-Properties#strState}"/>
</con:parameters><con:parameterOrder><con:entry>strState</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 5 - Get MenuItem details by RestaurantID" id="48c33485-06c5-4d6a-8325-025e9f45745a"><con:settings/><con:config service="Get MenuItem by RestaurantID" resourcePath="/BWWService.svc/GetMenuItemDetailsByRestaurantID" methodName="GetMenuItemDetailsByRestaurantID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 5 - Get MenuItem details by RestaurantID" id="02fc1f3b-e6bd-42fe-ab33-ad7461917b2f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetMenuItemDetailsByRestaurantID</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133b7969-d76f-4f1e-9925-11c95277be4e" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="iRestaurantID" value="${In-Properties#iRestaurantID}"/>
</con:parameters><con:parameterOrder><con:entry>iRestaurantID</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>EndPoint</con:name><con:value>https://bww-locationapi-chtest.cloudhub.io</con:value></con:property><con:property><con:name>user</con:name><con:value>svc_loc_BdubsPortal</con:value></con:property><con:property><con:name>password</con:name><con:value>yOgUy9fbmyaefYaARqK1</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:savedRecentRuns>1</con:savedRecentRuns><con:testSuite id="38d079a6-c77d-4bea-a768-95135fd4d17b" name="REGRESSION Superbowl on Stage"><con:description>TestSuite generated for REST Service [Get Location by LatLong]</con:description><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="917805c3-96e3-4bf6-94d7-99c3f4d26d48" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GET_LOCATION" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>TestCase generated for REST Resource [GetRestaurntDetailsByltdLng] located at [/BWWService.svc/GetRestaurntDetailsByltdLng]</con:description><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="In-Properties" id="e08bb7e2-0a27-4608-9ca1-8512e035dea8"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>iVendorID</con:name><con:value>50</con:value></con:property><con:property><con:name>fLatitude</con:name><con:value>44.9778</con:value></con:property><con:property><con:name>fLongitude</con:name><con:value>-93.2650</con:value></con:property><con:property><con:name>radius</con:name><con:value>50</con:value></con:property><con:property><con:name>strCountry</con:name><con:value>United States</con:value></con:property><con:property><con:name>iRestaurantID</con:name><con:value>45</con:value></con:property><con:property><con:name>strState</con:name><con:value>MN</con:value></con:property><con:property><con:name>cid</con:name><con:value>e61af77efc1e4477bf8b83ade31901b5</con:value></con:property><con:property><con:name>cs</con:name><con:value>b412815427554a96ADBc8Cd2af6C368f</con:value></con:property><con:property><con:name>iSiteID</con:name><con:value>3</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Assertion" id="6a27f4aa-55b0-44a5-b8cd-42e28d951875"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>vStatus</con:name><con:value>200</con:value></con:property><con:property><con:name>strState</con:name><con:value>MN</con:value></con:property><con:property><con:name>iRestaurantID</con:name><con:value>21</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step 1 - Get Restaurant details by Ltd &amp; Lng" id="d7da8e59-37e2-427e-acd4-ec079f1ca0ed"><con:settings/><con:config service="Get Location by LatLong" resourcePath="/BWWService.svc/GetRestaurntDetailsByltdLng" methodName="GetRestaurntDetailsByltdLng" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 1 - Get Restaurant details by Ltd &amp; Lng" id="0a020393-c029-45b5-ad26-770562e96d5c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByltdLng</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bd707660-4740-44d6-8f73-127d463d3a60" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e4fe0d8b-9f36-49bc-b9ab-b9337dbbd6e0" name="CORS"><con:configuration><scriptText>assert messageExchange.responseHeaders["Access-Control-Allow-Origin"] != null</scriptText></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="1ad44370-c9fc-495d-9b4a-e0bb2f77cfa8" name="JsonPath Count"><con:configuration><path>$[*]['SiteId']</path><content>20</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="fLatitude" value="${In-Properties#fLatitude}"/>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="fLongitude" value="${In-Properties#fLongitude}"/>
  <con:entry key="radius" value="${In-Properties#radius}"/>
</con:parameters><con:parameterOrder><con:entry>fLatitude</con:entry><con:entry>fLongitude</con:entry><con:entry>radius</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 2 - Get Restaurant details by Country" id="aa0af90b-7d4f-4e5f-875d-f3f32ea05a07"><con:settings/><con:config service="Get Location by Country" resourcePath="/BWWService.svc/GetRestaurantDetailsByCountry" methodName="GetRestaurantDetailsByCountry" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 2 - Get Restaurant details by Country" id="5e338f1a-eca9-4fe5-9228-d4e85dbc308b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByCountry</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="da7eeb50-fc5c-41c2-9151-13d37c063c27" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="3e46e359-7b9b-405f-ad3f-a299478530a6" name="Contains"><con:configuration><token>${Assertion#United States}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="strCountry" value="${In-Properties#strCountry}"/>
</con:parameters><con:parameterOrder><con:entry>strCountry</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 3 - Get Restaurant details by RestaurantID" id="1d803cd4-074e-44ca-a8d1-f2379fcb0014"><con:settings/><con:config service="Get Location by RestaurantID" resourcePath="/BWWService.svc/GetRestaurntDetailsByID" methodName="GetRestaurntDetailsByID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 3 - Get Restaurant details by RestaurantID" id="06a5f15e-6d27-4210-97b4-01f2e7937241" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurntDetailsByID</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="61b3b56f-c50e-4667-a369-0b973dd0820e" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="4ed64b01-348d-4796-8ada-c792a74d4f40" name="JsonPath Count"><con:configuration><path>$[*]['SiteId']</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iSiteID" value="${In-Properties#iSiteID}"/>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="iRestaurantID" value="${In-Properties#iRestaurantID}"/>
</con:parameters><con:parameterOrder><con:entry>iVendorID</con:entry><con:entry>iSiteID</con:entry><con:entry>iRestaurantID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 4 - Get Restaurant details by State" id="41faee73-ee3e-4027-a5f1-23750c6ce256"><con:settings/><con:config service="Get Location by State" resourcePath="/BWWService.svc/GetRestaurantDetailsByState" methodName="GetRestaurantDetailsByState" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 4 - Get Restaurant details by State" id="80f926de-1522-4028-b0bf-3652b15caa30" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetRestaurantDetailsByState</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="40977bef-12c2-4664-bf2b-07f11d7e8ef6" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0ba09c86-cc1e-446c-b944-dc7aa326feaa" name="Contains StateCode"><con:configuration><token>${Assertion#strState}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="${In-Properties#iVendorID}"/>
  <con:entry key="strState" value="${In-Properties#strState}"/>
</con:parameters><con:parameterOrder><con:entry>strState</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step 5 - Get MenuItem details by RestaurantID" id="f3b4b720-9f54-431b-a82a-06455e0643ce"><con:settings/><con:config service="Get MenuItem by RestaurantID" resourcePath="/BWWService.svc/GetMenuItemDetailsByRestaurantID" methodName="GetMenuItemDetailsByRestaurantID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step 5 - Get MenuItem details by RestaurantID" id="02fc1f3b-e6bd-42fe-ab33-ad7461917b2f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${In-Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${In-Properties#cs}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://bdubslocationapi-perftest.cloudhub.io/BWWService.svc/GetMenuItemDetailsByRestaurantID</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="133b7969-d76f-4f1e-9925-11c95277be4e" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>${Assertion#vStatus}</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="14085e5a-b2a7-401f-bf8f-7652d71a8ef2" name="Contains"><con:configuration><token>${Assertion#iRestaurantID}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="d97c78cd-0c16-4c8c-956e-906a6d9406ab" name="JsonPath Count"><con:configuration><path>$[*]['CommonMenuName']</path><content>220</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username>${#TestSuite#user}</con:username><con:password>${#TestSuite#password}</con:password><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="iVendorID" value="10"/>
  <con:entry key="iRestaurantID" value="292"/>
</con:parameters><con:parameterOrder><con:entry>iRestaurantID</con:entry><con:entry>iVendorID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>EndPoint</con:name><con:value>https://bww-location-superbowl-stage.us-e1.cloudhub.io</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:requirements/><con:properties/><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:authRepository/><con:tags/></con:soapui-project>