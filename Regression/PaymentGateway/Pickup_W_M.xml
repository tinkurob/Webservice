<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="af6b34e3-dfc7-420e-a8ce-bfc9188bb5b4" activeEnvironment="Default" name="Webservice-Pickup_W_M" lastOpened="2018-10-05T15:38:33.424+05:30" resourceRoot="" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="2c45219b-0374-4ec8-91db-83a3a523e757" wadlVersion="http://wadl.dev.java.net/2009/02" name="CreateTransaction-Pickup" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://bww-pickuporder-api-chtest.cloudhub.io</con:endpoint></con:endpoints><con:resource name="CreateTransactionPickup" path="/FP/v1/Transactions/Create/{SiteID}" id="2e2d1211-7ba1-46f6-b44f-972430d02d41"><con:settings/><con:parameters><con:parameter><con:name>SiteID</con:name><con:value>SiteID</con:value><con:style>TEMPLATE</con:style><con:default>SiteID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="CreateTransactionPickup" id="61451a8c-47a7-464a-ad12-95edff4a53e7" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:ns="https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5">ns:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 500</con:status><con:params/><con:element xmlns:ns="https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5">ns:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>504</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="dfdbd245cb7746229f51d39f40efbffa"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="1B44fE3b0dCD4120ae875C90a661bd53"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://bww-pickuporder-api-chtest.cloudhub.io</con:endpoint><con:request>{
                "TransactionTotal": 2.15
}
</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="7" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="02d33f27-e6ed-45d2-93b8-3a0eb8ca4ec3" wadlVersion="http://wadl.dev.java.net/2009/02" name="PickUpPUTOrder" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://bww-pickuporder-api-chtest.cloudhub.io</con:endpoint></con:endpoints><con:resource name="PutOrder" path="/AOO/v1/PickupOrders/{siteId}" id="a8db52ef-0430-4ab4-b595-507bf04159aa"><con:settings/><con:parameters><con:parameter><con:name>siteId</con:name><con:value>siteId</con:value><con:style>TEMPLATE</con:style><con:default>siteId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>verbose</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PutOrder" id="3f55fb29-e2b9-4073-ba39-c4cd24e993b5" method="PUT"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:ns="https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5">ns:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5">ns:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>406 400 500</con:status><con:params/><con:element xmlns:ns="https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5">ns:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>504</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="dfdbd245cb7746229f51d39f40efbffa"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="1B44fE3b0dCD4120ae875C90a661bd53"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://bww-pickuporder-api-chtest.cloudhub.io</con:endpoint><con:request>{
   "SiteId": 7,
   "MenuId": 0,
   "PromiseDateTime": "2018-01-03T13:00:02.1434103-06:00",
   "LineItems": [   {
      "ItemLineNumber": 1,
      "SalesItemId": 3012,
      "MenuItemId": 1737,
      "RecipientName": "Test QA",
      "Quantity": 1,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "68bd02ae-a5fb-4e18-96b0-b2ae85c3802c",
      "EMail": "st2@buffalowildwings.com",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 8
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="siteId" value="7"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="93c16eb0-69ef-4a55-9120-b0b585594c62" wadlVersion="http://wadl.dev.java.net/2009/02" name="PickUpPostOrder" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://bww-pickuporder-api-chtest.cloudhub.io</con:endpoint></con:endpoints><con:resource name="PickupPostOrder" path="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" id="8a056880-2512-4d5f-a3e9-7302065e9ed4"><con:settings/><con:parameters><con:parameter><con:name>siteId</con:name><con:value>siteId</con:value><con:style>TEMPLATE</con:style><con:default>siteId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>orderId</con:name><con:value>orderId</con:value><con:style>TEMPLATE</con:style><con:default>orderId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>customerId</con:name><con:value>customerId</con:value><con:style>TEMPLATE</con:style><con:default>customerId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>forceATODeposit</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PickupPostOrder" id="58a67b71-810d-4633-a401-e6e9e4c07f72" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:bd0="https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c">bd0:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>500 400 404 403</con:status><con:params/><con:element xmlns:bd0="https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c">bd0:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:bd0="https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c">bd0:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="dfdbd245cb7746229f51d39f40efbffa"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="1B44fE3b0dCD4120ae875C90a661bd53"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://bww-pickuporder-api-chtest.cloudhub.io</con:endpoint><con:request>{
  "TransactionId": "7e57bca5-bfe1-467a-80b1-477e3b46a885",
  "RestaurantTip":1,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="322"/>
  <con:entry key="customerId" value="68bd02ae-a5fb-4e18-96b0-b2ae85c3802c"/>
  <con:entry key="siteId" value="7"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="bb8cd044-e9b5-4c39-a83b-2a408a66dc7d" wadlVersion="http://wadl.dev.java.net/2009/02" name="TransactionStatus" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://payments.uat.freedompay.com</con:endpoint></con:endpoints><con:resource name="GetTransaction" path="/CheckoutService/CheckoutService.svc/GetTransaction" id="51fdfdaa-ac1c-49f7-806d-ec3115bb7e04"><con:settings/><con:parameters/><con:method name="TransactionStatus" id="d98db4c6-70a2-463e-86e9-fb4f4b2bc182" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:get="https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction">get:Response</con:element></con:representation><con:request name="Request 1" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"3ed9f21b-6899-4eee-a587-654d5ac4bdb7"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="1ddcd3e6-dda3-4ab5-9d00-aa437e25b98c" wadlVersion="http://wadl.dev.java.net/2009/02" name="VoidCapture" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://cs.uat.freedompay.com</con:endpoint></con:endpoints><con:resource name="VoidCapture" path="/Freeway/Service.asmx" id="c32d3b53-7807-4b44-8489-4ed7f68c6419"><con:settings/><con:parameters/><con:method name="Service.asmx" id="e05ae845-f649-4d58-9597-0af99c56101a" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/xml; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">soapenv:Envelope</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>text/xml</con:mediaType><con:params/><con:element xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">soapenv:Envelope</con:element></con:representation><con:request name="Request 1" id="bef45da5-dac1-4071-a417-80ae0bd9f879" mediaType="text/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://cs.uat.freedompay.com</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <soap:Body>
      <Submit xmlns="http://freeway.freedompay.com/">
         <request>
            <storeId>1413329017</storeId>
            <terminalId>2413148015</terminalId>
            <comments>7.03 Restaurant, eCommerce, Moto Follow on Void (Full)</comments>
            <orderRequestID>01Z6FUOQL001U624E1UTDSKKU15UJIGZ</orderRequestID>
            <voidService run="true" />
         </request>
      </Submit>
   </soap:Body>
</soap:Envelope>]]></con:request><con:originalUri>https://cs.uat.freedompay.com/Freeway/Service.asmx</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="84b9d870-f6f0-44c0-8e28-3972120b3649" name="PickupOrder_Scenarios-PayAtSite-STAGE"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="90b14762-1928-423e-ac66-d237a061e47b" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-SingleItem" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="e4d03c72-65ed-4471-95c9-ee9b0c52c2f5"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.12</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="0855c7f8-545a-4196-83e5-270a5f0f1d0f"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
      "ItemLineNumber": 1,
      "SalesItemId": 2888,
	 "MenuItemId": 1674,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d49d1f6-fb92-4b19-b62c-0312f4ee2153" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderId"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8041f5c0-6c66-464c-812d-7d8c5c884293" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e8b8bcd0-7f75-4f81-b46a-b11ef127f014" name="PromiseTime"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="b100c114-c056-4ba8-b00e-5a0ec8219ea1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="0150e0d5-cce0-42c7-8647-7998d7307049"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="92595f74-1c9a-42cc-8287-8d832fe2c07b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>8.72</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.12</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>9.84</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19128</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="2f649981-1b9c-4553-8753-b222f0cbb68a"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f1c376d-cb48-4981-9b81-d0796751347f" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55537256-0ced-44b3-98e7-e4ee992b3b1c" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fd8dc8ff-f114-45c6-8fd6-7be722f5e352" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4137a564-7085-45ae-a36d-6c9eb0062dc9" name="OrderAmountMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7afe52ad-62a1-4825-baf5-013422b2b4eb" name="PromiseTimeValidation"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="182c4445-e62c-47da-a591-6a586a0a9aab" name="SiteIdValidation"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="6b197b54-369c-4991-b9b0-7a07fc2ca70a"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="3f64f1fd-0927-44c4-a9ec-5ed4ba5de5e6" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-ItemWithModifier" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="8a27d190-5dc1-49b6-80ec-4b9a8d17c36a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.12</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="ae6416ba-2b49-4f61-91e1-959e81c12187"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Item with modifiers",
			"ItemLineNumber": 1,
			"SalesItemId": 3791,
			"MenuItemId": 2098,
			"Name": "Traditional Small (Approx. 9)",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12563,
				"SalesItemOptionId": 17171,
				"Quantity": 1,
				"Name": "Sweet BBQ",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     }]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d49d1f6-fb92-4b19-b62c-0312f4ee2153" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderId"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8041f5c0-6c66-464c-812d-7d8c5c884293" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c32e5ce2-0abd-4519-b885-c121559b6959" name="PromiseTime"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="258a1c8b-a36b-4528-97a2-6f82fb1c655f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="e861391e-24bf-40b0-99b5-f2f3c1fd37c6"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="9062d3bc-5225-4e88-8490-7c9832bbac61"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>12.98</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.12</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>14.10</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19129</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="aa3976bd-f1ed-48be-b975-725ae8d7aa22"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f1c376d-cb48-4981-9b81-d0796751347f" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55537256-0ced-44b3-98e7-e4ee992b3b1c" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7c150d1a-98b0-4e8c-98ee-eb6b72ac662f" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8425d1ad-2cf6-42f5-9e31-84fff555a65d" name="OrderAmountMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="62891001-90f5-43ea-91a0-a025bc8e168c" name="PromiseTimeValidation"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="2a0a65dd-8215-4631-947b-bbbc6d8c903f"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="69bc1e7f-b3c3-4314-9955-32374a0924a0" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-ItemsAndItemsWithoutModifiers" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="afa15217-e80d-46d3-ac9e-7da5d6f74d8c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.12</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="3cda0eeb-67a1-4339-97cb-a53a4b655365"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Item without modifiers",
			"ItemLineNumber": 1,
			"SalesItemId": 2888,
			"MenuItemId": 1674,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": []
		},
		{
		    "_comment": "Item with modifiers",
		     "ItemLineNumber": 4,
			"SalesItemId": 3791,
			"MenuItemId": 2098,
			"Name": "Traditional Small (Approx. 9)",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12563,
				"SalesItemOptionId": 17171,
				"Quantity": 1,
				"Name": "Sweet BBQ",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     }]
		}
		],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d49d1f6-fb92-4b19-b62c-0312f4ee2153" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderId"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8041f5c0-6c66-464c-812d-7d8c5c884293" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85d3f6b4-089b-4e4d-8f30-3598cec25d3f" name="PromiseTime"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="bd7bf062-f4e1-453e-8461-d2b3f03a8e3b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="d9a8c3e7-cec9-4c1d-9272-c3b0e7efdc77"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="a319058b-1b24-4f65-ac72-76a9c900c686"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>17.34</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.12</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>18.46</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19130</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="7481490a-ecdb-4073-a8e8-7ad802755a1e"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f1c376d-cb48-4981-9b81-d0796751347f" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55537256-0ced-44b3-98e7-e4ee992b3b1c" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eed7916c-7741-4b7d-81f9-43dc62487077" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1de2231c-73e8-4369-a057-7eb44d4c1b0e" name="PromiseTimeValidation"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7f96eddc-81f3-4840-a796-4bb304349d72" name="OrderAmountMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="34200fa6-cc45-456e-9787-9cfeb41fc8df"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="452bbfc8-fb45-40c5-abc2-858c37d4ae95" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-86edItems" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="6aea00d2-6202-4d8a-ae08-6cbf1a78533e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="afda8ff8-4388-44f4-9a35-a52e7edd3b4a"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "86ed Item",
			"ItemLineNumber": 1,
			"SalesItemId": 3666,
			"MenuItemId": 2150,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": []
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d49d1f6-fb92-4b19-b62c-0312f4ee2153" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderId"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8041f5c0-6c66-464c-812d-7d8c5c884293" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b7bd32c-cdfb-4afe-80bc-dd27c41323d8" name="PromiseTime"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="a5b66940-139a-408e-89ba-b8d964286f8c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="307c1287-0514-4a38-9100-099d8b767c91"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="1fbe0603-3cab-498b-bb9f-352a0098cbfb"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>4.19</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>5.71</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19131</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="6af9f089-beae-4d76-8ec7-cb390905632b"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f1c376d-cb48-4981-9b81-d0796751347f" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55537256-0ced-44b3-98e7-e4ee992b3b1c" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bdad3052-06aa-4830-80e1-0d7b9c129582" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="73ea9eef-dd79-4224-8ce4-6855d959e652" name="OrderAmountMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2bde536-737c-4d85-b509-af65c0446128" name="PromiseTimeValidation"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="27fa5954-904f-4def-b4c5-26075e08094f"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="8c1b8340-95e2-4978-b630-4f163d0f0743" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-86edModifiers" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="fca64731-1900-4e67-9497-2906d560b927"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="0a1c683d-f8e6-4dc9-ac0e-7e0e1cfe2397"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
   	 "_comment": "Item with 86ed modifiers",
      "ItemLineNumber": 1,
      "SalesItemId": 2896,
	 "MenuItemId": 2421,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [{
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d49d1f6-fb92-4b19-b62c-0312f4ee2153" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderId"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8041f5c0-6c66-464c-812d-7d8c5c884293" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a46c846-d4af-44fc-b7d7-a866155c3644" name="PromiseTime"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="3e9d83d8-cf67-4397-8531-9af5653ccbf2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="04d2b064-020f-47ed-b0e7-b0ee155eab67"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="50ade402-63ab-4d6d-879e-a1efcad9810b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>2.0</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>3.52</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19132</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="0c3c7aca-068a-4901-80ee-124762116ffc"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f1c376d-cb48-4981-9b81-d0796751347f" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55537256-0ced-44b3-98e7-e4ee992b3b1c" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="facd911f-f013-49e2-9a23-b8a092c57659" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="abd17051-499c-4686-bd31-fd0185414fcc" name="PromiseTimeValidation"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="97fd84b4-ad3f-49c0-ad6b-fe8b6afd5679" name="OrderAmountMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="b45f10df-d9c2-449f-ac36-53e60fc83b23"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="46bb1940-e8be-4154-9c1c-7bda8a883d9e" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-DrinkItems" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="870832c3-15ad-40c5-9892-5deb5bac65f0"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="f725130d-c47a-488e-afac-bf57220b92e2"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Drink Item",
			"ItemLineNumber": 1,
			"SalesItemId": 4585,
			"MenuItemId": 2149,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": []
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d49d1f6-fb92-4b19-b62c-0312f4ee2153" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderId"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8041f5c0-6c66-464c-812d-7d8c5c884293" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ed356e39-42c1-4384-9179-88a9f87b81b2" name="PromiseTime"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="cca76a40-9b82-4596-8334-eb7bf2756228"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="a00f3a85-9b74-426d-8ffc-9587cb1c3210"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="9713013a-71d3-434d-b1cf-e04805bde9b5"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>3.32</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>4.84</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19133</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="68b95b43-64df-4094-8f2b-c24a3143e607"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f1c376d-cb48-4981-9b81-d0796751347f" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55537256-0ced-44b3-98e7-e4ee992b3b1c" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dcf919f2-1ff6-45ca-8a2f-f6aa22e878b1" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9128e214-7ab7-42eb-9e25-48dac64c5140" name="OrderAmountMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f071d17c-767c-4369-9d73-683250d164f8" name="PromiseTimeValidation"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="6690115d-f63f-4352-91c8-b1105f02c362"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="139937ce-3706-4a99-b84b-5e38abe81abc" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-FastbreakLunch" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="10a22e00-5f4e-44dc-9d07-ae24971f100a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="5dd59eb1-26e5-4998-bc79-264e126a7c51"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [  {
			"_comment": "Fastbreak Lunch Items",
			"ItemLineNumber": 1,
			"SalesItemId": 3119,
			"MenuItemId": 1813,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12551,
				"SalesItemOptionId": 20899,
				"Quantity": 1,
				"Name": "Honey BQQ",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 8599,
				"SalesItemOptionId": 4036,
				"Quantity": 1,
				"Name": "Souce on Side",
				"UnitPrice": 0.000,
				"Modifiers": []
			},
			{
				"ItemOptionGroupId": 8678,
				"SalesItemOptionId": 4099,
				"Quantity": 1,
				"Name": "Blue Chesse",
				"UnitPrice": 0.000,
				"Modifiers": []
			},
			{
				"ItemOptionGroupId": 13177,
				"SalesItemOptionId": 18978,
				"Quantity": 1,
				"Name": "Pota Wedges",
				"UnitPrice": 0.000,
				"Modifiers": [{
					"ItemOptionGroupId": 11513,
					"SalesItemOptionId": 14677,
					"Quantity": 1,
					"Name": "American Cheese",
					"UnitPrice": 0.6000,
					"Modifiers": []
				}]
			}]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d49d1f6-fb92-4b19-b62c-0312f4ee2153" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderId"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8041f5c0-6c66-464c-812d-7d8c5c884293" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1aa2ca0c-6b37-4778-be6f-aacf02f2894f" name="PromiseTime"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="89fe1f36-e979-4071-b6ea-044b26ae839a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="c5311328-f500-45fe-9d17-a3e8b8b71a24"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="7c0261e3-561e-41a4-963f-e63ce5faae33"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>11.03</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>12.55</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19134</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="05d2c078-f0f8-4c59-8e06-a421b3613ab8"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f1c376d-cb48-4981-9b81-d0796751347f" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55537256-0ced-44b3-98e7-e4ee992b3b1c" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="26e2bacc-41ff-4fea-87af-28fa1ca3aa36" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="95540c74-3e93-4b91-bbc1-a5c027ffd2a3" name="OrderAmountMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e02dff1e-411b-4677-bc5e-8dab5964c81a" name="PromiseTimeValidation"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="7cf93ff9-d8fe-4a03-a6ab-f9c8b6a805cd"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="6d6e4d1d-5e73-45e4-951a-52ceee108acd" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-KidsItems" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="79b4ee53-d22c-499d-8bbb-21a220e6eb54"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="2326510c-f899-4ed7-bfdd-8f18a980555d"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Kids Item",
			"ItemLineNumber": 1,
			"SalesItemId": 3403,
			"MenuItemId": 1066,
			"Name": "Mac &amp; chesse",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 11069,
				"SalesItemOptionId": 8220,
				"Quantity": 1,
				"Name": "French fries",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 9754,
				"SalesItemOptionId": 7884,
				"Quantity": 1,
				"Name": "Kid Milk",
				"UnitPrice": 0.000,
				"Modifiers": []
			}
			]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="276da52f-23a0-4281-9458-f78359eb0de4"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [ResultCode]" id="4a7de336-76eb-4394-8715-aec8875d51b4"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" name="OrderId" id="a8e33293-096d-4a72-a5d0-65e73e7a3259"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="HasFailedItemsContainCheck" id="0f96b14d-9523-439a-9948-acde6934961b"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="PromiseTime" id="81664919-53de-4274-b68c-b3e209e2c84a"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="33fcc4ea-6d51-4130-b2d5-904c273da1f2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="aa4b6c26-eaab-45ff-aefc-22877bbdb720"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="fe92b138-fba0-4d33-9c41-49d8b3467a6a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>6.08</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>7.60</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19135</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="3498bc38-1352-404d-a8b6-3158c12083c0"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="fb16ffd8-e84e-4e29-956c-571f660e9f39"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [ResultCode]" id="f9624789-effe-4d33-adec-29ca5dcc7e89"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="HasFailedItemsContainCheck" id="89e8b62d-495b-43dd-94de-2cdfea8b0f11"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="OrderIdCheckNMatchFromPutorder" id="403b981d-1589-4f95-a0d8-b1806216a80e"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="OrderAmountMatch" id="bcbd47f1-6f73-43b1-b6dc-2388e27526fd"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="PromiseTimeValidation" id="56b4c0f5-39b5-45fd-a2f4-1f29caccbdd7"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="547f05ed-aceb-4224-9a0b-ef2a9b5d381b"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="4bb26a60-c5c3-479f-9918-be74ebd9b5e3" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-NotContainMinModifier" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="1dae4b59-fbd9-47fc-9c7b-79ece651f0a8"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="7d7114d7-4713-444b-b401-b276a84855fa"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Kids Item with no minium required",
			"ItemLineNumber": 1,
			"SalesItemId": 3403,
			"MenuItemId": 1066,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": []
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>406</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6e668d8d-fc93-4f8a-9682-6374634d4f61" name="Item does not contain the minimum required modifiers"><con:configuration><token>Item does not contain the minimum required modifiers</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="4f45c448-5231-4108-bf62-53c97cbee88a"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="45e49c9e-82a8-435c-846b-cd5800178cce" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-OrderAmountOver$175" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="fe3f9120-53d8-42ed-a969-55b7b6835e71"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="1bb399f4-f56e-4288-8da8-6fed8269cc03"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Party Items",
			"ItemLineNumber": 1,
			"SalesItemId": 3870,
			"MenuItemId": 2129,
			"Name": "Party wings",
			"SpecialInstructions": "",
			"Quantity": 8,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 11974,
				"SalesItemOptionId": 14913,
				"Quantity": 1,
				"Name": "No Souce",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     }
			     ]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>406</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8d5fe772-25b2-44d8-8669-10a87248f9fc" name="Order total amount exceeds configured limits"><con:configuration><token>Order total amount exceeds configured limits</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="60455f84-766b-4dd8-9758-5b7d2ac64cc5"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="cce6112a-4a3c-434d-887a-082bfb4d4e53" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-PartyItems" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="7fee1116-b00a-4717-a896-202e054a82a3"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="1a0936fa-4016-4d23-8fa0-50a04947e09a"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [  {
			"_comment": "Party Items",
			"ItemLineNumber": 1,
			"SalesItemId": 3870,
			"MenuItemId": 2129,
			"Name": "Party wings",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 11974,
				"SalesItemOptionId": 14913,
				"Quantity": 1,
				"Name": "No Souce",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     }
			     ]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="ec973196-5b96-4705-81c1-dc63817c353b"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [ResultCode]" id="b6fcdb38-f324-40b1-b93e-25f2c40489a5"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" name="OrderId" id="5245440a-765a-437d-8a5b-e7e5c03330e6"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="HasFailedItemsContainCheck" id="198df213-36f5-44da-a3ac-dec91145606b"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="PromiseTime" id="e819f215-4046-4996-9eec-bedb8e790c19"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="c81f8ecc-66b0-4156-b12c-0ab7669242d8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="f04f1df7-adf7-492d-b608-3b2511ec4586"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="ab69a918-fc07-4b45-a2fc-747a26318888"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>34.49</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>36.01</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19138</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="edff2238-4ed0-47e2-94c4-c5e756053fbf"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="fb63a35a-cb38-4a59-9a05-6f5bb4bcbace"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [ResultCode]" id="457d7c28-a494-491b-97aa-a0fee4d3ff99"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="HasFailedItemsContainCheck" id="80d964ef-356a-448d-ac1d-03ab8f8681fb"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="OrderIdCheckNMatchFromPutorder" id="b9fc3b42-4b4f-4261-9abc-dbf9525d48fd"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="OrderAmountMatch" id="9804f00b-2b00-4db3-909f-1cdc6ab76b72"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="PromiseTimeValidation" id="0180e1e5-789b-4b1a-b131-3325247f235e"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="1b92652f-a746-4f8c-b911-81f31d411b48"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="7bafc42f-ae41-413d-83bc-4c0bd5c94465" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-TuesdayBOGO" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="971956c0-7521-42ca-b28d-240b7ab55029"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="07811b6a-afb2-4512-8821-ba4a7c25ab06"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [ {
			"_comment": "TuesdayBOGO",
			"ItemLineNumber": 1,
			"SalesItemId": 4076,
			"MenuItemId": 2200,
			"Name": "2 Boneless Small (Approx. 24 Total)",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12568,
				"SalesItemOptionId": 17313,
				"Quantity": 1,
				"Name": "Teriyaki",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 11686,
				"SalesItemOptionId": 13575,
				"Quantity": 1,
				"Name": "Blue Cheese",
				"UnitPrice": 0.6000,
				"Modifiers": []
			}
			]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4173fc6f-18d5-4f4d-be2e-f75b389fdb9f"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [ResultCode]" id="910efda6-bae5-4971-8b00-8ab9ae598c7a"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" name="OrderId" id="a6bb7afa-5bed-48c9-828a-035d6a0deb31"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="HasFailedItemsContainCheck" id="82beaef5-e796-44e6-bc64-e938e5ed63ef"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="PromiseTime" id="cd454abf-da19-4e15-9221-a9b9d00a7cd2"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="71b9a12d-2c46-4621-ad54-f226e78bece3"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="d1b49971-c493-4efc-9cb9-3d8943b321e8"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="bda42d8e-a86a-4677-a76c-4a74cb94573f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>12.41</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>13.93</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19140</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="28ebf1ad-16de-4954-a99a-08b8fe94f73b"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b0bf07f9-76fc-4cf8-8899-8bd864d143e2"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [ResultCode]" id="5c1d3e30-ad83-45fc-bcfa-04affd71dba4"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="HasFailedItemsContainCheck" id="c943f60f-52b9-4af7-8efb-327561c58820"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="OrderIdCheckNMatchFromPutorder" id="b8ebccb0-274d-4e89-ad8d-b1e728bf9cc7"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="OrderAmountMatch" id="6852a62f-df6a-4b28-b200-1f19f9652c8f"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="PromiseTimeValidation" id="9873065e-57fb-4837-b736-65bf5dfe536f"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="7422573f-4d11-40df-9c6c-58e5db055e1a"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="0fac9ffa-e112-4017-b633-deb907dbfea9" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-ThursdayWings" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="4a360c84-3384-46f3-a828-48f15653cb04"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="66b55399-4d0e-4689-bb95-db8c6cac3cb9"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [ {
			"_comment": "Thursday Boneless Wings",
			"ItemLineNumber": 1,
			"SalesItemId": 3700,
			"MenuItemId": 1986,
			"Name": "4 Boneless Wings",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12565,
				"SalesItemOptionId": 17170,
				"Quantity": 1,
				"Name": "Teriyaki",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 13755,
				"SalesItemOptionId": 20922,
				"Quantity": 1,
				"Name": "Ranch",
				"UnitPrice": 0.6000,
				"Modifiers": []
			}
			]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="bb73dc26-1bed-46e8-b23e-7d4b7fb46e24"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [ResultCode]" id="b439a27f-8d90-4e77-abb7-1599db24b27b"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" name="OrderId" id="c71e1a31-5618-4312-b6c5-09b78124186b"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="HasFailedItemsContainCheck" id="4c7608b7-0c00-4cbc-8395-6be9121da736"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="PromiseTime" id="b7f5fae5-4ff1-43c6-84ee-aa5e0be69cf7"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="0a0ca8da-ba01-46a5-af24-29c2b2354f93"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="34aeeb65-3e14-4bcf-8bc8-5a6e8b8d846f"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="84ab5697-c3e4-411e-9e3e-e5987a70c34e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>3.68</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>5.20</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19139</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="e5fe6bc1-bc95-4574-8aed-d280e79c07d3"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="7cc14445-d022-401b-a1c5-726665fc9351"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [ResultCode]" id="94d0f006-6130-4133-bca4-d89a06d0f625"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="HasFailedItemsContainCheck" id="194154a8-7271-4425-ba54-8c3e32149607"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="OrderIdCheckNMatchFromPutorder" id="50a8210b-dfa6-4369-bfac-12b73ee57145"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="OrderAmountMatch" id="0cbeff0c-86bd-42e2-9458-a55bd071a046"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="PromiseTimeValidation" id="26ec8070-8efc-4d5c-b807-1c2fd3747dfe"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="e65e8e1b-5e18-4bcc-9598-8f2dcd8a8bea"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="6e2c514a-b713-484e-9586-6952c7d32368" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-FastbreakLunchInvalidTime" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="d4ec23fa-0769-4082-b771-d864dc684d89"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="cb13d58e-2ad3-4969-8407-da6a4c1b879d"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [  {
			"_comment": "Fastbreak Lunch Items",
			"ItemLineNumber": 1,
			"SalesItemId": 3119,
			"MenuItemId": 1813,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12551,
				"SalesItemOptionId": 20899,
				"Quantity": 1,
				"Name": "Honey BQQ",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 8599,
				"SalesItemOptionId": 4036,
				"Quantity": 1,
				"Name": "Souce on Side",
				"UnitPrice": 0.000,
				"Modifiers": []
			},
			{
				"ItemOptionGroupId": 8678,
				"SalesItemOptionId": 4099,
				"Quantity": 1,
				"Name": "Blue Chesse",
				"UnitPrice": 0.000,
				"Modifiers": []
			},
			{
				"ItemOptionGroupId": 13177,
				"SalesItemOptionId": 18978,
				"Quantity": 1,
				"Name": "Pota Wedges",
				"UnitPrice": 0.000,
				"Modifiers": [{
					"ItemOptionGroupId": 11513,
					"SalesItemOptionId": 14677,
					"Quantity": 1,
					"Name": "American Cheese",
					"UnitPrice": 0.6000,
					"Modifiers": []
				}]
			}]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d49d1f6-fb92-4b19-b62c-0312f4ee2153" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderId"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="3f0fdb1d-894a-4d2b-8b38-de301e4bd2f7" name="PromiseTime"><con:configuration><path>declare namespace ns1='https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5';
//ns1:Response[1]/ns1:Order[1]/ns1:PromiseDateTime[1]</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8041f5c0-6c66-464c-812d-7d8c5c884293" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="8f41827e-a15c-45b4-9151-1cbf244b0ac6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="ad11d1da-1db1-4501-85ab-e9a5210ee8b0"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="41945184-e142-4494-a379-d3a1219b8667"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>11.03</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>12.55</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19141</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="dd3d805b-cf5c-4cfa-8b43-6137ae78c8fe"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f1c376d-cb48-4981-9b81-d0796751347f" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="6ca9db39-65be-49f0-9d98-c10175261a50" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>declare namespace ns1='https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c';
//ns1:Response[1]/ns1:Order[1]/ns1:OrderId[1]</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="646ae7c1-a2aa-4706-a48a-2540135c9040" name="OrderAmountMatch"><con:configuration><path>declare namespace ns1='https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c';
//ns1:Response[1]/ns1:AmountDueAtSite[1]</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="dd0d67da-54cc-42f4-896d-679e0fdf6688" name="PromiseTimeValidation"><con:configuration><path>declare namespace ns1='https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c';
//ns1:Response[1]/ns1:Order[1]/ns1:PromiseDateTime[1]</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55537256-0ced-44b3-98e7-e4ee992b3b1c" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="4a3999c0-07d0-44a2-ae7d-171774f024b0"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>EndPoint</con:name><con:value>https://api-staging.buffalowildwings.com</con:value></con:property><con:property><con:name>ClientSecret</con:name><con:value>b412815427554a96ADBc8Cd2af6C368f</con:value></con:property><con:property><con:name>ClientID</con:name><con:value>e61af77efc1e4477bf8b83ade31901b5</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>ptime</con:name><con:value>2019-02-08T13:30:00</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="83ff3f96-2473-406e-8e84-27aeedd2f562" name="PickupOrder_Scenarios-PrePayment-STAGE"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="d1383d24-f714-4105-a80c-47cdd5e430d2" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-SingleItem" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="cb8c0f07-39e7-419a-9e51-84d4093688b4"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="a26f1e3f-d1c2-4517-ab79-77f4ace528ad"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
      "ItemLineNumber": 1,
      "SalesItemId": 2888,
	 "MenuItemId": 1674,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="ebe6fef4-65bb-4bb8-ada1-f0dd6b888097"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="86638ebb-264d-49bd-bfe7-5d0b986fbb1a"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="fb3af06e-95b6-49bb-bedd-d6cb382ef97c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>8.72</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>10.47</con:value></con:property><con:property><con:name>orderid</con:name><con:value>22346</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="2262871a-e9ea-4d5f-b1b3-69600007362c"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="6c78e8ce-9733-4a04-8d55-b31e3e1a3d8e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="8e353477-ef3e-4e1d-99d4-6baea69e1304"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>a49c809c-ba82-47b8-b670-ab3819b80966</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>orderid</con:name><con:value>22346</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=a49c809c-ba82-47b8-b670-ab3819b80966</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>10.47</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="0717aa70-45b0-42b9-b2af-b6651d22b303"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="62058294-01c1-4946-aca0-ac6aefd05c52"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="c6c7e83b-6e20-4400-ad21-1e97d27444a9"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f09d82ab-899d-489f-b32a-d0698abd7151" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85fa3c75-f42e-42ea-b301-4b9518cee076" name="AuthorizationStatusCheck"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7ebfbb7c-3b8e-481a-859d-1af6bdea4f61" name="AuthorizationAmountMatchCheck"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="baf76fdf-0ec0-47e0-a738-d93b2874949b" name="CapturedAmountMatchCheck"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1a98f946-1d6a-4ed0-aa88-eaf510220ccd" name="ProcessorResponseCodeCheck"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="00f5d32a-5021-4445-9326-23501f668ddb"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="705c2cb8-fa59-4cc3-b265-c8ecd12d888b" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-86edModifiers" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="36d66c81-8115-40b6-ad32-541511138825"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="bea95602-97d1-4a23-a037-0a7fc34aca85"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
   	 "_comment": "Item with 86ed modifiers",
      "ItemLineNumber": 1,
      "SalesItemId": 2896,
	 "MenuItemId": 2421,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [{
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="36e158b6-b82b-46a3-8096-3c5ca522824c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="59f83014-cea2-4513-9a4a-9b1ae21958ab"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="87dba199-7a30-47dc-9762-8731b5670b83"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>2.0</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>3.75</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19120</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="5a4ebe54-7c5f-4d28-a6ee-0801fa3304ea"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="eb46614f-0d25-4b8a-8688-ebd09cce1cfb"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="052057f9-c803-4498-9e27-ddfe2a54d524"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>cc083192-1db8-4fe5-bf82-f278f9438429</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19120</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=cc083192-1db8-4fe5-bf82-f278f9438429</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>3.75</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="3ff679f6-5231-4ce4-bfc3-fc7d68a26df8"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="a331f28c-1847-4ca1-8b6f-4ba18f92d86c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="3be4663f-559d-4efc-bd10-3e901944f323"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="966edc91-71cb-4dbf-91db-6684bff889d4"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="ec31d97b-7c8b-4f63-a9da-54aab186f1d8"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="dedbeadb-5647-47d0-a3b3-40ee7c45e06a"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="9cff7290-6390-481a-a3de-31934c666fca"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="b94aa4ed-a324-4043-ade3-a5faef50ed3b"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="79afa122-2684-43ca-83d2-458b03165ba7"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="7654db40-5bc3-41a0-9a2f-ec6c959c5b5a"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="53207ca5-4e84-41aa-9af8-0e06edac173f" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-86edItems" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="8504cc0f-6cec-447c-86e3-1d75a713ec5f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="fa146915-52bf-4f9a-9fe5-c745c677e47f"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "86ed Item",
			"ItemLineNumber": 1,
			"SalesItemId": 3666,
			"MenuItemId": 2150,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": []
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="7f1be163-0146-46c1-b816-84bbbffcf6b5"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="006ce66d-2de6-47bc-9283-dabf52ec2723"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="85bbb2de-249a-4d39-af09-9cd2799f24a1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>4.19</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>5.94</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19118</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="4deb2c21-9f57-41e4-9eb6-00663a1b2f3d"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="cc7d3a34-b495-43a1-a7e7-9d62119e9373"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="9768182e-1e20-41d7-822f-0c6ac8ac7d55"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>a82fd20a-eaf0-4464-9c13-923cf9006476</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19118</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=a82fd20a-eaf0-4464-9c13-923cf9006476</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>5.94</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="25640664-dff9-466b-adef-ef168d7549ce"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="276a1f06-ed5d-4fdf-bdff-3603dcc3edee"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="dd1e3f45-0465-48ab-bd7e-e26a82d06997"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="8cd94628-7c9e-476c-97e6-d287868af034"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="b4208e9d-7739-4b87-a5bd-08a78986b328"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="ffd811eb-96cf-4bcd-9c03-1b7e7b1646b7"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="061bb8b0-5556-4f41-b0d4-af82c0a01bdd"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="c435534f-24a4-466b-bbec-5daadc8eba07"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="798ce246-f14e-4b44-85ee-a9c37271d728"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="51db5d90-1897-42cc-bd86-4b36b99c97e0"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="8fcfa4e2-8abe-48e3-aa20-6f4adc84e69e" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-DrinkItems" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="277814bf-4d77-4ffb-9b66-ae43de4f5980"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="c8a27f6e-4d40-4d58-b7c2-a83fd1683757"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Drink Item",
			"ItemLineNumber": 1,
			"SalesItemId": 4585,
			"MenuItemId": 2149,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": []
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="ff6373f6-0138-4da6-a54e-d66ccf1601b3"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="8786a6fa-dd7d-4da9-bb05-14610132d79c"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="9766912c-51a7-4f0d-940a-e9bfb3d975bd"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>3.32</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>5.07</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19078</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="8550a791-4f04-4715-ae36-d33e12ce6cf8"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="b322a4dc-b2f3-4a4a-bbfc-6c691787d6dc"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="cf2170bd-711c-4015-85dd-5cbe9396ca1f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>6fe6f32c-e211-42a0-bc23-4619117605ca</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19078</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=6fe6f32c-e211-42a0-bc23-4619117605ca</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>5.07</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="880aadb2-5f1b-4e1c-9eed-b88a055f6405"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="ec123623-4b35-4c83-9e91-bfcb7f0e2905"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="fb50b045-340c-4f76-886a-28f5f30f01dd"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="569747d2-c177-4346-885c-3a5a11780354"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="a672e351-e1e2-4a93-97dd-9f5b8c4157fc"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="f4066f17-f9cb-452f-96f4-d15b8f650964"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="546a5038-61f6-4007-8849-88182f25d864"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="5100971c-0063-422a-9105-831ca1fa0138"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="9c708437-474f-49d9-8da0-a378b094f2d9"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="bef9b357-2a54-4461-a856-487bb78966d7"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="56a39ead-4515-4f6a-af5d-239840a0b90a" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-FastbreakLunch" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="652429df-9927-4f91-9357-6cd1aa8cf323"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="b40a0c4f-902d-4352-bb7d-4ef9804f88f6"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [  {
			"_comment": "Fastbreak Lunch Items",
			"ItemLineNumber": 1,
			"SalesItemId": 3119,
			"MenuItemId": 1813,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12551,
				"SalesItemOptionId": 20899,
				"Quantity": 1,
				"Name": "Honey BQQ",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 8599,
				"SalesItemOptionId": 4036,
				"Quantity": 1,
				"Name": "Souce on Side",
				"UnitPrice": 0.000,
				"Modifiers": []
			},
			{
				"ItemOptionGroupId": 8678,
				"SalesItemOptionId": 4099,
				"Quantity": 1,
				"Name": "Blue Chesse",
				"UnitPrice": 0.000,
				"Modifiers": []
			},
			{
				"ItemOptionGroupId": 13177,
				"SalesItemOptionId": 18978,
				"Quantity": 1,
				"Name": "Pota Wedges",
				"UnitPrice": 0.000,
				"Modifiers": [{
					"ItemOptionGroupId": 11513,
					"SalesItemOptionId": 14677,
					"Quantity": 1,
					"Name": "American Cheese",
					"UnitPrice": 0.6000,
					"Modifiers": []
				}]
			}]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="59792556-ea71-4eb7-af0b-c8a1ced7e97f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="24bc75a7-3169-420f-a654-f57fde9f126a"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="c95af6d5-b683-4de5-9ef6-3c059fb824c7"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>11.03</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>12.78</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19087</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="7b3b2a72-1cc5-4737-9563-44ec6cbb0a37"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="b56170a2-8cfd-4e4d-93a0-10398badb13c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="d27104dd-2711-4b86-8932-4d8b8ba87ee4"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>696a8dc8-c395-4690-9ca8-f21c601fe7a7</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19087</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=696a8dc8-c395-4690-9ca8-f21c601fe7a7</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>12.78</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="8f8d5db2-fc6e-4da0-9158-4f875e56b283"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="2ad2af38-855b-4d27-ba7a-6ad47093deff"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="bb267afa-28e5-4bbc-9d6e-77dd5ef63f3b"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="7df8ae2e-ab13-4f5c-80c8-d15b1c1c3afb"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="024de8ee-b59f-4a05-a0c8-e57c539692e6"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="3054fbcd-23ae-464a-b2e5-6c950048cd46"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="f3210327-06dd-40f5-b1d5-5021a3103046"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="828776da-bf38-4292-ae04-e6a788d33e53"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="9a16ba34-fd0c-487a-8018-dec3a95e686e"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="ef2afba4-9b22-4540-a089-d17a766b4b15"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="b5644216-aee0-493e-9c9a-909b92069371" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-ItemsAndItemsWithoutModifiers" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="c28c45e5-6c4d-4185-8a4d-0e46dd3c1bd0"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="9dcea48f-5c0a-4d7e-a941-6ffe44c5f54f"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Item without modifiers",
			"ItemLineNumber": 1,
			"SalesItemId": 2888,
			"MenuItemId": 1674,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": []
		},
		{
		    "_comment": "Item with modifiers",
		     "ItemLineNumber": 4,
			"SalesItemId": 3791,
			"MenuItemId": 2098,
			"Name": "Traditional Small (Approx. 9)",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12563,
				"SalesItemOptionId": 17171,
				"Quantity": 1,
				"Name": "Sweet BBQ",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     }]
		}
		],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="78819a8f-eb15-4f33-b01c-bb5472e96300"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="072c9386-1d9e-4038-87e4-935b1b13df9a"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="47fbe3f3-e2c3-481a-b904-d4ff3b353e0d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>17.34</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>19.09</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19081</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="9eb2af9a-8429-4fce-bb48-3daf25c0cf84"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="f175b4bd-3e9c-46c0-b695-b89d35236ed9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="262331e9-820f-4c5d-9e1b-b2c38095a5d9"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>1c86dd4b-ae20-4ec3-8034-1be025a422a9</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19081</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=1c86dd4b-ae20-4ec3-8034-1be025a422a9</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>19.09</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="7032cee6-4feb-48a9-bcd0-e147b2601ebe"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="3f3eacc4-45ce-46c7-85bd-6bedef3082aa"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="a2ae06c9-732d-4d49-bdf1-7e18048a0298"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="2152e3ee-241d-45c4-87a3-158c4b2dfdce"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="c23ae7b9-782b-4bc1-bee6-3aaad5f2e057"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="01270c58-747d-44fa-8c02-bb48a3a225f6"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="607cd41e-b5ca-446a-add1-ab11ff5aab8b"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="87096d86-43a1-4e45-8780-bcfc9b2d5c53"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="f07c4aef-cc56-4d04-ba97-ad0a393146d4"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="5d665c09-2525-4e28-bc85-139e4ae4eb5e"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="2e446ef8-33ab-4ee7-b3a6-166380eff2b7" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-ItemWithModifier" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="da7f0ab9-d0eb-47c6-a823-8b0beb310ada"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="14bdbd1e-aeb8-4be4-9932-4ef3e6b93462"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Item with modifiers",
			"ItemLineNumber": 1,
			"SalesItemId": 3791,
			"MenuItemId": 2098,
			"Name": "Traditional Small (Approx. 9)",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12563,
				"SalesItemOptionId": 17171,
				"Quantity": 1,
				"Name": "Sweet BBQ",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     }]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="032f373d-69a3-4580-b270-77024a9e2a3d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="2312d3d8-9d2c-4fe9-9f72-7bee25c8ee6f"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="6af4852e-5e1b-427f-b218-37bb50f4971b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>12.98</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>14.73</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19082</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="a1986da7-28b4-42a2-8b71-5845ba1c7dde"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="b711b0b7-ddbf-4a49-8f93-7febcddfc7ee"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="0bd7ee06-0772-4d04-9048-508f902dc2c7"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>eb66f542-2baf-439c-a661-c5d85bb3c089</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19082</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=eb66f542-2baf-439c-a661-c5d85bb3c089</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>14.73</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="0924cb2a-5f9c-443e-9a3d-67f52c80f706"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="735dfffd-00dc-4d3d-b14f-07eba3cc1c24"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="3263e2d3-7a8c-422a-806f-b953bb460007"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="d8872129-93bd-4df7-a10e-aee3885cba36"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="7861bade-5dcc-40d6-bda0-c359222fee7a"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="cb4f8c05-b818-4aad-8370-32b323a68dfb"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="eb24cdd4-ce21-4ddb-b2b1-384575bea239"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="a6d7326b-2f9e-462f-b288-0dcb12193788"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="9700496e-4213-467c-87da-816766ae799d"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="eb4ca277-f6d2-44a6-a619-311e10e968da"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="dbee8613-9428-46cc-8f22-16b8d372ae29" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-KidsItems" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="074bb564-4806-48d4-8312-483e00920372"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="375ff611-c6cc-4bda-905a-cfbe8ea3603c"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Kids Item",
			"ItemLineNumber": 1,
			"SalesItemId": 3403,
			"MenuItemId": 1066,
			"Name": "Mac &amp; chesse",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 11069,
				"SalesItemOptionId": 8220,
				"Quantity": 1,
				"Name": "French fries",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 9754,
				"SalesItemOptionId": 7884,
				"Quantity": 1,
				"Name": "Kid Milk",
				"UnitPrice": 0.000,
				"Modifiers": []
			}
			]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="4d78e7aa-ec7a-439b-ae90-b2cc9aaaa7dd"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="b6a3cef0-921f-4904-94bc-099567a15414"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="4874959d-de7a-41fa-99dd-d8a91ef4c3cd"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>6.08</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>7.83</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19089</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="db235373-ff50-42ba-830a-13c27de5465c"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="101303c2-28eb-4c11-8971-b360a7c2106d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="000d94d0-5d18-43e4-8cbf-1e0af8a82aab"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>7668f40b-b22d-415b-9d8b-e97b1288a0aa</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19089</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=7668f40b-b22d-415b-9d8b-e97b1288a0aa</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>7.83</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="fb1e18de-ac9e-47a4-9b98-2c14ee78792a"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="680f2e27-e392-4c13-aaa3-5c8bf155a721"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="f74f11b4-a2a9-4fa2-b47c-d5f3bb097599"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="2c888248-5347-45d8-a3e2-8e96b7388eee"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="1d54afc9-e52e-48fc-ac99-73c0618094d8"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="a1f9cf7b-6e2d-48b1-a61c-70ed7023d9b4"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="5416507c-083b-47a1-ac50-e0767cf387e3"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="a414f797-4e53-45a5-ab7c-05914c7b202d"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="ee484724-38e0-4f9f-a905-fecd9c09c278"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="a51c6d4c-8cb1-488c-930a-bec5c55d59b2"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="31157395-27d5-49f5-b7dd-39b969062ce5" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-NotContainMinModifier" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="63af52d7-61cc-4a51-a8f5-222d47397ba8"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="5da514fa-dac5-4b97-b103-0290befd59db"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Kids Item with no minium required",
			"ItemLineNumber": 1,
			"SalesItemId": 3403,
			"MenuItemId": 1066,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": []
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="18b1ef68-5af9-47e6-b1b6-41468489a248"><con:settings/><con:configuration><codes>406</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" name="Item does not contain the minimum required modifiers" id="4ffe3c9e-18b7-4d3a-95f6-947d2729b9e0"><con:configuration><token>Item does not contain the minimum required modifiers</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="8bb84f79-844c-4e1c-91d5-d0f1c1742e8a"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="dea12a2f-f2f1-44f8-8190-b7f2691d1d98" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-OrderAmountOver$175" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="3866e8a4-e275-4569-ba83-89d431151012"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="76ff6faf-758b-4e55-af05-c2b5e1350489"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Party Items",
			"ItemLineNumber": 1,
			"SalesItemId": 3870,
			"MenuItemId": 2129,
			"Name": "Party wings",
			"SpecialInstructions": "",
			"Quantity": 8,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 11974,
				"SalesItemOptionId": 14913,
				"Quantity": 1,
				"Name": "No Souce",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     }
			     ]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="f7508bb5-2784-4b90-9e3d-858e709b4aa6"><con:settings/><con:configuration><codes>406</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" name="Order total amount exceeds configured limits" id="c035f938-0e26-4bd3-aa8c-16200b4f2359"><con:configuration><token>Order total amount exceeds configured limits</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="e2a20ecd-5cbe-47fb-8b5d-14f767958435"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="ff360557-00fb-408d-a504-697cbcdf3ac4" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-PartyItems" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="d2fe4516-24bc-4b23-9720-4c3116bb42d3"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="2eed86af-7679-44c3-8e03-6d993f64cc92"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [  {
			"_comment": "Party Items",
			"ItemLineNumber": 1,
			"SalesItemId": 3870,
			"MenuItemId": 2129,
			"Name": "Party wings",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 11974,
				"SalesItemOptionId": 14913,
				"Quantity": 1,
				"Name": "No Souce",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     }
			     ]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="53d689ff-b1c5-4d0e-b4ea-9ff0edce4004"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="09cd1ed8-cb6d-4ffe-bec6-e70d34bfc46a"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="9cda23d7-83ca-44b1-9463-c7c72ab9fc79"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>121.04</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>122.79</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29745</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="d0349920-ef52-4475-9a7d-0946577976df"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="e664e7e3-cfba-4f07-af76-f627c9900f86"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="27f9064d-a45c-42b6-aa03-83865715028c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>d3a1a0fd-47ab-49e7-aa40-9454dbc694ae</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29745</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=d3a1a0fd-47ab-49e7-aa40-9454dbc694ae</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>122.79</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="6f02269b-7514-4b06-9a49-499bc0938123"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="78267d18-3422-4812-9ba2-275eaf813e20"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="bc945c31-514c-4888-869e-71b713757a4f"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="e4d7909f-51b3-4825-8834-080080544492"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="7504cb7f-55be-454e-9373-31123b2f0bea"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="04a9548b-bde1-4bb0-a9eb-6b4d60ee36f5"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="b5ad1b3b-856e-4f71-87cb-01dfef4c3766"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="7ebccc7a-ffc2-4f1e-87e0-b90f89b1a1db"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="2e6e39ba-5187-4913-8356-7c0c7094ea32"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="f45e14d8-3e7e-4ebe-acf2-2131ac7f030a"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="cca699c5-4a08-4cd6-a3d0-7e9e9e97f289" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-ThursdayWings" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="3bbd8db9-9cab-430d-ae32-803d4cf459a6"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="9025ddae-57de-4dfa-be5d-c8d24a33fcd0"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [ {
			"_comment": "Thursday Boneless Wings",
			"ItemLineNumber": 1,
			"SalesItemId": 3700,
			"MenuItemId": 1986,
			"Name": "4 Boneless Wings",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12565,
				"SalesItemOptionId": 17170,
				"Quantity": 1,
				"Name": "Teriyaki",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 13755,
				"SalesItemOptionId": 20922,
				"Quantity": 1,
				"Name": "Ranch",
				"UnitPrice": 0.6000,
				"Modifiers": []
			}
			]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="da9c3c01-fc93-48cd-ad3d-e49e169db80c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="66c2157f-d15c-47cc-acd6-a3dd84260c4b"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="28d07eda-2117-4caf-b715-fbe17bd5ece5"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>3.64</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>5.39</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29746</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="dbbdacc3-c228-4655-823b-e9b9c5bb194d"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="f1a4d1cd-3da3-4e1c-b178-0eeb66e6e27e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="f000d782-7cb4-4734-9b28-ac7512f1d09d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>1fae68bd-ad2d-4644-9017-21ab174ed8c5</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29746</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=1fae68bd-ad2d-4644-9017-21ab174ed8c5</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>5.39</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="7a4d3ce5-62bd-4830-97b9-6b5ccc560377"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="e0e167ad-a77e-4c5a-bf19-8db36092486e"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="6c1a5565-e06f-4ca0-ab44-dde4b8a60691"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="8aa7499d-870d-4cea-a695-0ea5adca5cd4"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="49b8deb8-a04b-4d1e-8718-28f8c4451e7a"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="bbb4d42c-7aaa-4b83-a60a-11f7a569547b"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="c68705c1-2ab9-455f-80d2-eb72065b8720"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="2b910369-9edd-46f2-b824-2f2fb3b427a9"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="c5ec28b5-f1ed-4e83-9b4c-a64263b81d22"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="d9d66e8b-a37f-4500-b49a-a69e0ce1ffc3"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="705bd020-3491-4bd4-aad9-232943d515e5" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-TuesdayBOGO" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="c36c0bbc-a25c-41dc-9838-dc579fc67f55"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="424f0e0d-3d73-4ea6-8f5d-ea57db5eccf2"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [ {
			"_comment": "TuesdayBOGO",
			"ItemLineNumber": 1,
			"SalesItemId": 4076,
			"MenuItemId": 2200,
			"Name": "2 Boneless Small (Approx. 24 Total)",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12568,
				"SalesItemOptionId": 17313,
				"Quantity": 1,
				"Name": "Teriyaki",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 11686,
				"SalesItemOptionId": 13575,
				"Quantity": 1,
				"Name": "Blue Cheese",
				"UnitPrice": 0.6000,
				"Modifiers": []
			}
			]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="81295116-d484-4778-87e5-c423cffa62fc"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="f2411887-f1df-453f-8ecb-a22d99f54de9"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="132cad78-24de-44f0-a172-0373afd8cb8d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>11.77</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>13.52</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29747</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="d77bceca-2df1-43ea-b874-511c0730d51a"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="c1f3e7ed-cce9-4e4f-a89b-921f22c841d9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="9f9e9759-826b-4d38-ad27-3ce6c52e51cb"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>51bd1e55-5d37-4b92-adee-a380a07cd140</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29747</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=51bd1e55-5d37-4b92-adee-a380a07cd140</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>13.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="b9567175-dddf-47d2-8722-ff8d06affaac"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="ffe15f18-342e-4508-a1b9-4b5b998b4245"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="b15b239c-805b-46ae-8b21-1d58a5ac8848"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="acebbf38-d2f4-4084-aeb5-a426e3b08dfb"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="83e0ea44-28e1-41d4-a8d2-8a5e691177ea"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="642e803f-ee48-4a86-a9e8-3650a03b9663"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="ea3de855-d014-4ca8-a8c7-876114721bc4"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="8951ddf3-94ca-41f2-b07c-1a642beef626"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="7b0d80f0-237c-4438-979b-07d197313f36"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="4cc81cd1-5a2b-4fc3-826d-bd47ec276475"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="7e576274-ef46-47e3-9c95-83dd76341bca" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-FastbreakLunchInvalidTime" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="d82ced83-2051-4a84-9922-a7d0f7372a04"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="e623578f-409f-4c16-b9b1-e73d83d5c93b"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [  {
			"_comment": "Fastbreak Lunch Items",
			"ItemLineNumber": 1,
			"SalesItemId": 3119,
			"MenuItemId": 1813,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12551,
				"SalesItemOptionId": 20899,
				"Quantity": 1,
				"Name": "Honey BQQ",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 8599,
				"SalesItemOptionId": 4036,
				"Quantity": 1,
				"Name": "Souce on Side",
				"UnitPrice": 0.000,
				"Modifiers": []
			},
			{
				"ItemOptionGroupId": 8678,
				"SalesItemOptionId": 4099,
				"Quantity": 1,
				"Name": "Blue Chesse",
				"UnitPrice": 0.000,
				"Modifiers": []
			},
			{
				"ItemOptionGroupId": 13177,
				"SalesItemOptionId": 18978,
				"Quantity": 1,
				"Name": "Pota Wedges",
				"UnitPrice": 0.000,
				"Modifiers": [{
					"ItemOptionGroupId": 11513,
					"SalesItemOptionId": 14677,
					"Quantity": 1,
					"Name": "American Cheese",
					"UnitPrice": 0.6000,
					"Modifiers": []
				}]
			}]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="770f687d-be9d-45a0-a845-b2ba7849f234"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="8ef3592a-231f-46fa-af09-dae06fdfcdde"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="9ca2d4c5-1695-41c2-a407-c81188dea38a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>9.2</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>10.95</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29748</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="3aef69cf-c6b7-4be3-a31d-b211b83a9ab3"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="3a34660a-a443-4305-aed8-eca4ccf2edec"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="8218405a-8d4e-40e3-808c-cef5a3bb68a2"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>a22772f0-43b5-4576-a8f7-f84937c02f41</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29748</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=a22772f0-43b5-4576-a8f7-f84937c02f41</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>10.95</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="74544be3-a6df-4dd4-a2e9-364c999a62fb"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="db811610-9c33-4f46-989a-b92a646a8f0d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="f5fcec75-06f0-45d4-9536-7603ecbaa4f2"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="29ce2f87-d30c-4a8f-bd0d-036380df3d03"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="74ea0469-fb2a-41f4-a059-81435144c913"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="92a7d1ff-1bc8-459f-92f7-2e0acfef2f7b"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="6e184435-fb5d-49d0-b4fe-d7439d2ed238"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="4a9464fd-a3ae-4c83-af24-2cc49bed2815"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="e94a2c5b-f6dc-4efd-9752-e7067fc277db"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="a28b66f5-9960-4934-8bfd-4123f1882b79"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="73c319e0-3d68-4826-a45c-3faabfbf5987" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-AMEXPayment" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="c458aff7-8231-448c-8a67-4aba0b43f8c4"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>378282246310005</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="f0d6d027-f442-4896-b65c-0f37be2f4683"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
      "ItemLineNumber": 1,
      "SalesItemId": 2888,
	 "MenuItemId": 1674,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="acd711f4-4b7b-4d88-a075-be219662ccda"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="9f9cab32-5247-4a32-9eea-cbb64790e99c"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="35a8c9b6-674a-40dd-a3d2-8279645e844e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>8.12</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>9.87</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29749</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="e9afc0cd-325b-4568-a7c5-1672d3dbf83b"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="63f61030-4095-4647-82dc-4a9ecf5545c6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="d21aa37c-6c39-424c-ac40-602ebcf2c31c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>ff55c3c7-bf55-4c4b-8674-89fe5fc074aa</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29749</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=ff55c3c7-bf55-4c4b-8674-89fe5fc074aa</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>9.87</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="81ddd1af-6b5f-4246-b32f-ca0fa1a12edb"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="e92bffcf-81dc-4ae2-b8fa-a2116bf11eb7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="c82cc852-fdc4-4e1f-99dc-02e64b45397f"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="21de8635-ba07-4116-b193-fbb33b7ad27d"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="e38466c7-caed-4525-a96a-41b6ec97551a"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="7d5c523f-b531-4280-828e-8c75a3ccbcec"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="56ad11be-9503-4ccc-b73a-cfea06f12ae2"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="b71175cb-f5af-4fc0-a76b-ca84b4dc4bc0"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="f5722b7c-ec3c-4ef0-96b1-a8d8a41b4cd6"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="75af5d67-e1fd-4b05-a1be-a39cf14e8b8a"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="28a2a541-71c0-41fa-a2d7-414ad705abfd" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-DISCVPayment" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="b4a0f1ef-1ec2-4c60-9086-0171b8644913"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>6011111111111117</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="981b7238-9280-42dc-bb70-2626172c8971"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
      "ItemLineNumber": 1,
      "SalesItemId": 2888,
	 "MenuItemId": 1674,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="6c2352a3-640a-4192-afbd-0287e9389431"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="75285382-c8b9-465e-a45a-83e36fd5f55a"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="88eb5441-ea2d-4749-abef-0f3ae8278df4"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>8.12</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>9.87</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29750</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="9fae05fd-5ca5-4b81-8a1c-9c748cdc70c4"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="4476324d-2353-4e08-9519-99c33d002319"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="32753749-e30c-457e-b15e-9780935889fc"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>60927a89-aaaf-411e-91b6-34431a4ac654</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29750</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=60927a89-aaaf-411e-91b6-34431a4ac654</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>9.87</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="4e511b90-18d2-47b1-8c66-a00f66f93830"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="f92de489-973b-4091-abc2-6bb9184b4922"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="5b1517de-28d9-4650-89c6-abfef6e86234"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="e5d56df8-4815-4319-8c30-0c6c4eef7690"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="081ffbaf-2e24-484a-a82e-5558e67e0150"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="fe318e49-d41c-41d9-8aeb-b8baeb358ca9"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="57c1b02b-790d-435c-9cda-59ab57994340"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="24ea54b2-c4ac-4ce3-b47e-6e0a9f9f6b82"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="48c0256c-a802-43f9-83c4-e5845264eea5"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="cda11058-f8b7-47ed-a275-99319acf2a28"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="deed0332-2639-4ce5-8d8a-f0182e6e81af" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder- MASTERPayment" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="6d9832db-ffc5-4331-a6de-e19d1f3e3230"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>5555555555554444</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="81a15eeb-b89b-400f-a69d-fc4690ca97a0"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
      "ItemLineNumber": 1,
      "SalesItemId": 2888,
	 "MenuItemId": 1674,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="2435b0c2-6b20-4597-aec7-51c328368406"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="2fb930a0-a8a3-4b80-a7b0-7e6291240c4f"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="f4812407-c4e7-4610-b41d-4c5046633575"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>8.12</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>9.87</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29751</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="de1b0cea-481d-4428-b2fc-43cd5526436d"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="fe155974-b53e-4f64-b681-932a18fafaea"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="ae897c49-674a-42fd-95c2-b5047e6a5787"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>1815eb90-e4cd-4458-9e78-efeb3bd6c5f7</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29751</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=1815eb90-e4cd-4458-9e78-efeb3bd6c5f7</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>9.87</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="89f9b987-8634-4ca3-bd27-d25c3946e9a8"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="d058a694-0ecc-42a5-90e7-f584dd0f71a7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="9e78c37b-c585-4d69-b601-62b527a7078a"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="da31d674-a013-4518-aa6f-788c597d79a1"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="2e7ca254-a8f0-47ae-a60e-c7f3a40132be"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="35b5a568-4246-4743-a7b8-4739e80250ce"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="80364eee-16bd-4949-98ce-9ceaa2e0ecae"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="e9228eaa-15f6-47f1-91fc-9b3af024943b"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="9f434caf-e523-43f4-b176-70379da7503f"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="f8a4d566-9456-4034-bd33-d97f4c90868a"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="e7093867-5a18-40a5-a7b3-db249982735b" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-JCBPayment" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="1e9ce29d-72fc-4bf3-a4fb-294d2e0c3de4"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>3530111333300000</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="a7653d13-896d-4445-bf9c-abbe0c080db8"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
      "ItemLineNumber": 1,
      "SalesItemId": 2888,
	 "MenuItemId": 1674,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="8e3e8bbc-fe0a-4321-93d6-6d5f0b4c0b3a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="39245cfe-6fb3-4f98-b393-aae5c89ed94e"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="a292e76b-9af6-45e2-b27e-1bcdb8ec5590"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>8.12</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>9.87</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29752</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="f3fb545c-9fd5-41fc-a67a-345a1d25ce22"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="2b8217e2-e147-4796-a7e0-0e035c657205"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="1ae2c302-bb0c-4c80-9bea-bdac09901907"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>36247c21-2b00-4cf4-94bf-8f6ed8726b0c</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29752</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=36247c21-2b00-4cf4-94bf-8f6ed8726b0c</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>9.87</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="7937727f-c068-4973-91eb-ee7dd1726dc3"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="020a3412-7c9b-4bdc-b5ea-e7e73c628bab"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="604275ad-9712-4695-8e10-51d08a2b9b71"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="466cd77f-a068-459c-a9fe-6bfb3add7175"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="9de11af4-66f8-4987-906b-a871d7e7429b"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="234a6ef1-866a-4ce8-aea1-38cdb40896bf"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="a7e5a096-f810-4851-b722-f3fae009b766"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="57586f59-b476-4ccc-9cdb-d951ec35b171"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="2d436ccf-3874-4e0b-9f2e-f0274510e4b8"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="0eaf828d-13d8-45b1-b6c7-746c30d672ca"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="9be3f42e-b0b2-42e1-97e9-d9108e1322b8" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-VISAPayment" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="3af65283-1ad5-490c-bfc4-77ca17a378f5"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="36d1aab6-2bcd-4416-ac00-9302fa4eee8d"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
      "ItemLineNumber": 1,
      "SalesItemId": 2888,
	 "MenuItemId": 1674,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="a01e6ae2-5a10-4efe-b15a-b2bf1aa4db03"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="72301d22-d2c4-415d-a9ef-f6877b61a0b8"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="16391020-01f7-49d2-b49b-10fddf17ab9e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>8.12</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>9.87</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29753</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="63a6f4e4-2541-4826-8e58-749dec377238"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="6e50cba0-3a3c-404f-b7b7-29ea9405c3e6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="a9408fcd-dbb0-429f-b8dc-a2eb6b0cba38"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>99e380bb-356a-4fee-8dcc-722bc961a61d</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29753</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=99e380bb-356a-4fee-8dcc-722bc961a61d</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>9.87</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="e1db06df-d542-402f-aa10-81f580ad4659"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="e5513891-cf43-4084-9263-1f7e917efe9f"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="a5acce82-5dad-437f-a5c4-4e8a78dbb66a"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="3ed729e0-49a3-4418-8e8a-21bcb83f2160"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="19e2fd62-b0a8-4ece-8553-a30baf4f5992"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="25280628-ec39-4fdf-b442-9274d36c2be9"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="8e5ff8ab-6e10-4767-ae57-c9ee30d1e980"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="9f6c9e59-6c62-4182-9101-0b0da0ca8055"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="cfd7625a-b205-4680-b801-6729eb584ff8"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="9766c77b-c0a8-4d0d-8905-ab20f5d065bb"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="53b95a41-85ba-4753-ac3c-2f817916a7a6" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-NonSupportedPayment" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="e5fa1da5-b631-4408-a617-6718ed30ac98"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>38520000023237</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="f06476f1-64a2-4f95-8d5b-d980c00ff8fc"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
      "ItemLineNumber": 1,
      "SalesItemId": 2888,
	 "MenuItemId": 1674,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="b0da6dda-b56f-49a0-b3d5-029115d0bc9a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="1bb89c9c-1abb-45f4-95f8-a8855ecdbfb5"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="32e1e3a1-cc31-4359-bef5-836a8d97737e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>8.12</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>9.87</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29754</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="8cad403c-63ea-46d2-8474-a3bc9f807d3e"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="14583e92-63f3-45e0-8971-54f6d6ee8988"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="d310ae88-ceae-4186-b08b-0a83727f0c78"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>710c8047-77be-4006-8338-f1f576620af5</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29754</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=710c8047-77be-4006-8338-f1f576620af5</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>9.87</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="15a71a59-87a9-4291-95a3-de23c23a1135"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="d3955ce6-6ee6-49ea-8093-cf1c1a379589"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="7f1fbcda-a1b0-4baf-a655-370e448a54ff"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="96f49587-99de-4040-97a2-90881b18d52e" name="ErrorCodeCheck"><con:configuration><path>$['ErrorCode']</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1ffd1880-c24b-4e37-8633-4557b2d26cf6" name="Payment Not Supported by NCR failed"><con:configuration><path>$['ErrorDescription']</path><content>Payment failed and order was not submitted</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="ec5d2333-7751-4c1a-bce9-7e8adaaeaeca"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="19e2fd62-b0a8-4ece-8553-a30baf4f5992"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="25280628-ec39-4fdf-b442-9274d36c2be9"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="8e5ff8ab-6e10-4767-ae57-c9ee30d1e980"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="9f6c9e59-6c62-4182-9101-0b0da0ca8055"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="cfd7625a-b205-4680-b801-6729eb584ff8"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="6a23a35b-0efc-40c4-8b34-9cc96da1cc99"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>EndPoint</con:name><con:value>https://api-staging.buffalowildwings.com</con:value></con:property><con:property><con:name>ClientSecret</con:name><con:value>b412815427554a96ADBc8Cd2af6C368f</con:value></con:property><con:property><con:name>ClientID</con:name><con:value>e61af77efc1e4477bf8b83ade31901b5</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>ptime</con:name><con:value>2019-04-04T13:30:00</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:savedRecentRuns>1</con:savedRecentRuns><con:testSuite id="17a8387c-0773-4b4e-84b1-6ebd740a49bb" name="PickupOrder_Scenarios-PayAtSite-QA"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="1ca73d61-a166-4e3a-aaee-9fdbc0957a7a" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-SingleItem" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="933fab7d-b9bd-4d0c-b976-c457ed11c4c1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.12</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="89a7a203-9599-47d6-bfd5-c64c4f8f151a"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
      "ItemLineNumber": 1,
      "SalesItemId": 2888,
	 "MenuItemId": 1674,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d49d1f6-fb92-4b19-b62c-0312f4ee2153" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderId"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8041f5c0-6c66-464c-812d-7d8c5c884293" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e8b8bcd0-7f75-4f81-b46a-b11ef127f014" name="PromiseTime"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="660087fd-73fb-496f-944f-bd379de1eeaf"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="a7a0cf24-023b-4864-b89f-39be9c1c4baa"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="b0418400-aec9-4fad-bfb2-f208a7825c25"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>8.72</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.12</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>9.84</con:value></con:property><con:property><con:name>orderid</con:name><con:value>14329</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="c8e5a05e-501f-4103-9d2e-03337a81adb7"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f1c376d-cb48-4981-9b81-d0796751347f" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55537256-0ced-44b3-98e7-e4ee992b3b1c" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fd8dc8ff-f114-45c6-8fd6-7be722f5e352" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4137a564-7085-45ae-a36d-6c9eb0062dc9" name="OrderAmountMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7afe52ad-62a1-4825-baf5-013422b2b4eb" name="PromiseTimeValidation"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="182c4445-e62c-47da-a591-6a586a0a9aab" name="SiteIdValidation"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="413f2e7f-1d4d-492d-8287-7118ff461db6"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="eb84c037-59cc-4fb3-9390-20df99d2b852" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-ItemWithModifier" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="8fa522e9-0d72-4713-bd4d-6236a4dcc9b9"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.12</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="06792f8a-749b-4bdf-ae53-10d2d9984e8c"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Item with modifiers",
			"ItemLineNumber": 1,
			"SalesItemId": 3791,
			"MenuItemId": 2098,
			"Name": "Traditional Small (Approx. 9)",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12563,
				"SalesItemOptionId": 17171,
				"Quantity": 1,
				"Name": "Sweet BBQ",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     }]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d49d1f6-fb92-4b19-b62c-0312f4ee2153" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderId"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8041f5c0-6c66-464c-812d-7d8c5c884293" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c32e5ce2-0abd-4519-b885-c121559b6959" name="PromiseTime"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="3f566c78-4b86-4392-99df-249d4647b01a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="4f4edcc3-3c1b-4885-a440-ec084c2799e4"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="6a099ddb-6b57-4056-8b7d-6be31d71c943"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>12.98</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.12</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>14.10</con:value></con:property><con:property><con:name>orderid</con:name><con:value>14330</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="0602c8e7-e66a-4ea1-b20d-7757ee2facc9"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f1c376d-cb48-4981-9b81-d0796751347f" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55537256-0ced-44b3-98e7-e4ee992b3b1c" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7c150d1a-98b0-4e8c-98ee-eb6b72ac662f" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8425d1ad-2cf6-42f5-9e31-84fff555a65d" name="OrderAmountMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="62891001-90f5-43ea-91a0-a025bc8e168c" name="PromiseTimeValidation"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="c5193dfd-1a92-4358-9a23-1b7455fe4416"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="69f82be6-e1db-4dcf-8a00-82084a1cd1f1" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-ItemsAndItemsWithModifiers" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="cf68acce-1d52-42a5-9c33-761ae812cc35"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.12</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="fb1fd993-8e29-4514-acaf-2a944b4cdc5f"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Item without modifiers",
			"ItemLineNumber": 1,
			"SalesItemId": 2888,
			"MenuItemId": 1674,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": []
		},
		{
		    "_comment": "Item with modifiers",
		     "ItemLineNumber": 4,
			"SalesItemId": 3791,
			"MenuItemId": 2098,
			"Name": "Traditional Small (Approx. 9)",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12563,
				"SalesItemOptionId": 17171,
				"Quantity": 1,
				"Name": "Sweet BBQ",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     }]
		}
		],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d49d1f6-fb92-4b19-b62c-0312f4ee2153" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderId"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8041f5c0-6c66-464c-812d-7d8c5c884293" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85d3f6b4-089b-4e4d-8f30-3598cec25d3f" name="PromiseTime"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="0daf6dcc-6db0-4c63-aa38-8cc87748fdfd"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="e35a1bf2-f8ea-436a-807e-3f3b0c791955"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="fd0f6368-0a0e-4852-a7ac-a7622f6fb6f0"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>17.34</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.12</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>18.46</con:value></con:property><con:property><con:name>orderid</con:name><con:value>14331</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="0135bdef-5c1a-40f5-bb8c-b655b6670bb6"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f1c376d-cb48-4981-9b81-d0796751347f" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55537256-0ced-44b3-98e7-e4ee992b3b1c" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eed7916c-7741-4b7d-81f9-43dc62487077" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1de2231c-73e8-4369-a057-7eb44d4c1b0e" name="PromiseTimeValidation"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7f96eddc-81f3-4840-a796-4bb304349d72" name="OrderAmountMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="2cfe73ab-3df4-4621-9916-cb7d8fd9fb37"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="8e9f14b2-7ac0-41ad-a809-d0873f7e6ca0" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-86edItems" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="4008d417-36e9-4f6b-a6fa-8358b3faa783"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="7da705cf-320f-4e1b-b0a0-3984001f6c14"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "86ed Item",
			"ItemLineNumber": 1,
			"SalesItemId": 2888,
			"MenuItemId": 1674,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": []
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d49d1f6-fb92-4b19-b62c-0312f4ee2153" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderId"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8041f5c0-6c66-464c-812d-7d8c5c884293" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b7bd32c-cdfb-4afe-80bc-dd27c41323d8" name="PromiseTime"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="06f9595a-e4b0-449c-be87-9ad69ffe8bee"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="57611801-e6c4-4378-b355-835b59117e6c"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="f408467f-628d-45a3-ad00-1f0a767d364b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>4.36</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>5.88</con:value></con:property><con:property><con:name>orderid</con:name><con:value>14332</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="fd16ed12-415b-4a08-ab6f-e9cb5ac62fe2"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f1c376d-cb48-4981-9b81-d0796751347f" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55537256-0ced-44b3-98e7-e4ee992b3b1c" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bdad3052-06aa-4830-80e1-0d7b9c129582" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="73ea9eef-dd79-4224-8ce4-6855d959e652" name="OrderAmountMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2bde536-737c-4d85-b509-af65c0446128" name="PromiseTimeValidation"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="670c2728-9843-43ce-a81e-140491e9a035"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="f5a9a7e1-b3df-41f2-8170-1e201848199e" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-86edModifiers" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="6816ccc1-403d-4e2d-adea-f5b450c6975d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="2d475e7f-7fc8-4778-8c7c-0829a3de34cb"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
      "ItemLineNumber": 1,
      "SalesItemId": 2888,
	 "MenuItemId": 1674,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [     {
		    "_comment": "Item with modifiers",
		     "ItemLineNumber": 4,
			"SalesItemId": 3791,
			"MenuItemId": 2098,
			"Name": "Traditional Small (Approx. 9)",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12563,
				"SalesItemOptionId": 17171,
				"Quantity": 1,
				"Name": "Sweet BBQ",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     }]
		}]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d49d1f6-fb92-4b19-b62c-0312f4ee2153" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderId"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8041f5c0-6c66-464c-812d-7d8c5c884293" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a46c846-d4af-44fc-b7d7-a866155c3644" name="PromiseTime"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="12f57df8-1368-4791-b98e-42b64f91f554"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="e1fc02cd-fee1-40d9-b2a1-53cf3a6aaa06"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="e32d445c-6ab6-470a-800d-a06f5c00bf72"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>8.72</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>10.24</con:value></con:property><con:property><con:name>orderid</con:name><con:value>14333</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="75340269-ce51-48f3-858e-7f948689b62f"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f1c376d-cb48-4981-9b81-d0796751347f" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55537256-0ced-44b3-98e7-e4ee992b3b1c" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="facd911f-f013-49e2-9a23-b8a092c57659" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="abd17051-499c-4686-bd31-fd0185414fcc" name="PromiseTimeValidation"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="97fd84b4-ad3f-49c0-ad6b-fe8b6afd5679" name="OrderAmountMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="9a634a6d-0d74-4236-8b8e-ce2b9bb494fd"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="41afb3ff-bed1-4a99-9358-ec9be52f06fe" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-DrinkItems" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="e16c968e-9b25-4db7-bcad-f70492d86c3d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="fe5629f5-f998-48e6-8b0e-fe0697b315ab"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Drink Item",
			"ItemLineNumber": 1,
			"SalesItemId": 4585,
			"MenuItemId": 2149,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": []
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d49d1f6-fb92-4b19-b62c-0312f4ee2153" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderId"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8041f5c0-6c66-464c-812d-7d8c5c884293" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ed356e39-42c1-4384-9179-88a9f87b81b2" name="PromiseTime"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="ff5433ba-f589-474e-a319-c5713acb3b8a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="f119b8a1-4d51-42a9-834f-035747170a83"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="9b89f8aa-ce47-4f0d-a95c-7d1292ac4616"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>3.32</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>4.84</con:value></con:property><con:property><con:name>orderid</con:name><con:value>14334</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="ce9abefb-b820-4588-9f7f-03ff1ec777dd"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f1c376d-cb48-4981-9b81-d0796751347f" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55537256-0ced-44b3-98e7-e4ee992b3b1c" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dcf919f2-1ff6-45ca-8a2f-f6aa22e878b1" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9128e214-7ab7-42eb-9e25-48dac64c5140" name="OrderAmountMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f071d17c-767c-4369-9d73-683250d164f8" name="PromiseTimeValidation"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="b7db6846-a2c7-42dd-a3bb-edc25120ea2b"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="efbac918-c882-4b4f-8839-3536cc389209" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-FastbreakLunch" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="4e976fd0-db70-42d7-a07f-f02e74c53e64"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="0f20e31c-4ded-4ba2-8172-ce01f89ca1a8"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [  {
			"_comment": "Fastbreak Lunch Items",
			"ItemLineNumber": 1,
			"SalesItemId": 3119,
			"MenuItemId": 1813,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12551,
				"SalesItemOptionId": 20899,
				"Quantity": 1,
				"Name": "Honey BQQ",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 8599,
				"SalesItemOptionId": 4036,
				"Quantity": 1,
				"Name": "Souce on Side",
				"UnitPrice": 0.000,
				"Modifiers": []
			},
			{
				"ItemOptionGroupId": 8678,
				"SalesItemOptionId": 4099,
				"Quantity": 1,
				"Name": "Blue Chesse",
				"UnitPrice": 0.000,
				"Modifiers": []
			},
			{
				"ItemOptionGroupId": 13177,
				"SalesItemOptionId": 18978,
				"Quantity": 1,
				"Name": "Pota Wedges",
				"UnitPrice": 0.000,
				"Modifiers": [{
					"ItemOptionGroupId": 11513,
					"SalesItemOptionId": 14677,
					"Quantity": 1,
					"Name": "American Cheese",
					"UnitPrice": 0.6000,
					"Modifiers": []
				}]
			}]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d49d1f6-fb92-4b19-b62c-0312f4ee2153" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderId"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8041f5c0-6c66-464c-812d-7d8c5c884293" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1aa2ca0c-6b37-4778-be6f-aacf02f2894f" name="PromiseTime"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="25d909d7-258d-4af1-90b1-37eab55eea2f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="f3961bdc-cb30-4975-8bbc-ee33aed48c0c"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="9ae1fff9-3a03-4ab9-a0ea-090025583724"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>11.03</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>12.55</con:value></con:property><con:property><con:name>orderid</con:name><con:value>14335</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="6eeeb614-8904-43b9-8848-e9f3b756f2a2"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f1c376d-cb48-4981-9b81-d0796751347f" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55537256-0ced-44b3-98e7-e4ee992b3b1c" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="26e2bacc-41ff-4fea-87af-28fa1ca3aa36" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="95540c74-3e93-4b91-bbc1-a5c027ffd2a3" name="OrderAmountMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e02dff1e-411b-4677-bc5e-8dab5964c81a" name="PromiseTimeValidation"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="696831b0-57f2-4b73-93dd-7c384a1a86c0"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="e1db5365-08e9-4afa-9886-2871bf00342e" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-KidsItems" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="3cdb2e94-2b76-41b5-a7ad-8e0d71ea13cd"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="ab6a96f9-7e8b-4408-8eae-75075b9db8ca"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Kids Item",
			"ItemLineNumber": 1,
			"SalesItemId": 3403,
			"MenuItemId": 1066,
			"Name": "Mac &amp; chesse",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 11069,
				"SalesItemOptionId": 8220,
				"Quantity": 1,
				"Name": "French fries",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 9754,
				"SalesItemOptionId": 7884,
				"Quantity": 1,
				"Name": "Kid Milk",
				"UnitPrice": 0.000,
				"Modifiers": []
			}
			]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="276da52f-23a0-4281-9458-f78359eb0de4"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [ResultCode]" id="4a7de336-76eb-4394-8715-aec8875d51b4"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" name="OrderId" id="a8e33293-096d-4a72-a5d0-65e73e7a3259"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="HasFailedItemsContainCheck" id="0f96b14d-9523-439a-9948-acde6934961b"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="PromiseTime" id="81664919-53de-4274-b68c-b3e209e2c84a"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="9745c8a1-249c-4b4d-ba57-3a890f5da1c8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="7b0d3578-1a05-40db-890d-c1d77aa84559"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="f4a3dfb5-4ed6-41a8-ba83-bc88d7d06290"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>6.08</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>7.60</con:value></con:property><con:property><con:name>orderid</con:name><con:value>14336</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="fad3dd9e-d8e2-44ae-adc9-73bed7e707d3"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="fb16ffd8-e84e-4e29-956c-571f660e9f39"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [ResultCode]" id="f9624789-effe-4d33-adec-29ca5dcc7e89"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="HasFailedItemsContainCheck" id="89e8b62d-495b-43dd-94de-2cdfea8b0f11"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="OrderIdCheckNMatchFromPutorder" id="403b981d-1589-4f95-a0d8-b1806216a80e"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="OrderAmountMatch" id="bcbd47f1-6f73-43b1-b6dc-2388e27526fd"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="PromiseTimeValidation" id="56b4c0f5-39b5-45fd-a2f4-1f29caccbdd7"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="8a6f62b7-3aba-49a5-a338-17dbd44055a2"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="32ed1f0d-4d53-4b8f-a8fc-773b291c9c8a" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-NotContainMinModifier" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="2848d02c-5ad5-4b4a-986c-30f7cee4727e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="27ecbf3b-83a9-4951-9151-c90866f2d67c"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Kids Item with no minium required",
			"ItemLineNumber": 1,
			"SalesItemId": 3403,
			"MenuItemId": 1066,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": []
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>406</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6e668d8d-fc93-4f8a-9682-6374634d4f61" name="Item does not contain the minimum required modifiers"><con:configuration><token>Item does not contain the minimum required modifiers</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="ad5f27d4-437a-4147-af52-e3c74afae08c"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="c611eec7-1dad-45e0-8d2b-e4124e0b4959" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-OrderAmountOver$175" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="7b61fc47-8a7e-46bc-abb9-4aa995497a4d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="58db319d-0ab6-482c-8f6e-df5347d64838"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Party Items",
			"ItemLineNumber": 1,
			"SalesItemId": 3870,
			"MenuItemId": 2129,
			"Name": "Party wings",
			"SpecialInstructions": "",
			"Quantity": 8,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 11974,
				"SalesItemOptionId": 14913,
				"Quantity": 1,
				"Name": "No Souce",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     }
			     ]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>406</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="8d5fe772-25b2-44d8-8669-10a87248f9fc" name="Order total amount exceeds configured limits"><con:configuration><token>Order total amount exceeds configured limits</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="09e353be-46d6-440d-ad43-be2ce3f36453"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="d510dac5-f38a-44b2-b8fe-1788aa552f64" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-PartyItems" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="3085f501-7fb4-4fa3-9a67-4e380849146f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="b17c9f5c-619e-4ac6-a81d-103358aa69e6"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [  {
			"_comment": "Party Items",
			"ItemLineNumber": 1,
			"SalesItemId": 3870,
			"MenuItemId": 2129,
			"Name": "Party wings",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 11974,
				"SalesItemOptionId": 14913,
				"Quantity": 1,
				"Name": "No Souce",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     }
			     ]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="ec973196-5b96-4705-81c1-dc63817c353b"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [ResultCode]" id="b6fcdb38-f324-40b1-b93e-25f2c40489a5"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" name="OrderId" id="5245440a-765a-437d-8a5b-e7e5c03330e6"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="HasFailedItemsContainCheck" id="198df213-36f5-44da-a3ac-dec91145606b"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="PromiseTime" id="e819f215-4046-4996-9eec-bedb8e790c19"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="9c655b5f-a025-4221-8a79-370872391d06"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="af2d027b-4e9c-4676-b107-da7b9c8cb595"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="a9dc7229-cf6f-40d7-a01a-e84f73c724e6"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>34.49</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>36.01</con:value></con:property><con:property><con:name>orderid</con:name><con:value>14339</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="c232ac36-5b09-4955-ab62-b27e53c8301a"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="fb63a35a-cb38-4a59-9a05-6f5bb4bcbace"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [ResultCode]" id="457d7c28-a494-491b-97aa-a0fee4d3ff99"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="HasFailedItemsContainCheck" id="80d964ef-356a-448d-ac1d-03ab8f8681fb"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="OrderIdCheckNMatchFromPutorder" id="b9fc3b42-4b4f-4261-9abc-dbf9525d48fd"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="OrderAmountMatch" id="9804f00b-2b00-4db3-909f-1cdc6ab76b72"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="PromiseTimeValidation" id="0180e1e5-789b-4b1a-b131-3325247f235e"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="1244d040-ba01-463e-84e5-f077943d2551"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="da4c4ffa-7fdd-4ff8-9306-c74214cfe0f1" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-ThursdayWings" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="aa321fdc-2a8e-4103-9a6c-b615669f5de0"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="35d34d82-7324-4bd7-b07a-026d391270b6"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [ {
			"_comment": "Thursday Boneless Wings",
			"ItemLineNumber": 1,
			"SalesItemId": 3700,
			"MenuItemId": 1986,
			"Name": "4 Boneless Wings",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12565,
				"SalesItemOptionId": 17170,
				"Quantity": 1,
				"Name": "Teriyaki",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 13755,
				"SalesItemOptionId": 20922,
				"Quantity": 1,
				"Name": "Ranch",
				"UnitPrice": 0.6000,
				"Modifiers": []
			}
			]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="bb73dc26-1bed-46e8-b23e-7d4b7fb46e24"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [ResultCode]" id="b439a27f-8d90-4e77-abb7-1599db24b27b"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" name="OrderId" id="c71e1a31-5618-4312-b6c5-09b78124186b"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="HasFailedItemsContainCheck" id="4c7608b7-0c00-4cbc-8395-6be9121da736"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="PromiseTime" id="b7f5fae5-4ff1-43c6-84ee-aa5e0be69cf7"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="0a716fa5-538d-497a-baec-591801f53762"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="6c69822b-accc-4127-a066-02779605fc15"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="7597097a-7949-488b-a12c-965e2bd00515"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>3.68</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>5.20</con:value></con:property><con:property><con:name>orderid</con:name><con:value>14340</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="3b7a5635-4d02-4d57-ab13-e2fd1541b950"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="7cc14445-d022-401b-a1c5-726665fc9351"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [ResultCode]" id="94d0f006-6130-4133-bca4-d89a06d0f625"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="HasFailedItemsContainCheck" id="194154a8-7271-4425-ba54-8c3e32149607"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="OrderIdCheckNMatchFromPutorder" id="50a8210b-dfa6-4369-bfac-12b73ee57145"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="OrderAmountMatch" id="0cbeff0c-86bd-42e2-9458-a55bd071a046"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="PromiseTimeValidation" id="26ec8070-8efc-4d5c-b807-1c2fd3747dfe"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="ee47dbb4-5609-4f0b-b089-ecd4bb281812"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="f45da41b-6874-4c91-8de4-e2cb5fdc412d" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-TuesdayBOGO" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="e43ea394-1ba8-49de-aec5-4fede93c01f5"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="63034393-7bf3-4f29-83fb-7a774be45cbf"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [ {
			"_comment": "TuesdayBOGO",
			"ItemLineNumber": 1,
			"SalesItemId": 4076,
			"MenuItemId": 2200,
			"Name": "2 Boneless Small (Approx. 24 Total)",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12568,
				"SalesItemOptionId": 17313,
				"Quantity": 1,
				"Name": "Teriyaki",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 11686,
				"SalesItemOptionId": 13575,
				"Quantity": 1,
				"Name": "Blue Cheese",
				"UnitPrice": 0.6000,
				"Modifiers": []
			}
			]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="4173fc6f-18d5-4f4d-be2e-f75b389fdb9f"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [ResultCode]" id="910efda6-bae5-4971-8b00-8ab9ae598c7a"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" name="OrderId" id="a6bb7afa-5bed-48c9-828a-035d6a0deb31"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="HasFailedItemsContainCheck" id="82beaef5-e796-44e6-bc64-e938e5ed63ef"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="PromiseTime" id="cd454abf-da19-4e15-9221-a9b9d00a7cd2"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="793c5616-b194-46a2-8f48-f3506c2b0fe7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="230add64-232f-4ad2-be32-5d36ba2cbe81"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="ce02413c-70f8-40cb-93c1-b9d08172ed1d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>12.41</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>13.93</con:value></con:property><con:property><con:name>orderid</con:name><con:value>14341</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="0ca656ab-6bc8-4317-8ede-fe2460f20782"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="b0bf07f9-76fc-4cf8-8899-8bd864d143e2"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="Match content of [ResultCode]" id="5c1d3e30-ad83-45fc-bcfa-04affd71dba4"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="HasFailedItemsContainCheck" id="c943f60f-52b9-4af7-8efb-327561c58820"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="OrderIdCheckNMatchFromPutorder" id="b8ebccb0-274d-4e89-ad8d-b1e728bf9cc7"><con:configuration><path>$['Order']['OrderId']</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="OrderAmountMatch" id="6852a62f-df6a-4b28-b200-1f19f9652c8f"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="PromiseTimeValidation" id="9873065e-57fb-4837-b736-65bf5dfe536f"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="1245630b-5d77-484a-91db-bce72a94b08d"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="958f3f4f-1d53-4485-8018-b3dc24e05f51" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-FastbreakLunchInvalidTime" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" maxResults="0"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="fb5387cc-c09b-462f-9363-5ec739dc0a68"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="5db62479-0d71-434c-b254-c3adbd7ed10f"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [  {
			"_comment": "Fastbreak Lunch Items",
			"ItemLineNumber": 1,
			"SalesItemId": 3119,
			"MenuItemId": 1813,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12551,
				"SalesItemOptionId": 20899,
				"Quantity": 1,
				"Name": "Honey BQQ",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 8599,
				"SalesItemOptionId": 4036,
				"Quantity": 1,
				"Name": "Souce on Side",
				"UnitPrice": 0.000,
				"Modifiers": []
			},
			{
				"ItemOptionGroupId": 8678,
				"SalesItemOptionId": 4099,
				"Quantity": 1,
				"Name": "Blue Chesse",
				"UnitPrice": 0.000,
				"Modifiers": []
			},
			{
				"ItemOptionGroupId": 13177,
				"SalesItemOptionId": 18978,
				"Quantity": 1,
				"Name": "Pota Wedges",
				"UnitPrice": 0.000,
				"Modifiers": [{
					"ItemOptionGroupId": 11513,
					"SalesItemOptionId": 14677,
					"Quantity": 1,
					"Name": "American Cheese",
					"UnitPrice": 0.6000,
					"Modifiers": []
				}]
			}]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d49d1f6-fb92-4b19-b62c-0312f4ee2153" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderId"><con:configuration><token>OrderId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="3f0fdb1d-894a-4d2b-8b38-de301e4bd2f7" name="PromiseTime"><con:configuration><path>declare namespace ns1='https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5';
//ns1:Response[1]/ns1:Order[1]/ns1:PromiseDateTime[1]</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8041f5c0-6c66-464c-812d-7d8c5c884293" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="e1685c4e-34bb-4905-961e-343a22abd4e0"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="12067808-002a-4ad7-a47e-ef685ac1c3d9"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="9fcf8ac9-ca63-4768-9914-2f18f11569e1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>11.03</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.52</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>12.55</con:value></con:property><con:property><con:name>orderid</con:name><con:value>14342</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="5b892a00-1884-4538-86b0-b329ffa288e3"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "RestaurantTip": ${Properties#resttip} ,
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f1c376d-cb48-4981-9b81-d0796751347f" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="6ca9db39-65be-49f0-9d98-c10175261a50" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>declare namespace ns1='https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c';
//ns1:Response[1]/ns1:Order[1]/ns1:OrderId[1]</path><content>${AmountProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="646ae7c1-a2aa-4706-a48a-2540135c9040" name="OrderAmountMatch"><con:configuration><path>declare namespace ns1='https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c';
//ns1:Response[1]/ns1:AmountDueAtSite[1]</path><content>${AmountProperties#amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="dd0d67da-54cc-42f4-896d-679e0fdf6688" name="PromiseTimeValidation"><con:configuration><path>declare namespace ns1='https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c';
//ns1:Response[1]/ns1:Order[1]/ns1:PromiseDateTime[1]</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55537256-0ced-44b3-98e7-e4ee992b3b1c" name="HasFailedItemsContainCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${AmountProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="8fa57e95-06c0-495f-9deb-aff9adf0221e"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PayAtSite/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b993867c-d281-45c3-beeb-52d920d2d19e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>EndPoint</con:name><con:value>https://bww-pickuporder-api-chtest.cloudhub.io</con:value></con:property><con:property><con:name>ClientSecret</con:name><con:value>1B44fE3b0dCD4120ae875C90a661bd53</con:value></con:property><con:property><con:name>ClientID</con:name><con:value>dfdbd245cb7746229f51d39f40efbffa</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>ptime</con:name><con:value>2018-12-27T13:30:00</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite id="cae33665-c3df-4c82-a811-e9f4565b778c" name="PickupOrder_Scenarios-PrePayment-QA"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase id="d4aea669-141a-4f36-9a1b-6918580ee290" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-SingleItem" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="b8c7d5ed-b308-49cf-81fc-7e38d30f3cfc"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="fe14a369-eee6-4bb4-ac8b-fe1691ba2a3e"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
      "ItemLineNumber": 1,
      "SalesItemId": 2888,
	 "MenuItemId": 1674,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="8d9fec53-0ee8-4d66-bd6a-f1b11e3ea427"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="20fd5432-b87a-45c8-a2f1-d4c82427991d"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="2a4afbca-7d9e-4a48-b9d6-f5293d639b28"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>8.72</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>10.47</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19160</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="97c7de79-811b-48a5-a33b-0ba8e97519b1"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="a2c2bbc7-ee92-48f7-bb24-48a7c28dbdbd"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="bbc7dcae-0d57-47fd-b92a-1a5f0baf45d5"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>549091d9-9041-4d7e-938f-807b2f6f6e84</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19160</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=549091d9-9041-4d7e-938f-807b2f6f6e84</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>10.47</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="83955415-37ea-48f7-bf2f-f663da711805"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="8166c1f7-d504-4fba-9491-c337c4b4a7f6"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Referer" value="https://payments.uat.freedompay.com/Checkout/Payment?transid=549091d9-9041-4d7e-938f-807b2f6f6e84" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="93edc9f2-ea5d-4ea8-a62b-35f882944b4b"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="a57229f0-73a8-41a1-9786-7b9842229b9a"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f09d82ab-899d-489f-b32a-d0698abd7151" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85fa3c75-f42e-42ea-b301-4b9518cee076" name="AuthorizationStatusCheck"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7ebfbb7c-3b8e-481a-859d-1af6bdea4f61" name="AuthorizationAmountMatchCheck"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="baf76fdf-0ec0-47e0-a738-d93b2874949b" name="CapturedAmountMatchCheck"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1a98f946-1d6a-4ed0-aa88-eaf510220ccd" name="ProcessorResponseCodeCheck"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="3652a88c-10a7-48e5-96c1-4c006aeedda5" disabled="true"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="bd4f523c-e64e-476d-aae5-0a7ffc6f115d" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-86edModifiers" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="b0aa64e0-2ede-4be4-b425-0899a1fc7379"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="dff897b8-3bb2-4c1e-a0ef-5e1ddb4c97f3"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
   	 "_comment": "Item with 86ed modifiers",
      "ItemLineNumber": 1,
      "SalesItemId": 2896,
	 "MenuItemId": 2421,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [{
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="227d05cb-f23a-496c-9907-46009df9f020"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="dfcee195-1b1d-41bb-b4b4-5bcd0d564a87"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="e2ff532a-4e17-4bc2-b3ef-74ad06cb830e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>2.0</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>3.75</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19120</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="33a6a33a-0a29-4bce-ae6d-65d7847e904e"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="cd6bcf6e-99f3-49dc-8db8-f7476baafd1c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="2b431b76-82ca-4421-901c-1a06bab103c1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>cc083192-1db8-4fe5-bf82-f278f9438429</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19120</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=cc083192-1db8-4fe5-bf82-f278f9438429</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>3.75</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="d0768015-dc1a-45e3-8bb9-fad401fe80c0"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="2e171a7c-8c9a-4c77-bb88-263d5096afe6"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="5467993d-4d6d-45c3-98df-72b398eef4f4"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="c27ec311-6f2f-42ee-b614-94597cb32808"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="ec31d97b-7c8b-4f63-a9da-54aab186f1d8"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="dedbeadb-5647-47d0-a3b3-40ee7c45e06a"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="9cff7290-6390-481a-a3de-31934c666fca"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="b94aa4ed-a324-4043-ade3-a5faef50ed3b"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="79afa122-2684-43ca-83d2-458b03165ba7"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="10911721-f562-4044-82b9-300de8cc0238"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="e4e48760-df58-4420-9150-1a85a2e1476e" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-86edItems" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="21f69d15-ae5e-4372-86db-3c267eacbc09"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="b5816608-a31d-4193-9020-21ce3a17d4b6"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "86ed Item",
			"ItemLineNumber": 1,
			"SalesItemId": 3666,
			"MenuItemId": 2150,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": []
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="8d382093-df2b-4032-9e9b-821184cdc41e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="fcbafbab-c3ac-4443-8030-59d522fb07a4"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="58419a0c-baae-4c6c-a33a-6f1e2853ab2a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>4.19</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>5.94</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19118</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="7e0cda79-7142-4d4b-abd1-42887bee3912"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="eaf8d1b3-46ea-4b39-aae0-3f28047d486f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="47db275a-1638-4c3a-823a-1f8dabc31569"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>a82fd20a-eaf0-4464-9c13-923cf9006476</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19118</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=a82fd20a-eaf0-4464-9c13-923cf9006476</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>5.94</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="0c1416b7-fc8a-40c0-970b-1ed36692a78b"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="b09894e5-e5ee-4f90-8859-274f78631177"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="8e157abc-4bfd-4f42-9e27-3e2517697291"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="1435ff99-0708-4572-9f01-2e09ed3474bf"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="b4208e9d-7739-4b87-a5bd-08a78986b328"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="ffd811eb-96cf-4bcd-9c03-1b7e7b1646b7"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="061bb8b0-5556-4f41-b0d4-af82c0a01bdd"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="c435534f-24a4-466b-bbec-5daadc8eba07"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="798ce246-f14e-4b44-85ee-a9c37271d728"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="aeb11dee-0058-4b97-8590-f3b20160c00e"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="4a708a8e-2bec-4491-8ec7-fc5bbfe166ae" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-DrinkItems" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="e3c638df-c21f-4d29-a4b1-b40f74e6d201"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="06c1daa8-1d27-4773-8cb3-183a21549b74"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Drink Item",
			"ItemLineNumber": 1,
			"SalesItemId": 4585,
			"MenuItemId": 2149,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": []
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="87618719-ca36-45e9-9b5b-6d6089b5bebe"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="3a791a76-cd23-4f7c-b2e9-ef1b3b5422f5"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="d0b6648b-8cc9-43d8-95c7-190281959aa6"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>3.32</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>5.07</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19078</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="6d0a90cf-f368-4ff8-8450-05b9c1644e73"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="ac9a155c-6f42-4627-b872-4e5b47b896a6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="dfde593b-48be-40b3-8614-a7c943b8c365"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>6fe6f32c-e211-42a0-bc23-4619117605ca</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19078</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=6fe6f32c-e211-42a0-bc23-4619117605ca</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>5.07</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="03a1c11e-22aa-4c62-a6e2-1383e03ce6e0"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="28ad4e7b-cab1-4d34-b0bc-403d26ee1456"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="68492449-b85c-4918-9bfe-810a7cd20304"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="61c6f9f2-8198-4707-944c-3ad2ea6724f4"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="a672e351-e1e2-4a93-97dd-9f5b8c4157fc"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="f4066f17-f9cb-452f-96f4-d15b8f650964"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="546a5038-61f6-4007-8849-88182f25d864"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="5100971c-0063-422a-9105-831ca1fa0138"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="9c708437-474f-49d9-8da0-a378b094f2d9"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="1b835b48-05e4-4baf-a28b-ada86e8e97c3"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="76ca2017-35be-4deb-b755-6a2c07660e60" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-FastbreakLunch" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="0021d311-440c-4c1b-92aa-ef23dcb29db7"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="60a7be9e-7e1b-44a6-80d1-2672a7dcd067"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [  {
			"_comment": "Fastbreak Lunch Items",
			"ItemLineNumber": 1,
			"SalesItemId": 3119,
			"MenuItemId": 1813,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12551,
				"SalesItemOptionId": 20899,
				"Quantity": 1,
				"Name": "Honey BQQ",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 8599,
				"SalesItemOptionId": 4036,
				"Quantity": 1,
				"Name": "Souce on Side",
				"UnitPrice": 0.000,
				"Modifiers": []
			},
			{
				"ItemOptionGroupId": 8678,
				"SalesItemOptionId": 4099,
				"Quantity": 1,
				"Name": "Blue Chesse",
				"UnitPrice": 0.000,
				"Modifiers": []
			},
			{
				"ItemOptionGroupId": 13177,
				"SalesItemOptionId": 18978,
				"Quantity": 1,
				"Name": "Pota Wedges",
				"UnitPrice": 0.000,
				"Modifiers": [{
					"ItemOptionGroupId": 11513,
					"SalesItemOptionId": 14677,
					"Quantity": 1,
					"Name": "American Cheese",
					"UnitPrice": 0.6000,
					"Modifiers": []
				}]
			}]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="8ea069d3-d900-494e-82d8-e78523dc2a86"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="65c4d877-0c2c-4cb7-8052-8c96aa634c56"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="70efc155-da1c-4583-8e52-987d51674725"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>11.03</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>12.78</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19087</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="30b45da3-146b-43f5-9def-a19518ef2e04"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="b08fd8a9-0874-4239-b4aa-3ab0dfdaf259"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="2b6d82b8-358d-4237-b11c-19e964595dc5"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>696a8dc8-c395-4690-9ca8-f21c601fe7a7</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19087</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=696a8dc8-c395-4690-9ca8-f21c601fe7a7</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>12.78</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="e157708d-29fd-488f-855a-bbea5696e6ec"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="d0e6cdb1-7943-4b8e-8ef4-34fcb768c49c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="a97f63ca-9581-48a4-ab73-9f9dc05d3ea5"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="d9ec5588-ed1e-4077-a98a-31f4a85dd108"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="024de8ee-b59f-4a05-a0c8-e57c539692e6"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="3054fbcd-23ae-464a-b2e5-6c950048cd46"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="f3210327-06dd-40f5-b1d5-5021a3103046"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="828776da-bf38-4292-ae04-e6a788d33e53"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="9a16ba34-fd0c-487a-8018-dec3a95e686e"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="029376fa-8a93-40b6-afc9-897cfb4fe0d6"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="80c3c5d4-b936-453a-a6ea-8dedfc314d04" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-ItemsAndItemsWithoutModifiers" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="69e0df1a-acf5-414f-aca3-7bca6e5d77e1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="0979607b-b03a-4bdc-acf0-389d5020433d"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Item without modifiers",
			"ItemLineNumber": 1,
			"SalesItemId": 2888,
			"MenuItemId": 1674,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": []
		},
		{
		    "_comment": "Item with modifiers",
		     "ItemLineNumber": 4,
			"SalesItemId": 3791,
			"MenuItemId": 2098,
			"Name": "Traditional Small (Approx. 9)",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12563,
				"SalesItemOptionId": 17171,
				"Quantity": 1,
				"Name": "Sweet BBQ",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     }]
		}
		],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="8977677b-9778-41da-9aab-e7ce5abd3f95"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="6affea1b-78cf-47bf-972c-197323a589db"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="780e934a-362d-4f13-9b1a-22b214c7a873"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>17.34</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>19.09</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19081</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="b5d828f6-50d6-42ec-ad56-531a9fcf0ef2"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="96ba6fd7-93fd-4371-9aaa-44d0c8711436"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="31032e7c-3f11-4b53-afd7-8e1c1ff95c6e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>1c86dd4b-ae20-4ec3-8034-1be025a422a9</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19081</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=1c86dd4b-ae20-4ec3-8034-1be025a422a9</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>19.09</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="50212a43-cae4-43b2-9137-64ce2831f86d"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="151adeb8-3268-496c-9b3c-e579c6954368"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="66c3fbff-a9cd-4e90-b999-d8686f656a79"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="77bf85d7-b28e-412a-9389-6a40967464d5"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="c23ae7b9-782b-4bc1-bee6-3aaad5f2e057"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="01270c58-747d-44fa-8c02-bb48a3a225f6"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="607cd41e-b5ca-446a-add1-ab11ff5aab8b"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="87096d86-43a1-4e45-8780-bcfc9b2d5c53"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="f07c4aef-cc56-4d04-ba97-ad0a393146d4"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="417922e2-3b7b-4c78-9ada-834abb63b51f"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="e6eb9c90-b0e3-4361-9c63-60be74bfc7ab" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-ItemWithModifier" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="4bee3009-6aa7-4112-ae35-f428619cd954"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="525e5790-3a12-49ff-bae2-2c18aae65782"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Item with modifiers",
			"ItemLineNumber": 1,
			"SalesItemId": 3791,
			"MenuItemId": 2098,
			"Name": "Traditional Small (Approx. 9)",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12563,
				"SalesItemOptionId": 17171,
				"Quantity": 1,
				"Name": "Sweet BBQ",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     }]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="62ce8c3b-9c9c-4d3a-8cea-a8ae91108e46"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="462e44cf-9fd0-414e-ba4c-1893f5a3e24c"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="3d4854d5-e47b-4f42-9dcd-30d1f5a2ee19"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>12.98</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>14.73</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19082</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="a70338d4-3854-4b56-affe-be368052f4d6"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="eccd6281-17a7-49ae-b184-9e2c8f50de68"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="2751f4d6-cdbe-4f6f-a8fc-bd6a8d373dc1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>eb66f542-2baf-439c-a661-c5d85bb3c089</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19082</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=eb66f542-2baf-439c-a661-c5d85bb3c089</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>14.73</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="96829ec7-939e-4234-8c33-02ad3fa7e58a"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="d3c2faf5-7135-4244-b0c1-608c9ae2c487"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="b3b7a9ba-19e9-4682-95c3-dc54a625e557"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="bd6c12cc-5daa-4060-8ece-f05216185593"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="7861bade-5dcc-40d6-bda0-c359222fee7a"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="cb4f8c05-b818-4aad-8370-32b323a68dfb"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="eb24cdd4-ce21-4ddb-b2b1-384575bea239"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="a6d7326b-2f9e-462f-b288-0dcb12193788"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="9700496e-4213-467c-87da-816766ae799d"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="92667445-5018-43e5-b92b-e2f9807f205b"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="5cf686d5-2592-497a-a836-e8d78ed429da" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-KidsItems" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="ca2e3259-c9ec-4a59-93e0-e205825d69a2"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="87c9af3e-1fd6-4d2d-8be9-148564e3121c"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Kids Item",
			"ItemLineNumber": 1,
			"SalesItemId": 3403,
			"MenuItemId": 1066,
			"Name": "Mac &amp; chesse",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 11069,
				"SalesItemOptionId": 8220,
				"Quantity": 1,
				"Name": "French fries",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 9754,
				"SalesItemOptionId": 7884,
				"Quantity": 1,
				"Name": "Kid Milk",
				"UnitPrice": 0.000,
				"Modifiers": []
			}
			]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="e3951099-31be-40b7-82b3-e55302f41cf9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="f2dc7d39-275c-44f5-b6db-ee7b5cd653fe"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="267382ec-acbe-41f6-9ad1-cf659e116fbe"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>6.08</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>7.83</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19089</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="c8be04f4-3d66-4265-af3f-3f3019cc6751"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="c161d43d-dbb4-46d9-b2e7-ea630a792658"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="d6cf5fd3-8371-4d08-8c6b-abb751c6e2d3"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>7668f40b-b22d-415b-9d8b-e97b1288a0aa</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>orderid</con:name><con:value>19089</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=7668f40b-b22d-415b-9d8b-e97b1288a0aa</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>7.83</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="9bcae1dd-80a4-4dcf-a943-3b6e446ea96b"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="be0d58ee-034b-45ad-b2ea-41f72158496c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="05e34dbb-bb61-4699-8e38-b1ee0de4ee81"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="0cbc3d64-dae2-45cc-b80d-2ad13736cf6c"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="1d54afc9-e52e-48fc-ac99-73c0618094d8"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="a1f9cf7b-6e2d-48b1-a61c-70ed7023d9b4"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="5416507c-083b-47a1-ac50-e0767cf387e3"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="a414f797-4e53-45a5-ab7c-05914c7b202d"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="ee484724-38e0-4f9f-a905-fecd9c09c278"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="987ad7a4-86bf-4899-8bfc-f79eeddfa3ec"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="39e0c444-06f5-4d20-8505-6f871344eecb" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-NotContainMinModifier" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="8d1a88fe-e1f4-48a8-9442-6cd1e151fca2"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="2a6d377d-970d-4da8-8276-fd3dca045a4f"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Kids Item with no minium required",
			"ItemLineNumber": 1,
			"SalesItemId": 3403,
			"MenuItemId": 1066,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": []
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="18b1ef68-5af9-47e6-b1b6-41468489a248"><con:settings/><con:configuration><codes>406</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" name="Item does not contain the minimum required modifiers" id="4ffe3c9e-18b7-4d3a-95f6-947d2729b9e0"><con:configuration><token>Item does not contain the minimum required modifiers</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="577690b5-1a55-406f-83ce-1e703e525f1c"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="c0363382-d6d5-41d1-bf68-505fe8322f2e" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-OrderAmountOver$175" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="43060282-89d7-417d-9479-2b4244700b6e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="4146d02d-d75d-41b5-b564-6a5de3fc8981"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
			"_comment": "Party Items",
			"ItemLineNumber": 1,
			"SalesItemId": 3870,
			"MenuItemId": 2129,
			"Name": "Party wings",
			"SpecialInstructions": "",
			"Quantity": 8,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 11974,
				"SalesItemOptionId": 14913,
				"Quantity": 1,
				"Name": "No Souce",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     }
			     ]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="f7508bb5-2784-4b90-9e3d-858e709b4aa6"><con:settings/><con:configuration><codes>406</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" name="Order total amount exceeds configured limits" id="c035f938-0e26-4bd3-aa8c-16200b4f2359"><con:configuration><token>Order total amount exceeds configured limits</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="8446854c-e65d-472e-92db-02f244c976d4"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="16351250-f47e-4e8b-82e7-f0c18308c580" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-PartyItems" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="2689a2d5-ee53-45b1-869d-145996b5b96a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="3ae80a18-a096-41fd-87fb-db2ca9780b6a"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [  {
			"_comment": "Party Items",
			"ItemLineNumber": 1,
			"SalesItemId": 3870,
			"MenuItemId": 2129,
			"Name": "Party wings",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 11974,
				"SalesItemOptionId": 14913,
				"Quantity": 1,
				"Name": "No Souce",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     }
			     ]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="ca2361fd-47f0-4eeb-9ee9-14daddfc693b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="9b7957e6-5d31-4e7c-bcc2-610e2af383d4"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="cb49b0cb-6715-4b2f-9b2c-42737ae7d606"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>121.04</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>122.79</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29745</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="e801f789-666c-476c-b841-6e29cf568dfb"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="d15a7f22-2deb-4f02-ae48-64e97d3614a2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="16c3821f-6195-4391-aa2a-2bc979bbddca"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>d3a1a0fd-47ab-49e7-aa40-9454dbc694ae</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29745</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=d3a1a0fd-47ab-49e7-aa40-9454dbc694ae</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>122.79</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="dc81d8ab-009e-4b46-a3c3-5d5a1eb4574e"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="138c941d-72ad-47a5-b6d4-ba83e3a2e03a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="62828ccd-65c1-4955-ac2f-70e5769ba0b0"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="8f495f5a-865b-4641-bd84-aa71cd0a6a4f"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="7504cb7f-55be-454e-9373-31123b2f0bea"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="04a9548b-bde1-4bb0-a9eb-6b4d60ee36f5"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="b5ad1b3b-856e-4f71-87cb-01dfef4c3766"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="7ebccc7a-ffc2-4f1e-87e0-b90f89b1a1db"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="2e6e39ba-5187-4913-8356-7c0c7094ea32"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="fce96609-fca0-4391-934e-a09c3b8504e6"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="fae85e9c-7cff-4064-aba9-34e47c5bec18" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-ThursdayWings" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="8f2a60ac-c702-4836-81bb-5166be47a02a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="879b21c6-b5fe-4d46-b347-7b6b714fca9d"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [ {
			"_comment": "Thursday Boneless Wings",
			"ItemLineNumber": 1,
			"SalesItemId": 3700,
			"MenuItemId": 1986,
			"Name": "4 Boneless Wings",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12565,
				"SalesItemOptionId": 17170,
				"Quantity": 1,
				"Name": "Teriyaki",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 13755,
				"SalesItemOptionId": 20922,
				"Quantity": 1,
				"Name": "Ranch",
				"UnitPrice": 0.6000,
				"Modifiers": []
			}
			]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="0e0e6124-956d-4a30-a420-e5957ae36955"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="6e42a36d-eacb-4b3c-91f9-fa8f12ffce15"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="b6641748-1f15-479b-bc18-98a6db6084b7"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>3.64</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>5.39</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29746</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="eb8059ad-84a1-4b8a-9f66-bd2905d96d26"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="ca8feb00-4179-42b3-b70d-3324249e8a0c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="c38ac0ab-f00d-47e2-97bd-83387a7d7717"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>1fae68bd-ad2d-4644-9017-21ab174ed8c5</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29746</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=1fae68bd-ad2d-4644-9017-21ab174ed8c5</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>5.39</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="32399045-e3cd-4ffe-931b-98ec51dc747b"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="ab16a650-1e58-44b4-a4d5-2dbbc011ff5d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="d2e29b3c-1920-46e1-a3c6-a3a022f10eae"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="f9d1e42e-e06e-4061-8a49-d8bdfbff430a"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="49b8deb8-a04b-4d1e-8718-28f8c4451e7a"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="bbb4d42c-7aaa-4b83-a60a-11f7a569547b"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="c68705c1-2ab9-455f-80d2-eb72065b8720"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="2b910369-9edd-46f2-b824-2f2fb3b427a9"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="c5ec28b5-f1ed-4e83-9b4c-a64263b81d22"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="85efa051-de65-4e22-8ab7-f9bb25c85bc8"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="4e7f8745-5714-41ee-b257-d515a79b8cb3" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-TuesdayBOGO" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="7227b769-778e-48d6-8541-5a31064338ec"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="6445f25e-47db-42da-a95d-e2428fbbb004"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [ {
			"_comment": "TuesdayBOGO",
			"ItemLineNumber": 1,
			"SalesItemId": 4076,
			"MenuItemId": 2200,
			"Name": "2 Boneless Small (Approx. 24 Total)",
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12568,
				"SalesItemOptionId": 17313,
				"Quantity": 1,
				"Name": "Teriyaki",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 11686,
				"SalesItemOptionId": 13575,
				"Quantity": 1,
				"Name": "Blue Cheese",
				"UnitPrice": 0.6000,
				"Modifiers": []
			}
			]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="a312a10c-17b6-4b47-aa5b-f0b8bb0dee98"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="3ccd1269-23d5-485c-8705-58b59bef6371"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="6ed67fa6-8caa-41ea-941a-125539e85188"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>11.77</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>13.52</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29747</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="f6ea0327-302e-4657-b6c6-1eb9b17e19fe"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="c4e4f9d1-39d9-406f-a088-5eec23913aea"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="407797ec-4677-4eed-bfeb-c8e3185b232a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>51bd1e55-5d37-4b92-adee-a380a07cd140</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29747</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=51bd1e55-5d37-4b92-adee-a380a07cd140</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>13.52</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="4aa48638-80ec-4c19-8125-66cdf8112936"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="ea15571a-8e9b-4922-addf-8f452a94485c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="ae6e8799-d65b-4e26-b332-595959fae4d4"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="906752c6-98f2-4290-95c5-a9967d55f352"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="83e0ea44-28e1-41d4-a8d2-8a5e691177ea"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="642e803f-ee48-4a86-a9e8-3650a03b9663"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="ea3de855-d014-4ca8-a8c7-876114721bc4"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="8951ddf3-94ca-41f2-b07c-1a642beef626"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="7b0d80f0-237c-4438-979b-07d197313f36"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="9ee3641e-97e0-477c-8ef5-c33e3769854d"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="6f5807b5-5107-4cd7-b2f3-888b4f1566f2" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-FastbreakLunchInvalidTime" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="df8cfb00-bf3b-464f-8c7d-676a1932dd72"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="d654e614-1e82-4c15-87fd-6f9b835b7e28"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [  {
			"_comment": "Fastbreak Lunch Items",
			"ItemLineNumber": 1,
			"SalesItemId": 3119,
			"MenuItemId": 1813,
			"SpecialInstructions": "",
			"Quantity": 1,
			"NextModifierSequenceNumber": 0,
			"Modifiers": [{
				 "ItemOptionGroupId": 12551,
				"SalesItemOptionId": 20899,
				"Quantity": 1,
				"Name": "Honey BQQ",
				"UnitPrice": 0.0,				
				"Modifiers": []
			     },
			     {
				"ItemOptionGroupId": 8599,
				"SalesItemOptionId": 4036,
				"Quantity": 1,
				"Name": "Souce on Side",
				"UnitPrice": 0.000,
				"Modifiers": []
			},
			{
				"ItemOptionGroupId": 8678,
				"SalesItemOptionId": 4099,
				"Quantity": 1,
				"Name": "Blue Chesse",
				"UnitPrice": 0.000,
				"Modifiers": []
			},
			{
				"ItemOptionGroupId": 13177,
				"SalesItemOptionId": 18978,
				"Quantity": 1,
				"Name": "Pota Wedges",
				"UnitPrice": 0.000,
				"Modifiers": [{
					"ItemOptionGroupId": 11513,
					"SalesItemOptionId": 14677,
					"Quantity": 1,
					"Name": "American Cheese",
					"UnitPrice": 0.6000,
					"Modifiers": []
				}]
			}]
		}],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="daa2b25e-30bd-4962-922c-de7afb2231a0"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="7760e4bd-d24d-4c14-99a5-92683b3c9be7"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="acd498eb-3bb4-44c8-af90-69766ad7baae"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>9.2</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>10.95</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29748</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="62545333-ed1c-48bb-ad2a-ac4111b1041b"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="fb6eebb8-c22f-4629-912e-1054303e1a23"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="64a39543-b617-4825-8a29-39e573138a63"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>a22772f0-43b5-4576-a8f7-f84937c02f41</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29748</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=a22772f0-43b5-4576-a8f7-f84937c02f41</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>10.95</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="942e74f4-ca73-4e84-a0b6-acb330f29512"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="7c1d5515-654f-46f7-b9fe-2f8cdadf3164"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="f1d5a305-326f-4845-8f3b-42f487c0fc8e"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="f32696c5-b606-4aea-9fb8-139ec47abe06"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="74ea0469-fb2a-41f4-a059-81435144c913"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="92a7d1ff-1bc8-459f-92f7-2e0acfef2f7b"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="6e184435-fb5d-49d0-b4fe-d7439d2ed238"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="4a9464fd-a3ae-4c83-af24-2cc49bed2815"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="e94a2c5b-f6dc-4efd-9752-e7067fc277db"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="3c9a8262-4ec4-4546-b6e5-b00c7a1f5139"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="4f9abaa3-4e46-415c-9c7b-aae742121bee" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-AMEXPayment" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="1dc1c053-0fda-4e32-998b-2f7425a72f18"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>378282246310005</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="734fa90c-d5d2-4ab0-96f5-6f31fb9be4d5"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
      "ItemLineNumber": 1,
      "SalesItemId": 2888,
	 "MenuItemId": 1674,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="4a907a9d-b010-47bd-acdb-dbc3157aae45"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="521b6507-f709-4445-b54b-edc59f212a4a"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="6934a904-059c-4002-818e-1847ed3807d0"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>8.12</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>9.87</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29749</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="8849cadb-723d-422c-a888-fa75941c5dc0"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="03090449-d62c-4329-bc64-d74d1c078722"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="4e25af9f-e00a-41b7-abe0-ed4749cd2419"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>ff55c3c7-bf55-4c4b-8674-89fe5fc074aa</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29749</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=ff55c3c7-bf55-4c4b-8674-89fe5fc074aa</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>9.87</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="1161b806-3360-46e1-96d8-c97cd6d478eb"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="da3a8532-0ffb-48c1-a12c-ba119ad9dd49"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="1e97222f-071b-4bec-b1e0-8bbfc54ac551"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="00b226d1-34b6-4e0d-ad2a-60dcae46f73a"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="e38466c7-caed-4525-a96a-41b6ec97551a"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="7d5c523f-b531-4280-828e-8c75a3ccbcec"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="56ad11be-9503-4ccc-b73a-cfea06f12ae2"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="b71175cb-f5af-4fc0-a76b-ca84b4dc4bc0"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="f5722b7c-ec3c-4ef0-96b1-a8d8a41b4cd6"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="17cb202c-0de1-42c1-947b-3d7897c45293"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="82f22766-2d37-4e9f-971e-91b777bd8dff" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-DISCVPayment" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="e27da66d-5505-40a2-bc5b-db1cfacf481f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>6011111111111117</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="81d616a2-6042-4c3c-94a3-078f0a4a036e"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
      "ItemLineNumber": 1,
      "SalesItemId": 2888,
	 "MenuItemId": 1674,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="716c3c9e-74c7-4ee7-b30a-dab564ec30e7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="91f700bf-af44-4db4-8958-4532544bc501"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="fe60279e-ae3b-45cd-a0c1-5809ed30250d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>8.12</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>9.87</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29750</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="ea55e4c4-ef8a-4e68-92c3-1ee61ed80a18"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="36aec7c8-b593-4a2b-9bc1-02f213f5cda9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="6228cee4-a6cf-4576-85ba-4486bb432bb9"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>60927a89-aaaf-411e-91b6-34431a4ac654</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29750</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=60927a89-aaaf-411e-91b6-34431a4ac654</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>9.87</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="35aaa7a8-1bb9-4cf0-8120-e1c8e9673a94"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="f5d16576-a25d-44ab-91fa-2d04bd4aef6a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="737439dd-d781-4efe-a685-ef0023d172f5"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="43abb722-07fd-4ea1-a545-f1fb09d5c1fd"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="081ffbaf-2e24-484a-a82e-5558e67e0150"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="fe318e49-d41c-41d9-8aeb-b8baeb358ca9"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="57c1b02b-790d-435c-9cda-59ab57994340"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="24ea54b2-c4ac-4ce3-b47e-6e0a9f9f6b82"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="48c0256c-a802-43f9-83c4-e5845264eea5"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="ec28844b-2273-40fc-a57e-0995c8c927ed"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="0527f832-630b-4bf5-973a-eea8f7eb9034" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder- MASTERPayment" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="7f3e4fd1-0b4b-4b62-bd1b-b3e0e5267bae"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>5555555555554444</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="5f330b9a-b56b-4281-addd-a9d711ac62da"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
      "ItemLineNumber": 1,
      "SalesItemId": 2888,
	 "MenuItemId": 1674,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="4f62824e-7946-45ca-a656-6f4020fd5ba2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="7876baa3-a021-41a3-baa2-e9773af05084"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="25f7d919-092c-42c6-a311-064a932ec5c1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>8.12</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>9.87</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29751</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="0a90db03-1a8f-446c-b5d9-2065ab2a7bfe"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="229a7d7a-0fb6-480e-b742-6ae0a8cf78a8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="dcb099eb-180e-4577-82e8-07317f7ee08a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>1815eb90-e4cd-4458-9e78-efeb3bd6c5f7</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29751</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=1815eb90-e4cd-4458-9e78-efeb3bd6c5f7</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>9.87</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="b6ef096b-7010-4262-bf95-60fe8b31d9ae"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="553f5585-a85b-4a83-a08a-29ebeef4bc67"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="ff6b9110-741b-4e65-b749-3395e7f74288"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="9d23c9c5-3cc3-4981-894b-690c4cd090df"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="2e7ca254-a8f0-47ae-a60e-c7f3a40132be"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="35b5a568-4246-4743-a7b8-4739e80250ce"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="80364eee-16bd-4949-98ce-9ceaa2e0ecae"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="e9228eaa-15f6-47f1-91fc-9b3af024943b"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="9f434caf-e523-43f4-b176-70379da7503f"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="312b303d-ac46-4434-8094-58fa6b0bb4ef"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="2944ffa9-fef6-4a5b-8076-96f0d28e2d7b" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-JCBPayment" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="2695b56a-0ae9-4b14-a12d-a77f2f57be6a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>3530111333300000</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="2cf0efec-1fc3-4be6-a380-936ae64e618a"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
      "ItemLineNumber": 1,
      "SalesItemId": 2888,
	 "MenuItemId": 1674,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="ae873e56-5b14-460c-bcbd-cdcd49357ee9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="5a4f8221-c591-46bf-827b-159c0acc8522"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="01f6cce8-025e-4f7a-8e09-d27fb6f17210"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>8.12</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>9.87</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29752</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="c9e37c3c-fd74-4f31-9cf6-cc974aedb7d7"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="95b8cff6-2951-42af-b43e-40e3ac6813cc"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="a95c76df-cdaa-4fa0-ba31-e7018ba8d570"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>36247c21-2b00-4cf4-94bf-8f6ed8726b0c</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29752</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=36247c21-2b00-4cf4-94bf-8f6ed8726b0c</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>9.87</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="841719cc-d6cc-41c0-a423-9c4e5877b508"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="8ec70a10-ece7-44b2-b2d3-6613f7e0e358"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="fdd93bcd-0f8f-4d62-bb2b-85af49973ee1"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="0624e509-a002-442e-bd3f-12437a9c42f7"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="9de11af4-66f8-4987-906b-a871d7e7429b"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="234a6ef1-866a-4ce8-aea1-38cdb40896bf"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="a7e5a096-f810-4851-b722-f3fae009b766"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="57586f59-b476-4ccc-9cdb-d951ec35b171"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="2d436ccf-3874-4e0b-9f2e-f0274510e4b8"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="a87ac34f-f760-4dda-8cd0-57dfa5dc4556"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="9d69f395-d4f4-4523-bf11-9b583301e1c0" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-VISAPayment" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="9f94667a-5c6f-49e7-8d8d-ab1737138a21"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="ea1bce4a-f659-424e-bb82-2d5c33814508"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
      "ItemLineNumber": 1,
      "SalesItemId": 2888,
	 "MenuItemId": 1674,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="b786a08d-0007-49d2-893a-f6a824df0a12"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="352a1075-b7ad-4719-bfc7-765b68381020"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="13263afb-7ea4-44bd-aad9-a6e14011868c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>8.12</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>9.87</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29753</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="6494d831-8923-4518-8189-f518d90d10e3"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="c2733fe7-ffc5-40d6-8ea1-e38ad39ba8f2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="67bddb5b-58b4-4819-875f-eba1e897e38b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>99e380bb-356a-4fee-8dcc-722bc961a61d</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29753</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=99e380bb-356a-4fee-8dcc-722bc961a61d</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>9.87</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="6f1847cc-28ff-4f2e-8e60-4137dd5372ec"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="89617338-1650-45a0-a2e9-6feebe342595"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="5a8a874e-92b2-4694-81c0-dc82925c5206"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="6d59ec9e-b711-4cdc-83a1-8c2caa3f3126"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="19e2fd62-b0a8-4ece-8553-a30baf4f5992"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="25280628-ec39-4fdf-b442-9274d36c2be9"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="8e5ff8ab-6e10-4767-ae57-c9ee30d1e980"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="9f6c9e59-6c62-4182-9101-0b0da0ca8055"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="cfd7625a-b205-4680-b801-6729eb584ff8"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="dae1b326-336c-427e-9d96-8211fce3eca9"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="1ad9641c-57de-4e3d-8f41-e85285c9e629" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="PickupOrder-NonSupportedPayment" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="6b2ac5fb-12c6-4192-9e30-b6194cb0e946"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>38520000023237</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="94c1540c-8b13-4107-a248-9040c273e3f7"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
      "ItemLineNumber": 1,
      "SalesItemId": 2888,
	 "MenuItemId": 1674,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="2fd6e2e0-803e-4bfd-aad0-ad03d4de3b01"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="a80443e8-e844-4688-9934-0c0a83b14f93"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="632279cd-a56b-40a4-8243-efe9e1b485d1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>8.12</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>9.87</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29754</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="02dc2993-f5b3-4011-8a27-ecde52572044"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="550c6e77-3bdf-4437-8ef3-41cf5e136a2b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="13865927-7a25-4dfd-9fa5-2c82cf3735e9"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>710c8047-77be-4006-8338-f1f576620af5</con:value></con:property><con:property><con:name>siteid</con:name><con:value>3</con:value></con:property><con:property><con:name>orderid</con:name><con:value>29754</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=710c8047-77be-4006-8338-f1f576620af5</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>9.87</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="d99559af-7555-45c6-9095-94118d4cf0d8"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="64a8993f-d223-4f82-8955-395bfd15517a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardInformation.AccountNumber": "${Properties#ccnum}",
"CardInformation.ExpirationMonth": "${Properties#ccmon}",
"CardInformation.ExpirationYear": "${Properties#ccyy}",
"CardInformation.Cvv": "${Properties#cccvv}"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="2e6e5cd5-4517-449d-a888-b88d53ad2787"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="96f49587-99de-4040-97a2-90881b18d52e" name="ErrorCodeCheck"><con:configuration><path>$['ErrorCode']</path><content>400</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1ffd1880-c24b-4e37-8633-4557b2d26cf6" name="Payment Not Supported by NCR failed"><con:configuration><path>$['ErrorDescription']</path><content>Payment failed and order was not submitted</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="f3ad349f-21ca-43ce-acb1-d0019897250c"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="HTTPStatusCodesCheck" id="19e2fd62-b0a8-4ece-8553-a30baf4f5992"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationStatusCheck" id="25280628-ec39-4fdf-b442-9274d36c2be9"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="AuthorizationAmountMatchCheck" id="8e5ff8ab-6e10-4767-ae57-c9ee30d1e980"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="CapturedAmountMatchCheck" id="9f6c9e59-6c62-4182-9101-0b0da0ca8055"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" name="ProcessorResponseCodeCheck" id="cfd7625a-b205-4680-b801-6729eb584ff8"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="6cd16c63-1eb6-42e8-b8e3-e8762ea7b7ee"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase id="3fefb8ef-33d2-4575-a6fb-b3ea967b3525" discardOkResults="true" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="Copy of PickupOrder-SingleItem" searchProperties="true" timeout="0" maxResults="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">true</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\tinku01\Desktop</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="properties" name="Properties" id="8877b113-1539-4969-8f2c-83e7204fe083"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>cs</con:name><con:value>${#TestSuite#ClientSecret}</con:value></con:property><con:property><con:name>cid</con:name><con:value>${#TestSuite#ClientID}</con:value></con:property><con:property><con:name>siteid</con:name><con:value>${#TestSuite#siteid}</con:value></con:property><con:property><con:name>ptime</con:name><con:value>${#TestSuite#ptime}</con:value></con:property><con:property><con:name>email</con:name><con:value>st2@buffalowildwings.com</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>ccnum</con:name><con:value>4444333322221111</con:value></con:property><con:property><con:name>ccmon</con:name><con:value>09</con:value></con:property><con:property><con:name>ccyy</con:name><con:value>2020</con:value></con:property><con:property><con:name>cccvv</con:name><con:value>123</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPutOrder" id="78d40321-5335-474c-8243-14056ca2d950"><con:settings/><con:config service="PickUpPUTOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}" methodName="PutOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPutOrder" id="ca255592-bd7a-4e7d-b76c-bd6134f4011f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "SiteId": ${Properties#siteid},
   "MenuId": 0,
   "PromiseDateTime": "${Properties#ptime}",
   "LineItems": [   {
      "ItemLineNumber": 1,
      "SalesItemId": 2888,
	 "MenuItemId": 1674,
      "RecipientName": "Test QA",
      "Quantity": 2,
      "NextModifierSequenceNumber": 1,
      "ItemOrderingMode": 1,
      "UnitPriceOverride": 1,
      "EnablePriceOverride": true,
      "Modifiers": []
   }],
   "OrderMode": 1,
   "UpdateTimeDisabled": true,
   "PaymentMode": 0,
   "OrderSource": 0,
   "Destination": 0,
   "ShouldManualRelease": true,
   "TaxJurisdictionId": 1,
   "Customer":    {
      "CustomerId": "${Properties#customerid}",
      "EMail": "${Properties#email}",
      "FirstName": "Test",
      "LastName": "QA",
      "Addresses": [      {
         "AddressId": 1,
         "AddressType": 1,
         "IsDefault": true,
         "AddressLine1": "5500 Wayazata Blv",
         "AddressLine2": "Apt 1600",
         "City": "Minneapolis",
         "State": "MN",
         "Postal": "55416"
      }]
   },
   "CustomerAddressForOrder": {},
   "DeliveryFeeAmount": 0.0
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b945a8d-2f25-4e0b-a39c-1a13026c212f" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8db0fa5d-801b-4567-bcaa-81b653075cc1" name="Match content of [ResultCode]"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6135011e-1f4e-481e-a5ab-08d885c0419b" name="OrderIdCheck"><con:configuration><token>OrderId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2668a96d-d620-4ef6-b4a9-12e21d170fc6" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81476d26-be86-43cb-9fc2-9e8513fe6ffc" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${Properties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715b2cf9-7c1b-4279-b5c7-1b4e2721f54d" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="siteId" value="${Properties#siteid}"/>
  <con:entry key="verbose" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>verbose</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PutOrderPropertyTransfer" id="f8b15344-7ff5-47ec-ab59-eaec87d0175f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>amount</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['TotalAmount']</con:sourcePath><con:targetType>amount</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>resttip</con:name><con:sourceType>resttip</con:sourceType><con:sourceStep>Properties</con:sourceStep><con:sourcePath/><con:targetType>resttip</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>orderid</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>AmountProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="GroovyScript-SumAmtNTips" id="7af715e8-bbda-42b5-864b-681a161f3da1"><con:settings/><con:config><script>import java.util.*
import groovy.util.xmlparser.*
import groovy.util.*
import com.eviware.soapui.*

def a = context.expand( '${AmountProperties#amount}' ) 
def b = context.expand( '${AmountProperties#resttip}' ) 
log.info a
log.info b

def c= new BigDecimal(a) + new BigDecimal(b)
log.info c
testRunner.testCase.testSteps["AmountProperties"].setPropertyValue("totalamount",c.toString())
</script></con:config></con:testStep><con:testStep type="properties" name="AmountProperties" id="b8724774-8392-4816-be92-c606c89b3872"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>amount</con:name><con:value>8.72</con:value></con:property><con:property><con:name>resttip</con:name><con:value>1.75</con:value></con:property><con:property><con:name>totalamount</con:name><con:value>10.47</con:value></con:property><con:property><con:name>orderid</con:name><con:value>21199</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step_CreTrnscFPP" id="6426bae5-6d28-487e-8708-8fc8e62fcbe6"><con:settings/><con:config service="CreateTransaction-Pickup" resourcePath="/FP/v1/Transactions/Create/{SiteID}" methodName="CreateTransactionPickup" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_CreTrnscFPP" id="78b7c875-3971-4720-80e3-c57df4936c1d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
                "TransactionTotal": ${AmountProperties#totalamount},
                "TimeoutMinutes":1,
                "InvoiceNumber":"${AmountProperties#orderid}",
                "MerchantReferenceCode":"Test-Ref"
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/experience/v1/Transactions/Create/5</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09e36e46-c687-4e06-994b-12b5bc9f799b" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Existence Match" id="a92aeb3d-84e8-4e6a-b280-b3125b153688" name="Check for existence of [TransactionId]"><con:configuration><path>$['TransactionId']</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SiteID" value="${Properties#siteid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>SiteID</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TransactionPropertyTransfer" id="06b74b64-e0b6-4bb9-8133-9804738f8d09"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>SiteId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['SiteId']</con:sourcePath><con:targetType>siteid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>OrderId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['OrderId']</con:sourcePath><con:targetType>orderid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>CustomerId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_PickupPutOrder</con:sourceStep><con:sourcePath>$['Order']['Customer']['CustomerId']</con:sourcePath><con:targetType>customerid</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferToAll="false" entitize="false"><con:name>TransactionId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['TransactionId']</con:sourcePath><con:targetType>TransactionId</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>url</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step_CreTrnscFPP</con:sourceStep><con:sourcePath>$['CheckoutUrl']</con:sourcePath><con:targetType>endpoint</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>totalamount</con:name><con:sourceType>totalamount</con:sourceType><con:sourceStep>AmountProperties</con:sourceStep><con:sourcePath/><con:targetType>Amount</con:targetType><con:targetStep>TransactionProperties</con:targetStep><con:type>XPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="properties" name="TransactionProperties" id="34cc317f-af4b-4877-99d2-ae0f15bf8197"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TransactionId</con:name><con:value>c0205f8d-8d0f-4daa-b7eb-1909b5b02348</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>orderid</con:name><con:value>21199</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>https://payments.uat.freedompay.com/Checkout/Payment?transid=c0205f8d-8d0f-4daa-b7eb-1909b5b02348</con:value></con:property><con:property><con:name>customerid</con:name><con:value>68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:value></con:property><con:property><con:name>CCSubmitUrl</con:name><con:value>https://payments.uat.freedompay.com/Checkout/SubmitData</con:value></con:property><con:property><con:name>Amount</con:name><con:value>10.47</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="httprequest" name="Step_PaymentPage" id="9650d0bd-558c-4313-b7a1-e97c910b4e8d"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32a3ee5c-050c-4450-abce-5c03ef8e54bb" name="Step_PaymentPage" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${TransactionProperties#endpoint}</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="d1531cbd-0a06-442e-9805-7b918908ead8" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" id="f6627db9-2211-4b43-a0a6-29265e8a71e6" name="AmountMatchCheck"><con:configuration><path>//html[1]/body[1]/div[1]/div[2]/div[2]/form[1]/div[1]/fieldset[1]/input[3]/@value</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Step_CCPayment" id="a4607f1e-dfc9-4fd7-8f88-7c11b2372cb6"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" id="3a14e802-74d9-4406-9f7a-7c8690c89420" name="Step_CCPayment" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Referer" value="https://payments.uat.freedompay.com/Checkout/Payment?transid=549091d9-9041-4d7e-938f-807b2f6f6e84" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${TransactionProperties#CCSubmitUrl}</con:endpoint><con:request>{
"TransactionId": "${TransactionProperties#TransactionId}",
"TransactionTotal": ${TransactionProperties#Amount},
"CardNumberLabelText": "4444333322221111",
  "ExpirationDateLabelText": "03/19",
  "PaymentType": "1",
  "PostalCodeLabelText": "55426",
  "SecurityCodeLabelText": "123"
}</con:request><con:assertion type="Valid HTTP Status Codes" id="bcbccb58-5c18-4d73-acbf-58071dbb6b64" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="388ca7cb-973b-4812-a32b-3b6254196f57" name="PaymentSuccessCheck"><con:configuration><token>success</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="Step_PickupPostOrder" id="9a53c751-55e0-4b44-aa06-c5f98a67eb7c"><con:settings/><con:config service="PickUpPostOrder" resourcePath="/AOO/v1/PickupOrders/{siteId}/{orderId}/{customerId}" methodName="PickupPostOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_PickupPostOrder" id="5603d274-6826-4482-903f-8c46ccca572d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X_CLIENT_ID" value="${Properties#cid}"/>
  &lt;con:entry key="X_CLIENT_SECRET" value="${Properties#cs}"/>
  &lt;con:entry key="origin" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
   "TransactionId": "${TransactionProperties#TransactionId}",
    "RestaurantTip": ${Properties#resttip} ,   
   "Vehicle":    {
      "$id": "3",
      "Make": "sample string 1",
      "Model": "sample string 2",
      "Color": "sample string 3"
   },
   "SendEmail": true,
   "FavoriteName": "qafav",
   "UpdateTimeDisabled": true,
   "AssignLoyalty": false,
   "ASAPDeliveryTimeEnabled": true,
   "ApplyStoredValue": false,
   "LockOrderModification": false
}</con:request><con:originalUri>https://bww-pickuporder-api-chtest.cloudhub.io/EXP/AOO/v1/PickupOrders/5/orderId/68bd02ae-a5fb-4e18-96b0-b2ae85c3802c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8fdec129-f810-44a7-9762-9db6fa859041" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce6ead68-1685-493d-a93a-ac033588e4a4" name="ResultCodeValueCheck"><con:configuration><path>$['ResultCode']</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d34462be-5780-4ae7-91b2-eb9b5689d814" name="PromiseTimeCheck"><con:configuration><path>$['Order']['PromiseDateTime']</path><content>${Properties#ptime}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1af08482-1ef5-41eb-bad7-ea06b2610097" name="HasFailedItemsCheck"><con:configuration><path>$['HasFailedItems']</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31abaa0a-d8c9-495f-8179-5ecf16cba0e4" name="SiteIdCheck"><con:configuration><path>$['Order']['SiteId']</path><content>${TransactionProperties#siteid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d1a61a0-1e1f-4afd-85b6-529d6583dbcf" name="OrderIdCheckNMatchFromPutorder"><con:configuration><path>$['Order']['OrderId']</path><content>${TransactionProperties#orderid}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77f19e4-9b04-4ad6-8af8-c32b937f76b6" name="TotalAmountCheckMatch"><con:configuration><path>$['FinancialSummary']['Total']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="orderId" value="${TransactionProperties#orderid}"/>
  <con:entry key="customerId" value="${Properties#customerid}"/>
  <con:entry key="siteId" value="${TransactionProperties#siteid}"/>
  <con:entry key="forceATODeposit" value="false"/>
</con:parameters><con:parameterOrder><con:entry>siteId</con:entry><con:entry>orderId</con:entry><con:entry>customerId</con:entry><con:entry>forceATODeposit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step_FPPTransactionStatus" id="76a2e25e-8aab-4639-927b-aebf891f981e"><con:settings/><con:config service="TransactionStatus" resourcePath="/CheckoutService/CheckoutService.svc/GetTransaction" methodName="TransactionStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step_FPPTransactionStatus" id="5d51976e-9dbe-4d5a-9806-683ec6cf8ac1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://payments.uat.freedompay.com</con:endpoint><con:request>"${TransactionProperties#TransactionId}"</con:request><con:originalUri>https://payments.uat.freedompay.com/CheckoutService/CheckoutService.svc/GetTransaction</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f09d82ab-899d-489f-b32a-d0698abd7151" name="HTTPStatusCodesCheck"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85fa3c75-f42e-42ea-b301-4b9518cee076" name="AuthorizationStatusCheck"><con:configuration><path>$['AuthResponse']['AuthorizationDecision']</path><content>ACCEPT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7ebfbb7c-3b8e-481a-859d-1af6bdea4f61" name="AuthorizationAmountMatchCheck"><con:configuration><path>$['AuthResponse']['FreewayResponse']['Amount']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="baf76fdf-0ec0-47e0-a738-d93b2874949b" name="CapturedAmountMatchCheck"><con:configuration><path>$['OriginalRequest']['TransactionTotal']</path><content>${TransactionProperties#Amount}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1a98f946-1d6a-4ed0-aa88-eaf510220ccd" name="ProcessorResponseCodeCheck"><con:configuration><path>$['ProcessorResponseCode']</path><content>100: APPROVED</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Report" id="5011e599-86cd-4250-9d13-98b780ea25e1" disabled="true"><con:settings/><con:config><script>import groovy.xml.DOMBuilder;
import groovy.xml.dom.DOMCategory;
import org.codehaus.groovy.runtime.*;
import groovy.io.FileType
import groovy.util.AntBuilder 
import groovy.sql.Sql 
import com.eviware.soapui.support.GroovyUtils
import com.eviware.soapui.support.GroovyUtils.*
import com.eviware.soapui.model.propertyexpansion.PropertyExpander; 
import com.eviware.soapui.model.propertyexpansion.PropertyExpansionContext; 
import com.eviware.soapui.model.support.ModelSupport;
import com.eviware.soapui.model.testsuite.TestCaseRunContext;
import com.eviware.soapui.model.support.TestRunListenerAdapter
import com.eviware.soapui.model.testsuite.TestRunContext
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.model.testsuite.TestCase
import com.eviware.soapui.model.testsuite.TestCaseRunner
import com.eviware.soapui.support.*;
import com.eviware.soapui.impl.wsdl.support.http.ProxyUtils
import groovy.xml.MarkupBuilder
import java.lang.*;
import java.io.*;
import java.lang.String;
import com.eviware.soapui.support.*; 
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import groovy.xml.MarkupBuilder

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStep
def testcaseName = testRunner.testCase.name
log.info testcaseName
def testSuiteName = testRunner.testCase.testSuite.name

def fileDirPathHyper = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName
def fileDirPath = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Repository/"
def fileDir = new File(fileDirPath);
if(!fileDir .exists()) {
    fileDir .mkdirs();
} 

def createBackUpFolder
def pathBackUpFolder = fileDirPath+"Backup/"
	createBackUpFolder = new File(pathBackUpFolder)
	if(createBackUpFolder.exists() == false){
		createBackUpFolder.mkdirs()
	}
	def oldfilename
	def tempValue = 0
	def inBackFolderPath
	new File(fileDirPath).eachFile() 
	{ file->  
		oldfilename = file.getName()
		if (oldfilename.contains("Step_") &amp;&amp; tempValue == 0){
			inBackFolderPath = oldfilename.substring(oldfilename.length()-23, oldfilename.length()-4)
			log.info("inBackFolderPath:"+inBackFolderPath)
			tempValue = 1
		}
		createBackUpFolder =  new File(pathBackUpFolder+"/"+inBackFolderPath)
		if (createBackUpFolder.exists() == false)
		{
			createBackUpFolder.mkdirs()
		}
		File dir = new File(pathBackUpFolder+"/"+inBackFolderPath);   
		file.renameTo(new File(dir, file.getName()));      
	}

	def k = 0;
	def serviceStepNameList = []
	def serviceStepStatusList = []
	def serviceRequestPathList = []
	def serviceResponsePathList = []
	def serviceAssertionPathList = []

for(testSteps in context.testCase.testStepList)
{
	def date = new Date()
	def currentTime = date.format("yyyy-MM-dd-HH-mm-ss")
	testStep = testSteps.name
	if (testStep.contains("Step_")){
		myRequestStep = testRunner.testCase.getTestStepByName(testStep)
		serviceStepNameList[k] = testStep
		
		def requestFile =fileDirPath+testStep+"Request_"+currentTime+".txt"
		serviceRequestPathList[k] = requestFile
		def myReqFile = new File(requestFile)
		myReqFile.write(new String(myRequestStep.testRequest.messageExchange.rawRequestData))		

		def responseFile =fileDirPath+testStep+"Response_"+currentTime+".txt"
		serviceResponsePathList[k] = responseFile
		def myResFile = new File(responseFile)
		myResFile.write(new String(myRequestStep.testRequest.messageExchange.rawResponseData))

		def soapStep = testRunner.testCase.testSteps[""+testStep+""]
		def AssertFile =fileDirPath+testStep+"Assertion_File_"+currentTime+".txt"
		serviceAssertionPathList[k] = AssertFile
		def j = new File(AssertFile)
		String assertion_Status
		def i = 0
		def flag = 0;
		String step_Status
		for( assertion in soapStep.assertionList )
		{
			if(i==0){
				j.write('Assertion'+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				//j.append('JSON Token: '+assertion.getToken()+'\n')
				j.append('Token Value: '+assertion.id)
			}
			else{
				j.append('\n============================================\n')
				j.append('Assertion Name: '+assertion.label+'\n')
				j.append('============================================\n')
				j.append('Assertion Description: '+assertion.DESCRIPTION+'\n')
				j.append('Status: '+assertion.status +'\n')
				j.append('Token Value: '+assertion.id)
			}
		
		
				if(assertion.status == assertion.status.VALID){
					serviceStepStatusList[k] = "PASSED"
				}
				else if(assertion.status == assertion.status.FAILED){
					serviceStepStatusList[k] = "FAILED"
				}
			i = i+1
		}
		k = k+1
	}
}

log.info k
def totStepCount = k
def m

for(m=0;m&lt;totStepCount;m++){
	serviceRequestPathList[m] = serviceRequestPathList[m].replace(fileDirPathHyper,"..")
	serviceResponsePathList[m] = serviceResponsePathList[m].replace(fileDirPathHyper,"..")
	serviceAssertionPathList[m] = serviceAssertionPathList[m].replace(fileDirPathHyper,"..")
}
    		def strintialwriter =""
		def strtablewriter  =""
		def strtempcontentwriter  =""
		def strcontentwriter =""
		def strjscriptwriter =""
		def statusFontColor
		def z
		for(z=1;z&lt;=totStepCount;z++){
			if(serviceStepStatusList[z-1]=="PASSED"){
				statusFontColor = "Green"
			}else{
				statusFontColor = "Red"	
			}
			StringWriter intialwriter = new StringWriter() 
			def buildInitialize = new MarkupBuilder(intialwriter)
			buildInitialize.html{   
				head{   
					style('''   
					.cls_innerTable {   
						border: 1px solid  #000000;
						font-weight:normal;
						color: black;
						font-family: Calibri;
						font-size: 13px;        
					}   
					''')
					style('''   
					.cls_innerTable td {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;        
					}   
					''') 
					style('''   
					.cls_innerTable th {   
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000; 
						border-bottom: 1px solid #000000;
						border-right: 1px solid #000000;
					   
					}   
					''')     
				} 
			}
			strintialwriter = intialwriter.toString()	
			StringWriter tablewriter = new StringWriter() 
			def buildBody = new MarkupBuilder(tablewriter)
			buildBody.body{   
				table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
					tr('height':'30','width':'98%'){
						th('colspan':'11','style':'text-align:centre;font-size:11pt','Bgcolor':'#e0e0e0'){
						b{
							span('style':'text-align:centre;color:Black;font-size:15pt:',testSuiteName)    			
						}    		
						}
					}		
					tr('height':'30'){
						th('colspan':'11','style':'text-align:left','Bgcolor':'#ffffff'){    		
						 span('style':'text-align:centre;color:Black;font-size:10pt') {
						 	u(testcaseName){    	 		
						 		}
							}    	 		    		
						}
				  	}
					tr('height':'20','bgcolor':'#8DB3E2'){
						td('width':'20%','style':'text-align:center'){
							b("Services")
						}				
						td('width':'10%','style':'text-align:center'){
							b("Request")					
						}		
						td('width':'10%','style':'text-align:center'){
							b("Response")
						}							
						td('width':'10%','style':'text-align:center'){
							b("Execution Status")
						}
						td('width':'25%','style':'text-align:center'){
							b("Assertion")
						}	
						td('width':'25%','style':'text-align:center'){
							b("Warnings/Errors")
						}						
					}
				}
			}
			strtablewriter = tablewriter.toString()
			StringWriter contentwriter = new StringWriter() 
			def buildContent = new MarkupBuilder(contentwriter)	
			buildContent.table('name':'Result','width':'98%','class':'cls_innerTable','cellspacing':'0','cellpadding':'0'){
			 	tr('height':'20','align':'centre','class':'cls_innerTable'){
				 	td('width':'20%','class':'cls_innerTable','style':'text-align:center'){
						b(serviceStepNameList[z-1])
					}					
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceRequestPathList[z-1],"Request")
					}			
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
							a('target':'_blank','href':serviceResponsePathList[z-1],"Response")
					}
					td('width':'10%','class':'cls_innerTable','style':'text-align:center'){
						b{
							font('color':statusFontColor,serviceStepStatusList[z-1]){     				
							}
						}
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						a('target':'_blank','href':serviceAssertionPathList[z-1],"Assertion")
					}
					td('width':'25%','class':'cls_innerTable','style':'text-align:center'){
						b('Warning')
					}		
				}  	 	
			}
			strtempcontentwriter = contentwriter.toString()	
			strcontentwriter = strcontentwriter + strtempcontentwriter
			strtempcontentwriter = ""
			strReqPath = ""
			strResPath = ""
		}
		StringWriter jscriptwriter = new StringWriter() 
		def buildjavascript = new MarkupBuilder(jscriptwriter)   
		buildjavascript.script('language':'JavaScript',"function ExpandCompress(nam){if(eval(nam).style.display==\"\"){eval(nam).style.display=\"none\"}else if(eval(nam).style.display==\"none\"){eval(nam).style.display=\"\"}}"){
		}
		strjscriptwriter = jscriptwriter.toString()		
		def finalhtmlReport = strintialwriter + strtablewriter + strcontentwriter + strjscriptwriter
		strintialwriter = ""
		strtablewriter = ""
		strcontentwriter = ""
		strjscriptwriter = ""

		def fileDirPathHTML = "D:/Backup/MyBWW/WebserviceProjectTestResult/PickupOrder/PrePayment/"+testcaseName+"/Report/"
		def reqfolderHTML = new File(fileDirPathHTML)
		if(reqfolderHTML.exists())
		{
		}
		else
		{	
			reqfolderHTML.mkdirs()	
		}			
		def pathBackFolderHTML
		pathBackFolderHTML = fileDirPathHTML+"Backup/"	
		def createBackFolderHTML
		def oldfilenameHTML
		new File(fileDirPathHTML).eachFile() 
		{ file->  
		oldfilenameHTML = file.getName()
		createBackFolderHTML =  new File(pathBackFolderHTML)
		if (createBackFolderHTML.exists() == false)
		{
		createBackFolderHTML.mkdirs()
		}
		File dir = new File(pathBackFolderHTML);   
		file.renameTo(new File(dir, file.getName()));  			  		  		
		}
		if(finalhtmlReport==null){
			finalhtmlReport = ""
		}
		def shortDate = new Date().format("yyyy-MM-dd_HH-mm-ss").toString();	
		def strFilename = testcaseName +"_@"+ shortDate +".html"
		log.info fileDirPathHTML
		log.info strFilename		
		def htmlfile  = new File(fileDirPathHTML+strFilename)
		htmlfile.write(finalhtmlReport, "UTF-8")</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>2d1b0237-e479-4889-9cfb-19b5f4d95db1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e335eb62-98a5-45dd-8724-c91953a18900</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bb0071d8-27e9-4e31-ae51-947b64e88c0a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>15c05005-5fdc-4a30-8213-55f1595c19a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f07e2ebc-91e3-4dc1-b380-e390a9f3ca49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b732bfea-3ae2-40f0-ac55-9e9bd804c2d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2893bdb9-fe28-4ae2-a529-7be9e497cad8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14df4ea4-ce2b-4c54-ba64-fc6370d09644</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07b60d21-98fc-4c57-87a4-9ff6f9f82dba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57d0b942-95af-4e5a-918e-fda010bd02c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b13adf5-cef7-49e3-b3c1-0d0c5a56d60a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d5eb8061-84ee-4d4e-a9cd-9aa3627a6d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0717aa70-45b0-42b9-b2af-b6651d22b303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>EndPoint</con:name><con:value>https://bww-pickuporder-api-chtest.cloudhub.io</con:value></con:property><con:property><con:name>ClientSecret</con:name><con:value>1B44fE3b0dCD4120ae875C90a661bd53</con:value></con:property><con:property><con:name>ClientID</con:name><con:value>dfdbd245cb7746229f51d39f40efbffa</con:value></con:property><con:property><con:name>siteid</con:name><con:value>5</con:value></con:property><con:property><con:name>ptime</con:name><con:value>2019-02-08T13:30:00</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:requirements/><con:properties/><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:authRepository/><con:tags/></con:soapui-project>